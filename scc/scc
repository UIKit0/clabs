#!/bin/gawk -f

# USAGE:
#	scc file.s.cc [ options ]
#
# OPTIONS:
#	-c		clean. Delete file.h and file.cc generated from file.s.cc

BEGIN {
	if (ARGC < 2) {
		print "You must specify an scc file!"
		exit 1
	}

	file_scc = ARGV[1]
	if (file_scc !~ /\.s\.cc$/) {
		print file_scc ": it is not an scc file!"
		exit 2
	}

	file_cc = file_h = file_scc
	sub(/\.s\.cc$/, ".cc", file_cc)
	sub(/\.s\.cc$/, ".h",  file_h )

	if (ARGV[2] == "-c")
		exit system("rm -f " file_cc " " file_h)

	print "// cc generated by scc" > file_cc
	print "#include \"" file_h "\"" >> file_cc
	print "// h generated by scc"  > file_h

	stat = 0		# STAT_NORMAL
}

{
	# STAT_NORMAL
	if (stat == 0) {
		if ($0 ~ /^extern:/) {
			sub(/^extern:[[:blank:]]*/, "")
			print $0 >> file_cc

			sub(/[[:blank:]]*=[^,;"]+[[:blank:]]*/, "")
			sub(/=?".*?"/, "")
			sub(/\(.*?\)/, "")
			print "extern " $0 >> file_h
		}

		else if ($0 ~ /^func:/) {
			sub(/^func:[[:blank:]]*/, "")
			print $0 ";" >> file_h

			sub(/[[:blank:]]*=[^,;"]+[[:blank:]]*/, "")
			sub(/=?".*?"/, "")
			print $0 >> file_cc
		}

		else if ($0 ~ /^[[:blank:]]*class/) {
			print $0 >> file_h

			class_name = gensub(/^.*?class[[:blank:]]+([a-zA-Z0-9_]+).*$/,\
						"\\1", $0)
			stat = 1	# STAT_CLASS
		}

		else
			print $0 >> file_cc
	}

	# STAT_CLASS
	else if (stat == 1) {
		if ($0 ~ /^[[:blank:]]*\};;/) {
			stat = 0		# STAT_NORMAL
			print "};" >> file_h
		}

		# func
		else if ($0 ~ /[^=]+\(.*\)[^;]?$/) {
			# [De]initialize function
			if ($0 ~ /^[[:blank:]]*~?[[:alnum:]]+\(/) {
				print $0 ";" >> file_h

				sub(/[[:blank:]]*=[^,;"]+[[:blank:]]*/, "")
				sub(/=?".*?"/, "")
				sub(/^[[:blank:]]/, "")
				print class_name "::" $0 >> file_cc
			}
		}

		else
			print $0 >> file_h
	}
}

