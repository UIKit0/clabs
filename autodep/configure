#!/bin/bash

# Automatic Dependencies Solving Makefile Generating Configure Script
# Written by eXerigumo Clanjor

# GLOBAL VARS
CXXFLAGS="-s"
CXXOPTIMIZE="-O2"
DEPS=()
OBJS=()

# -- void main(argv)
main()
{
	# parse arguments
	while ! [ -z "$1" ]; do
		case $1 in
			"--help")	show_help
						;;
			"-h")	show_help
					;;
			"--enable-debug")	CXXFLAGS="-g -DDEBUG"
								CXXOPTIMIZE=""	# No optimization
								shift ;;
			"-Ofast")	CXXOPTIMIZE="-Ofast"
								shift ;;
			*)	error "unknown argument: $1"
				;;
		esac
	done

	generate_makefile
}

# -- void generate_makefile(void)
generate_makefile()
{
	echo "# Generated by ADSMGCS." > makefile
	echo >> makefile
	echo "CC = g++" >> makefile
	echo "CXXFLAGS = -Wall $CXXFLAGS $CXXOPTIMIZE" \
		 "-lglut -lGL -lGLU" >> makefile
	echo >> makefile

	echo "all: main" >> makefile
	echo "clean:" >> makefile
	echo "	rm -f main" >> makefile
	echo "	rm -f *.o" >> makefile	# TODO: Fixme
	echo "rebuild: clean all" >> makefile
	echo "debug: all" >> makefile
	echo "	./main" >> makefile
	echo >> makefile

	generate_dep "main.cc"

	echo "main:" ${OBJS[*]} >> makefile
	cat .makefile >> makefile
	echo >> makefile
	rm -f .makefile
}

# -- void show_help(void)
show_help()
{
	echo
	echo "OPTIONS:"
	echo "	--help, -h"
	echo "		Show this help"
	echo "	--enable-debug"
	echo "		Enable debug mode"
	echo "	-Ofast"
	echo "		Use -Ofast instead of -O2"
	echo

	exit 0
}

# -- void error(string err)
error()
{
	echo -e "\e[1;31merror:\e[m $1"
	exit 1
}

# -- void generate_dep(string file)
generate_dep()
{
	if ! g++ -MM "$1" > .dep; then
		error "unexpected failure of g++."
	fi
	cat .dep >> .makefile

	local dep="`cat .dep|awk '{sub(/^ |\\\\$/, ""); printf $0}' \
			|sed 's/[^ ]\+: [^ ]\+ \?//g'`"
	local obj="`cat .dep|sed 's/:.*$//g'`"
	rm -f .dep

	local id=${#OBJS[*]}
	OBJS[$id]="$obj"
	
	local d
	for d in $dep; do
		if need_recursive_dep "$d"; then
			d="`echo $d|sed 's/\\.h$/.cc/g'`"
			generate_dep "$d"
		fi
	done
}

# -- bool need_recursive_dep(string file)
need_recursive_dep()
{
	local d
	for d in ${DEPS[*]}; do
		[[ "$d" == "$1" ]] && return 1
	done

	local id=${#DEPS[*]}
	DEPS[$id]="$1"
	return 0
}

main $*
