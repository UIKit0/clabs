.\"     Title: fvwm
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets vsnapshot_6661 <http://docbook.sf.net/>
.\"      Date: 16-April-2011
.\"    Manual: Fvwm 2.6.1
.\"    Source: 
.\"
.TH "FVWM" "1" "16-April-2011" "" "Fvwm 2.6.1"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH NAME
.PP
Fvwm \- F? Virtual Window Manager for X11
.SH SYNOPSIS
.HP 5
\fBfvwm\fR [\fB\-c\fR\ \fIconfig\-command\fR] [\fB\-d\fR\ \fIdisplayname\fR] [\fB\-f\fR\ \fIconfig\-file\fR] [\fB\-r\fR] [\fB\-s\fR\ [\fIscreen_num\fR]] [\fB\-V\fR] [\fB\-C\fR\ \fIvisual\-class\fR | \fB\-I\fR\ \fIvisual\-id\fR] [\fB\-l\fR\ \fIcolors\fR\ [\fB\-L\fR]\ [\fB\-A\fR]\ [\fB\-S\fR]\ [\fB\-P\fR]] [\fB\-D\fR] [\fB\-h\fR] [\fB\-i\fR\ \fIclient\-id\fR] [\fB\-F\fR\ \fIstate\-file\fR] [\fB\-\-debug\-stack\-ring\fR] [\fB\-blackout\fR]
.SH DESCRIPTION
.PP
Fvwm is a window manager for X11\.  It is designed to minimize
memory consumption, provide a 3D look to window frames, and a
virtual desktop\.
.PP
Note that there are several window managers around that have
"fvwm" in their name\.  In the past, version 2\.x of fvwm was
commonly called fvwm2 to distinguish it from the former version
1\.x (fvwm or even fvwm1)\.  Since version 1\.x has been replaced by
version 2\.x a long time ago we simply call version 2\.x and all
versions to come, fvwm, throughout this document, and the
executable program is named fvwm\.  There is an fvwm offspring
called fvwm95, it is mostly a patched version of fvwm\-2\.0\.43\.  The
main goal of fvwm95 was to supply a Windows 95 like look and
feel\.  Since then, fvwm has been greatly enhanced and practically
all fvwm95 features can be achieved by fvwm\.
.PP
Fvwm provides both, a large
\fIvirtual desktop\fR
and
\fImultiple disjoint desktops\fR
which can be used separately or together\.  The virtual desktop
allows you to pretend that your video screen is really quite
large, and you can scroll around within the desktop\.  The multiple
disjoint desktops allow you to pretend that you really have
several screens to work at, but each screen is completely
unrelated to the others\.
.PP
Fvwm provides
\fIkeyboard accelerators\fR
which allow you to perform most window manager functions,
including moving and resizing windows, and operating the menus,
using keyboard shortcuts\.
.PP
Fvwm has also overcome the distinction between configuration
commands and action commands that most window managers
make\.  Configuration commands typically set fonts, colors, menu
contents, key and mouse function bindings, while action commands
do things like raise and lower windows\.  Fvwm makes no such
distinction, and allows anything to be changed at any time\.
.PP
Other noteworthy differences between fvwm and other X11 window
managers are the introduction of the \fISloppyFocus\fR and \fINeverFocus\fR
focus methods\.  Focus policy can be separately specified for
different window groups\.  Windows using \fISloppyFocus\fR acquire focus when the pointer moves into them and retain focus
until some other window acquires it\.  Such windows do not lose
focus when the pointer moves into the root window\.  The
\fINeverFocus\fR
policy is provided for use with windows into which one never types
(e\.g\. xclock, oclock, xbiff, xeyes, tuxeyes) \- for example, if a
SloppyFocus terminal window has focus, moving the pointer over a
NeverFocus
decoration window does not deprive the terminal of focus\.
.SH OPTIONS
.PP
These are the command line options that are recognized by fvwm:
.PP
\fB\-i\fR | \fB\-\-clientid\fR \fIid\fR
.RS 4
This option is used when fvwm is started by a session manager\.  Should not be used by a user\.
.RE
.PP
\fB\-c\fR | \fB\-\-cmd\fR \fIconfig\-command\fR
.RS 4
Causes fvwm to use
\fIconfig\-command\fR
instead of '\fBRead\fR
\fIconfig\fR' (or '\fBRead\fR
\fI\.fvwm2rc\fR') as its initialization command\.  (Note that up to 10
\fB\-f\fR
and
\fB\-c\fR
parameters can be given, and they are executed in the order specified\.)
.sp
Any module started by command line arguments is assumed to be a module that sends back config commands\.  All command line modules have to quit before fvwm proceeds on to the StartFunction and setting border decorations and styles\.  There is a potential deadlock if you start a module other than
\fBFvwmCpp\fR/\fBFvwmM4\fR/\fBFvwmPerl\fR
but there is a timeout so fvwm eventually gets going\.
.sp
As an example, starting the pager this way hangs fvwm until the timeout, but the following should work well:
.sp
.RS 4
.nf
fvwm \-c "\fBAddToFunc\fR StartFunction I \fBModule\fR \fBFvwmPager\fR"
.fi
.RE
.RE
.PP
\fB\-d\fR | \fB\-\-display\fR \fIdisplayname\fR
.RS 4
Manage the display called
\fIdisplayname\fR
instead of the name obtained from the environment variable
\fI$DISPLAY\fR\.
.RE
.PP
\fB\-D\fR | \fB\-\-debug\fR
.RS 4
Puts X transactions in synchronous mode, which dramatically slows things down, but guarantees that fvwm's internal error messages are correct\.  Also causes fvwm to output debug messages while running\.
.RE
.PP
\fB\-f\fR \fIconfig\-file\fR
.RS 4
Causes fvwm to read
\fIconfig\-file\fR
instead of
\fI~/\.fvwm/config\fR
as its initialization file\.  This is equivalent to \-c '\fBRead\fR
\fIconfig\-file\fR'\.
.RE
.PP
\fB\-h\fR | \fB\-\-help\fR
.RS 4
A short usage description is printed\.
.RE
.PP
\fB\-r\fR | \fB\-\-replace\fR
.RS 4
Try to take over from a previously running wm\.  This does not work unless the other wm is
ICCCM2
2\.0 compliant\.
.RE
.PP
\fB\-F\fR | \fB\-\-restore\fR \fIstate\-file\fR
.RS 4
This option is used when fvwm is started by a session manager\.  Should not be used by a user\.
.RE
.PP
\fB\-s\fR | \fB\-\-single\-screen\fR [\fIscreen_num\fR]
.RS 4
On a multi\-screen display, run fvwm only on the screen named in the
\fI$DISPLAY\fR
environment variable or provided through the
\fB\-d\fR
option\.  The optional argument
\fIscreen_num\fR
should be positive or null and override the screen number\.  Normally, fvwm attempts to start up on all screens of a multi\-screen display\.
.RE
.PP
\fB\-V\fR | \fB\-\-version\fR
.RS 4
Prints the version of fvwm to
\fIstderr\fR\.  Also prints an information about the compiled in support for readline, rplay, stroke, xpm, png, svg,
GNOME
hints,
EWMH
hints, session management, bidirectional text, multibyte characters, xinerama and Xft aa font rendering\.
.RE
.PP
\fB\-C\fR | \fB\-\-visual\fR \fIvisual\-class\fR
.RS 4
Causes fvwm to use
\fIvisual\-class\fR
for the window borders and menus\.
\fIvisual\-class\fR
can be "StaticGray", "GrayScale", "StaticColor", "PseudoColor", "TrueColor" or "DirectColor"\.
.RE
.PP
\fB\-I\fR | \fB\-\-visualid\fR \fIid\fR
.RS 4
Causes fvwm to use
\fIid\fR
as the visual id for the window borders and menus\.
\fIid\fR
can be specified as N for decimal or 0xN for hexadecimal\.  See man page of xdpyinfo for a list of supported visuals\.
.RE
.PP
\fB\-l\fR | \fB\-\-color\-limit\fR \fIlimit\fR
.RS 4
Specifies a
\fIlimit\fR
on the colors used in image, gradient and possibly simple colors used by fvwm\.  In fact, fvwm (and all the modules) uses a palette with at most
\fIlimit\fR
colors\.  This option is only useful with screens that display 256 colors (or less) with a dynamic visual (PseudoColor, GrayScale or DirectColor)\.  The default depends on your X server and how you run fvwm\.  In most case this default is reasonable\.  The
\fB\-l\fR
option should be used only if you encounter problems with colors\.  By default, fvwm tries to detect large pre\-allocated palettes\.  If such a palette is detected fvwm uses it and a priori the
\fB\-l\fR
must not be used\.  Moreover, in this case the
\fB\-A\fR
and
\fB\-S\fR
options are forced\.  Note that XFree\-4\.2 pre\-allocates 244 colors (if you use a driver with Render support) leaving only a few free colors\.  This may lead to some color problems (and nothing can be done)\.  XFree\-4\.3 or better pre\-allocate only 85 colors\.  If no pre\-allocated palette is auto detected the defaults are as follow:
.PP
Display depth 8 (256 colors)
.RS 4
.nf
.IP "" 4
PseudoColor: 68 (4x4x4 color cube + 4 grey)
GrayScale: 64 regular grey
DirectColor: 32 (3x3x3 color cube + 5 grey)
.fi
.RE
.PP
Display depth 4 (16 colors)
.RS 4
.nf
.IP "" 4
PseudoColor: 10 (2x2x2 color cube + 2 grey)
GrayScale: 8 regular grey
DirectColor: 10 (2x2x2 color cube + 2 grey)
.fi
.RE
.sp
These defaults may change before version 2\.6\.  Note that if you use a private color map (i\.e\., fvwm is started with the
\fB\-C\fR
or the
\fB\-I\fR
options), then other defaults are used\.
.sp
Now what to do if you encounter problems with colors? The first thing to do is to check if you really cannot run your X server with depth 15, 16 or better\.  Check your X server documentation\.  Note that some hardware can support two different depths on the same screen (typically depth 8 and depth 24)\.  If depth 8 is the default, you can force fvwm to use the best depth by using the
\fB\-C\fR
option with
\fITrueColor\fR
as argument\.  So now we assume that you are forced to run in depth 8 with a dynamic visual because your hardware/driver cannot do better or because you need to use an application which needs to run under this mode (e\.g\., because this application needs read\-write colors)\.  What it should be understand is that you have only 256 colors and that all the applications which use the default color map must share these colors\.  The main problem is that there are applications which use a lot or even all the colors\.  If you use such application you may have no more free colors and some applications (which used only a few colors) may fail to start or are unusable\.  There are three things that can be done (and fvwm does not really play a particular role, all applications are concerned)\.  The first is to run the applications which waste your (default) color map with a private color map\.  For example, run netscape with the \-install option, run
KDE
or
QT
applications with the \-\-cmap option, use the
\fB\-C\fR
option for fvwm\.  The disadvantage of this method is that it is visually disturbing (see the
\fBColormapFocus\fR
command for a better control of the color maps switching)\.  The second method is to limit the number of colors that the applications use\.  Again, some applications have options to specify a given color limit\.  With fvwm you may try various values, 61 (a special "visual" palette), 56 (a 4x4x3 color cube plus 6 grey), 29 (a 3x3x3 color cube plus 2 grey), 10 or 9\.  Also, you may use the
\fB\-L\fR
option\.  However, limiting the number of colors is not the definitive solution\.  The definitive solution is to try cause applications which use a lot of colors use the same colors\.  This is a difficult task as there are no formal standards for this goal\.  However, some toolkits as
QT
and
GTK
use color cubes as palettes\.  So, the idea is to configure your applications/toolkits to all use the same color cube\.  Moreover, you can use the colors in this color cube in your X resources configuration files and/or as arguments to colors options\.  Fvwm can use any color cube of the form RxGxB with 2 <= R <= 6, R = G, R\-1 =< B <= R and B >= 2\.  To get an RxGxB color cube give an argument to
\fB\-l\fR
an integer c >= R*G*B and < (R+1)*(G+1)*B if B=R and < R*G*(B+1) if B < R (and different from 61)\.  If c > R*G*B, then some grey may be added to the color cube\.  You can use the
\fBPrintInfo\fR
\fIColors\fR
[\fI1\fR]
command to get information on your fvwm colors setting\.  In particular, this command prints the palette used by fvwm in rgb format (the last integer gives the number of times fvwm has allocated the colors)\.
.RE
.PP
\fB\-L\fR | \fB\-\-strict\-color\-limit\fR
.RS 4
If the screen displays 256 colors (or less) and has a dynamic visual, causes fvwm to use its palette for all the colors\.  By default, the palette is used only for images and gradients\.
.RE
.PP
\fB\-P\fR | \fB\-\-visual\-palette\fR
.RS 4
If the screen displays 256 colors (or less) and has a dynamic visual, this option causes fvwm to use a palette designed for limiting the "visual" color distance between the points of the palette\.  Moreover, for better color sharing, if possible colors with a name in the X rgb data base are used for defining the colors (with the hope that applications and images prefer to use named colors)\.  If the
\fB\-l\fR
option is not used this palette has 61 colors\.  This palette is also automatically selected if 61 or 9 is used as argument to the
\fB\-l\fR
option\.
.RE
.PP
\fB\-A\fR | \fB\-\-allocate\-palette\fR
.RS 4
If the screen displays 256 colors (or less) and has a dynamic visual this option causes fvwm to allocate all the colors of its palette at start up for reserving these colors for future use\.  This option forces the
\fB\-static\-palette\fR
option\.  By default, fvwm allocates (reserves) a color in its palette only if it needs this color\.
.RE
.PP
\fB\-S\fR | \fB\-\-static\-palette\fR
.RS 4
If the screen displays 256 colors (or less) and has a dynamic visual this option causes fvwm to never free the colors in its palette\.  By default, when fvwm does not need a color any more it frees this color so that a new color can be used\.  This option may speed up image loading and save a few bits of memory\.
.RE
.PP
\fB\-blackout\fR
.RS 4
This option is provided for backward compatibility only\.  Blacking out the screen during startup is not necessary (and doesn't work) anymore\.  This option will be removed in the future\.
.RE
.PP
\fB\-\-debug\-stack\-ring\fR
.RS 4
Enables stack ring debugging\.  This option is only intended for internal debugging and should only be used by developers\.
.RE
.SH ANATOMY OF A WINDOW
.PP
Fvwm puts a decorative border around most windows\.  This border
consists of a bar on each side and a small L\-shaped section on
each corner\.  There is an additional top bar called the title\-bar
which is used to display the name of the window\.  In addition,
there are up to 10 title\-bar buttons\.  The top, side, and bottom
bars are collectively known as the side\-bars\.  The corner pieces
are called the frame\.
.PP
With the built\-in minimal configuration, dragging mouse button 1
in the frame or side\-bars begins a resize operation on the window\.
Dragging mouse button 2 in the frame or side\-bars begins a move
operation\.  There are raise/lower operations bound to a single
clicking on borders\.  Similarly for the window title\.
.PP
Up to ten title\-bar buttons may exist\.  Their use is completely
user definable\.  One popular configuration uses one button on the
left that is used to bring up a list of window options and two
buttons on the right used to iconify and maximize the window\.
Another popular configuration adds a close button to the right\.
The number of title\-bar buttons used depends on which ones have
mouse actions bound to them\.  See the
\fBMouse\fR
command\.
.SH THE VIRTUAL DESKTOP
.PP
Fvwm provides multiple virtual desktops for users who wish to use
them\.  The screen is a viewport onto a
\fIdesktop\fR
which may be larger than the screen\.  Several distinct desktops
can be accessed (concept: one desktop for each project, or one
desktop for each application, when view applications are
distinct)\.  Since each desktop can be larger than the physical
screen, divided into m by n
\fIpages\fR
which are each the size of the physical screen, windows which are
larger than the screen or large groups of related windows can
easily be viewed\.
.PP
The (m by n) size (i\.e\. number of pages) of the virtual desktops
can be changed any time, by using the
\fBDesktopSize\fR
command\.  All virtual desktops must be (are) the same
size\.  The total number of distinct desktops does not need to be
specified, but is limited to approximately 4 billion total\.  All
windows on a range of desktops can be viewed in the
\fBFvwmPager\fR,
a miniature view of the desktops\.  The pager is an accessory
program, called a module, which is not essential for the window
manager to operate\.  Windows may also be listed, along with their
geometries, in a window list, accessible as a pop\-up menu, or as a
separate window, called the
\fBFvwmWinList\fR
(another module)\.
.PP
Fvwm keeps the windows on the desktop in a layered stacking order;
a window in a lower layer never obscures a window in a higher
layer\.  The layer of a window can be changed by using the
\fBLayer\fR
command\.  The concept of layers is a generalization of the
\fIStaysOnTop\fR
flag of older fvwm versions\.  The
\fIStaysOnTop\fR and
\fIStaysPut\fR
\fBStyle\fR
options are now implemented by putting the windows in suitable
layers and the previously missing
\fIStaysOnBottom\fR
\fBStyle\fR
option has been added\.
.PP
\fISticky\fR
windows are windows which transcend the virtual desktop by
"Sticking to the screen's glass"\.  They always stay put on the
screen\.  This is convenient for things like clocks and xbiffs, so
you only need to run one such gadget and it always stays with you\.
Icons can also be made to stick to the glass, if desired\.
.PP
Window geometries are specified relative to the current viewport\.
That is:
.sp
.RS 4
.nf
xterm \-geometry +0+0
.fi
.RE
.PP
.PP
creates a window in the upper left hand corner of the visible
portion of the screen\.  It is permissible to specify geometries
which place windows on the virtual desktop, but off the screen\.
For example, if the visible screen is 1000 by 1000 pixels, and the
desktop size is 3x3, and the current viewport is at the upper left
hand corner of the desktop, invoking:
.sp
.RS 4
.nf
xterm \-geometry +1000+1000
.fi
.RE
.PP
.PP
places a window just off of the lower right hand corner of the
screen\.  It can be found by moving the mouse to the lower right
hand corner of the screen and waiting for it to scroll into view\.
A geometry specified as something like:
.sp
.RS 4
.nf
xterm \-geometry \-5\-5
.fi
.RE
.PP
.PP
places the window's lower right hand corner 5 pixels from the
lower right corner of the visible portion of the screen\.  Not all
applications support window geometries with negative offsets\.
Some applications place the window's upper right hand corner 5
pixels above and to the left of the upper left hand corner of the
screen; others may do just plain bizarre things\.
.PP
There are several ways to cause a window to map onto a desktop or
page other than the currently active one\.  The geometry technique
mentioned above (specifying x,y coordinates larger than the
physical screen size), however, suffers from the limitation of
being interpreted relative to the current viewport: the window may
not consistently appear on a specific page, unless you always
invoke the application from the same page\.
.PP
A better way to place windows on a different page, screen or desk
from the currently mapped viewport is to use the
\fIStartsOnPage\fR or
\fIStartsOnScreen\fR
style specification (the successors to the older
\fIStartsOnDesk\fR
style) in your
\fIconfig\fR
file\.  The placement is consistent: it does
not depend on your current location on the virtual desktop\.
.PP
Some applications that understand standard Xt command line
arguments and X resources, like xterm and xfontsel, allow the user
to specify the start\-up desk or page on the command line:
.sp
.RS 4
.nf
xterm \-xrm "*Desk:1"
.fi
.RE
.PP
.PP
starts an xterm on desk number 1;
.sp
.RS 4
.nf
xterm \-xrm "*Page:3 2 1"
.fi
.RE
.PP
.PP
starts an xterm two pages to the right and one down from the upper
left hand page of desk number 3\.  Not all applications understand
the use of these options, however\.  You could achieve the same
results with the following lines in your
\fI\.Xdefaults\fR
file:
.sp
.RS 4
.nf
XTerm*Desk: 1
.fi
.RE
.PP
.PP
or
.sp
.RS 4
.nf
XTerm*Page: 3 2 1
.fi
.RE
.PP
.SH USE ON MULTI\-SCREEN DISPLAYS
.PP
If the
\fB\-s\fR
command line argument is not given, fvwm automatically starts up
on every screen on the specified display\.  After fvwm starts each
screen is treated independently\.  Restarts of fvwm need to be
performed separately on each screen\.  The use of
.sp
.RS 4
.nf
\fBEdgeScroll\fR 0 0
.fi
.RE
.PP
is strongly recommended for multi\-screen displays\.  You may need
to quit on each screen to quit from the X session completely\.
This is not to be confused with Xinerama support\.
.SH XINERAMA SUPPORT
.PP
Fvwm supports the Xinerama extension of newer X servers
which is similar to multi head support (multiple screens) but
allows to move windows between screens\.  If Xinerama support has
been compiled into fvwm, it is used whenever fvwm runs on an X
server that supports and uses multiple screens via Xinerama\.
Without this option, the whole desktop is treated as one big
screen\.  For example, menus might pop up right between two
screens\.  The \fIEdgeResistance\fR option
of the \fBStyle\fR command command allows for specifying
an explicit resistance value for moving windows over the screen
edge between two Xinerama screens\.  Xinerama support can be enabled
or disabled on the fly or from the configuration file with the
\fBXinerama\fR command\.  Many modules and commands work
nicely with Xinerama displays\.
.PP
Whenever a geometry in the usual X format can be supplied,
fvwm's Xinerama extension allows for specifying a screen in addition
to the geometry (or even the screen alone)\.  To do this, a '@' is
added to the end of the geometry string followed by either the
screen number or a letter\.  A number is taken as the number of the
Xinerama screen to be used (as configured in the X server)\.  The
letter can be one of 'g' for the global screen (the rectangle that
encloses all Xinerama screens), 'p' for the primary screen (see
below), 'c' for the current screen (the one that currently
contains the pointer)\.  If the X server does not support Xinerama
or only one screen is used, the screen bit is ignored\.
.sp
.RS 4
.nf
\fBStyle\fR * \fIIconBox\fR 64x300\-0\-0@p
.fi
.RE
.PP
Xinerama support can be configured to use a primary screen\.  Fvwm
can be configured to place new windows and icons on this screen\.
The primary screen is screen 0 by default but can be changed with
the
\fBXineramaPrimaryScreen\fR
command\.
.PP
Xinerama support was designed to work out of the box with the same
configuration file that would work on a single screen\.  It may
not perform very well if the involved screens use different screen
resolutions\.  In this situation, windows may get stuck in the
portion of the whole desktop that belongs to neither screen\.  When
this happens, the windows or icons can be retrieved with the
command
.sp
.RS 4
.nf
\fBAll\fR \fBMoveToScreen\fR
.fi
.RE
.PP
that can be entered in an \fBFvwmConsole\fR window or
with \fBFvwmCommand\fR\.
.PP
For multi\-screen implementations other than Xinerama, such as
Single Logical Screen, it is possible to simulate a Xinerama
configuration if the total screen seen by fvwm is made up of
equal sized monitors in a rectangular grid\.  The commands
\fBXineramaSls\fR, \fBXineramaSlsSize\fR and \fBXineramaSlsScreens\fR
are used to configure this feature\.
.SH INITIALIZATION
.PP
During initialization, fvwm searches for a configuration file
which describes key and button bindings, and many other
things\.  The format of these files is described later\.  Fvwm first
searches for configuration files using the command
.sp
.RS 4
.nf
\fBRead\fR \fIconfig\fR
.fi
.RE
.PP
This looks for file
\fIconfig\fR in \fI$FVWM_USERDIR\fR and \fI$FVWM_DATADIR\fR
directories, as described in
\fBRead\fR\.  If this fails more files are queried for backward
compatibility\.  Here is the complete list of all file locations
queried in the default installation (only the first found file
is used):
.nf
.IP "" 4
\fI$HOME\fR/\.fvwm/config
/usr/local/share/fvwm/config
.fi
.nf
.IP "" 4
\fI$HOME\fR/\.fvwm/\.fvwm2rc
\fI$HOME\fR/\.fvwm2rc
/usr/local/share/fvwm/\.fvwm2rc
/usr/local/share/fvwm/system\.fvwm2rc
/etc/system\.fvwm2rc
.fi
.PP
Please note, the last 5 locations are not guaranteed to be
supported in the future\.
.PP
If a configuration file is not found, the left mouse button, or
.SM Help
or
.SM F1
keys on the root window bring up menus and forms that can create
a starting configuration file\.
.PP
Fvwm sets two environment variables which are inherited by its
children\.  These are
\fI$DISPLAY\fR
which describes the display on which fvwm is running\.
\fI$DISPLAY\fR
may be
\fIunix:0\.0\fR
or
\fI:0\.0\fR,
which doesn't work too well when passed through ssh to another
machine, so
\fI$HOSTDISPLAY\fR
is set to a network\-ready description of the display\.
\fI$HOSTDISPLAY\fR
always uses the TCP/IP transport protocol (even for a local
connection) so
\fI$DISPLAY\fR
should be used for local connections, as it may use Unix\-domain
sockets, which are faster\.
.PP
If you want to start some applications or modules with fvwm, you
can simply put
.sp
.RS 4
.nf
\fBExec\fR app
.fi
.RE
.PP
or
.sp
.RS 4
.nf
\fBModule\fR FvwmXxx
.fi
.RE
.PP
into your
\fIconfig\fR,
but it is not recommended; do this only if you know what you are
doing\.  It is usually important to start applications or modules
after the entire config is read, because it contains styles or
module configurations which can affect window appearance and
functionality\.
.PP
The standard way to start applications or modules on fvwm's start
up is to add them to an initialization function (usually
\fBStartFunction\fR or \fBInitFunction\fR)\.
This way they are only started after fvwm finishes to read and
execute
\fIconfig\fR
file\.
.PP
Fvwm has three special functions for initialization:
\fBStartFunction\fR,
which is executed on startups and restarts;
\fBInitFunction\fR and \fBRestartFunction\fR,
which are executed during initialization and restarts
(respectively) just after StartFunction\.  These functions may be
customized in a user's
\fIconfig\fR
file using the
\fBAddToFunc\fR
command (described later) to start up modules, xterms, or whatever
you'd like to have started by fvwm\.
.PP
Fvwm has also a special exit function:
\fBExitFunction\fR,
executed when exiting or restarting before actually quitting\.
It could be used to explicitly kill modules, etc\.
.PP
If fvwm is run under a session manager, functions
\fBSessionInitFunction\fR and \fBSessionRestartFunction\fR
are executed instead of InitFunction and RestartFunction\.
This helps to define the user's
\fIconfig\fR
file to be good for both running under a session manager and
without it\.  Generally it is a bad idea to start xterms or other
applications in "Session*" functions\.  Also someone can decide to
start different modules while running under a session manager or
not\.  For the similar purposes
\fBSessionExitFunction\fR
is used instead of ExitFunction\.
.sp
.RS 4
.nf
\fBDestroyFunc\fR StartFunction
\fBAddToFunc\fR StartFunction
 + I \fBModule\fR \fBFvwmPager\fR * *
 + I \fBModule\fR \fBFvwmButtons\fR

\fBDestroyFunc\fR InitFunction
\fBAddToFunc\fR InitFunction
 + I \fBModule\fR \fBFvwmBanner\fR
 + I \fBModule\fR \fBFvwmTaskBar\fR
 + I \fBExec\fR xsetroot \-solid cyan
 + I \fBExec\fR xterm
 + I \fBExec\fR netscape

\fBDestroyFunc\fR RestartFunction
\fBAddToFunc\fR RestartFunction
 + I \fBModule\fR \fBFvwmTaskBar\fR

\fBDestroyFunc\fR SessionInitFunction
\fBAddToFunc\fR SessionInitFunction
 + I \fBModule\fR \fBFvwmBanner\fR

\fBDestroyFunc\fR SessionRestartFunction
\fBAddToFunc\fR SessionRestartFunction
 + I \fBNop\fR
.fi
.RE
.PP
You do not need to define all special functions if some are empty\.
Also note, all these special functions may be emulated now using
\fBStartFunction\fR and \fBExitFunction,\fR
like this:
.sp
.RS 4
.nf
\fBDestroyFunc\fR StartFunction
\fBAddToFunc\fR StartFunction
+ I \fBTest\fR (Init) \fBModule\fR \fBFvwmBanner\fR
+ I \fBModule\fR \fBFvwmPager\fR * *
+ I \fBTest\fR (Restart) \fBBeep\fR

\fBDestroyFunc\fR ExitFunction
\fBAddToFunc\fR ExitFunction
+ I \fBTest\fR (Quit) \fBEcho\fR Bye\-bye
+ I \fBKillModule\fR MyBuggyModule
+ I \fBTest\fR (ToRestart) \fBBeep\fR
.fi
.RE
.SH COMPILATION OPTIONS
.PP
Fvwm has a number of compile\-time options\.  If you have trouble
using a certain command or feature, check to see if support for it
was included at compile time\.  Optional features are described in
the \fIconfig\.h\fR file that is generated
during compilation\.
.SH ICONS AND IMAGES
.PP
Fvwm can load \fB\.xbm,\fR \fB\.xpm,\fR
\fB\.png\fR and
\fB\.svg\fR images\.  \fBXBM\fR
images are monochrome\.  Fvwm can always display
\fBXBM\fR files\.  \fBXPM\fR
and \fBPNG\fR formats are color images\.
SVG is a vector graphics image format\.
Compile\-time options determine whether fvwm can display
\fBXPM\fR, \fBPNG\fR or
\fBSVG\fR
icons and images\.  See the \fIINSTALL\.fvwm\fR
file for more information\.
.PP
The related \fBSHAPE\fR
compile\-time option can make fvwm display spiffy shaped icons\.
.SS SVG rendering options
.PP
SVG images are generated from (XML) text files\.  A really simple SVG file
might look something like this:
.sp
.RS 4
.nf
<svg width="120" height="80">
	<rect fill="red"     width="40" height="40"  x="0"   y="0"  />
	<rect fill="lime"    width="40" height="40"  x="40"  y="0"  />
	<rect fill="blue"    width="40" height="40"  x="80"  y="0"  />
	<rect fill="cyan"    width="40" height="40"  x="0"   y="40" />
	<rect fill="magenta" width="40" height="40"  x="40"  y="40" />
	<rect fill="yellow"  width="40" height="40"  x="80"  y="40" />
</svg>
.fi
.RE
.PP
By default, SVG images are rendered as the image creator intended
them to\.  But since SVG is a vector graphics format, the images can
be rendered at any choosen size and rotation, e\.g\. making it possible
to use the same icon file rendered at diffrent sizes for the
\fIIcon\fR and \fIMiniIcon\fR
styles\.
.PP
The rendering options are specified as a string appended to the SVG
filename as follows:
.HP 1
\fI\fIimage\.svg\fR\fR:[!] [(1)\ \fIsize\fR] [(2)\ \fIposition\fR]\ [(3)\ \fIrotation\fR]\ [(4)\ \fIscale\fR] ...
.HP 4
(1) [\-]\fIwidth\fR{x}[\-]\fIheight\fR
.sp -1n
.HP 4
(2) {\- | +}\fIxpos\fR{\- | +}\fIypos\fR
.sp -1n
.HP 4
(3) @[\-]\fIangle\fR
.sp -1n
.HP 4
(4) {* | /}[\-]\fIfactor\fR[x | y]
.PP
The option string always starts with a colon (':')
to separate it from the filename\.  An empty option string can skip this
colon, but it might still be a good idea to include it to prevent
ambiguity if the filename contains any colon\.
.sp
.RS 4
.nf
filename_without_colon\.svg
filename:with:colon\.svg:
.fi
.RE
.PP
An exclamation point ('!') transposes the entire final
image (including the rendering area), i\.e\. all the horizontal and all the
vertical coordinates are swapped with each other\.
.sp
.RS 4
.nf
image\.svg:!
.fi
.RE
.PP
\fIwidth\fR and \fIheight\fR
specifies the dimensions of the rendering area in pixels, i\.e\. the
dimensions of the resulting image\.  The actual image is fitted to fill
the entire rendering area\.
.sp
.RS 4
.nf
image\.svg:60x60
.fi
.RE
.PP
Use a \fIwidth\fR or \fIheight\fR
value of 0 to keep the aspect ratio\.
.sp
.RS 4
.nf
image\.svg:0x60
image\.svg:60x0
.fi
.RE
.PP
A '\-' before \fIwidth\fR
mirrors the rendering area horizontally\.
.sp
.RS 4
.nf
image\.svg:\-0x0
.fi
.RE
.PP
A '\-' before \fIheight\fR
mirrors the rendering area vertically\.
.sp
.RS 4
.nf
image\.svg:0x\-0
.fi
.RE
.PP
\fIxpos\fR and \fIypos\fR
specifies a translation of the image in pixels\.  A positive
\fIxpos\fR value moves the image to the right\.  A
positive \fIypos\fR value moves it down\.  Moving
it partially outside of the rendering area results in a cropped
image\.
.sp
.RS 4
.nf
image\.svg:\-30\-0
image\.svg:\-0+10
image\.svg:\-30+10
.fi
.RE
.PP
\fIangle\fR specifies a rotation around the actual
image center in degrees\.  This might result in a cropped image\.  A
positive value rotates the image clockwise\.  Floating point values are
recognized\.
.sp
.RS 4
.nf
image\.svg:@180
image\.svg:@\-90
image\.svg:@30
image\.svg:@57\.3
.fi
.RE
.PP
\fIfactor\fR specifes a scaling of the actual
image (not the rendering area)\.  Scaling it up results in a cropped
image\.  Floting point values are recognized\.  Division by zero is
ignored\.  If \fIfactor\fR is directly followed
by a 'x' or a 'y', the scaling
is horizontal or vertical respectively\.  Otherwise the scaling is
uniform\.
.sp
.RS 4
.nf
image\.svg:*2
image\.svg:/2
image\.svg:/3x
image\.svg:/2y
.fi
.RE
.PP
Scaling down a translated or rotated image can prevent cropping\.
.sp
.RS 4
.nf
image\.svg:@30*0\.6
.fi
.RE
.PP
Repeated usage of translation, rotation, and scaling is allowed\.
Translation and rotation are additive\.  Scaling is multiplicative\.
.sp
.RS 4
.nf
image\.svg:*2/3
image\.svg:/3x/2y
.fi
.RE
.PP
When combining affine transformations, the scaling is always done first,
then the rotation, and finally the translation\.
.sp
.RS 4
.nf
image\.svg:\-30+10@30/3x/2y
.fi
.RE
.PP
Use a negative scale \fIfactor\fR to mirror the
actual image\.
.sp
.RS 4
.nf
image\.svg:\-30+10@30/\-3x/2y
.fi
.RE
.PP
Mirroring of the rendering area is done after any scaling, rotation or
translation of the image\.
.sp
.RS 4
.nf
image\.svg:\-0x0\-30+10@30/3x/2y
.fi
.RE
.PP
Transposing is done last of all, after everything else\.
.sp
.RS 4
.nf
image\.svg:!\-0x0\-30+10@30/3x/2y
.fi
.RE
.SH MODULES
.PP
A module is a separate program which runs as a separate Unix
process but transmits commands to fvwm to execute\.  Users can
write their own modules to do any weird or bizarre manipulations
without bloating or affecting the integrity of fvwm itself\.
.PP
Modules must be spawned by fvwm so that it can set up two pipes
for fvwm and the module to communicate with\.  The pipes are
already open for the module when it starts and the file
descriptors for the pipes are provided as command line arguments\.
.PP
Modules can be spawned by fvwm at any time during the X session by
use of the
\fBModule\fR
command\.  Modules can exist for the duration of the X
session, or can perform a single task and exit\.  If the module is
still active when fvwm is told to quit, then fvwm closes the
communication pipes and waits to receive a SIGCHLD from the
module, indicating that it has detected the pipe closure and has
exited\.  If modules fail to detect the pipe closure fvwm exits
after approximately 30 seconds anyway\.  The number of
simultaneously executing modules is limited by the operating
system's maximum number of simultaneously open files, usually
between 60 and 256\.
.PP
Modules simply transmit commands to the fvwm command
engine\.  Commands are formatted just as in the case of a
mouse binding in the
\fIconfig\fR
setup file\.  Certain auxiliary information is also transmitted, as
in the sample module
\fBFvwmButtons\fR\.
.PP
Please refer to the
\fBModule Commands\fR
section for details\.
.SH ICCCM COMPLIANCE
.PP
Fvwm attempts to be
ICCCM
2\.0 compliant\.  Check
\fIhttp://tronche\.com/gui/x/icccm/\fR for more info\.  In addition,
ICCCM
states that it should be possible for applications to receive any
keystroke, which is not consistent with the keyboard shortcut
approach used in fvwm and most other window managers\.  In
particular you cannot have the same keyboard shortcuts working
with your fvwm and another fvwm running within Xnest (a nested X
server running in a window)\.  The same problem exists with mouse
bindings\.
.PP
The
ICCCM
states that windows possessing the property
.sp
.RS 4
.nf
WM_HINTS(WM_HINTS):
    Client accepts input or input focus: False
.fi
.RE
.PP
should not be given the keyboard input focus by the window
manager\.  These windows can take the input focus by themselves,
however\.  A number of applications set this property, and yet
expect the window manager to give them the keyboard focus anyway,
so fvwm provides a window style,
\fILenience\fR, 
which allows fvwm to overlook this
ICCCM
rule\.  Even with this window style it is not guaranteed that the
application accepts focus\.
.PP
The differences between
ICCCM
1\.1 and 2\.0 include the ability to take over from a running
ICCCM
2\.0 compliant window manager; thus
.sp
.RS 4
.nf
fvwm; vi ~/\.fvwm/config; fvwm \-replace
.fi
.RE
.PP
.PP
resembles the
\fBRestart\fR
command\.  It is not exactly the same, since killing the previously
running wm may terminate your X session, if the wm was started as
the last client in your
\fI\.Xclients\fR or \fI\.Xsession\fR
file\.
.PP
Further additions are support for client\-side colormap
installation (see the
ICCCM
for details) and the urgency hint\.  Clients can set this hint in
the WM_HINTS property of their window and expect the window manager
to attract the user's attention to the window\.  Fvwm has two re\-definable
functions for this purpose, "UrgencyFunc" and "UrgencyDoneFunc", which
are executed when the flag is set/cleared\.  Their default definitions are:
.sp
.RS 4
.nf
\fBAddToFunc\fR UrgencyFunc
 + I \fBIconify\fR off
 + I \fBFlipFocus\fR
 + I \fBRaise\fR
 + I \fBWarpToWindow\fR 5p 5p
\fBAddToFunc\fR UrgencyDoneFunc
 + I \fBNop\fR
.fi
.RE
.SH GNOME COMPLIANCE
.PP
Fvwm attempts to be GNOME (version 1) compliant\.
Check \fIhttp://www\.gnome\.org\fR
for what that may mean\.  To disable GNOME hints for some
or all windows, the
\fIGNOMEIgnoreHints\fR
style can be used\.
.SH EXTENDED WINDOW MANAGER HINTS
.PP
Fvwm attempts to respect the extended window manager hints (ewmh
or EWMH for short) specification:
\fIhttp://www\.freedesktop\.org/wiki/Standards_2fwm_2dspec\fR
and some extensions of this specification\.  This allows fvwm to
work with
KDE
version >= 2,
GNOME
version 2 and other applications which respect this specification
(any application based on
\fIGTK+\fR
version 2)\.  Applications which respect this specification are
called ewmh compliant applications\.
.PP
This support is configurable with styles and commands\.
These styles and commands have
EWMH
as the prefix (so you can find them easily in this man page)\.
.PP
There is a new Context 'D' for the
\fBKey\fR,
\fBPointerKey\fR,
\fBMouse\fR and
\fBStroke\fR
commands\.  This context is for desktop applications (such as
kdesktop and Nautilus desktop)\.
.PP
When a compliant taskbar asks fvwm to activate a window (typically
when you click on a button which represents a window in such a
taskbar), then fvwm calls the complex function
\fBEWMHActivateWindowFunc\fR
which by default is Iconify Off, Focus and Raise\.  You can redefine
this function\.  For example:
.sp
.RS 4
.nf
\fBDestroyFunc\fR EWMHActivateWindowFunc
\fBAddToFunc\fR EWMHActivateWindowFunc I \fBIconify\fR Off
+ I \fBFocus\fR
+ I \fBRaise\fR
+ I \fBWarpToWindow\fR 50 50
.fi
.RE
.PP
additionally warps the pointer to the center of the window\.
.PP
The
EWMH
specification introduces the notion of Working Area\.  Without ewmh
support the Working Area is the full visible screen (or all your
screens if you have a multi head setup and you use Xinerama)\.
However, compliant applications (such as a panel) can ask to
reserve space at the edge of the screen\.  If this is the case, the
Working Area is your full visible screen minus these reserved
spaces\.  If a panel can be hidden by clicking on a button the
Working Area does not change (as you can unhide the panel at any
time), but the Dynamic Working Area is updated: the space reserved
by the panel is removed (and added again if you pop up the
panel)\.  The Dynamic Working Area may be used when fvwm places or
maximizes a window\.  To know if an application reserves space you
can type "xprop | grep _NET_WM_STRUT" in a terminal and select the
application\.  If four numbers appear then these numbers define the
reserved space as explained in the
\fBEwmhBaseStruts\fR
command\.
.SH MWM COMPATIBILITY
.PP
Fvwm provides options to emulate Motif Window Manager (Mwm) as
well as possible\.  Please refer to the
\fBEmulate\fR
command as well as to the Mwm specific options of the
\fBStyle\fR and
\fBMenuStyle\fR
commands for details\.
.SH OPEN LOOK AND XVIEW COMPATIBILITY
.PP
Fvwm supports all the Open Look decoration hints (except
pushpins)\.  Should you use any such application, please add the
following line to your config:
.sp
.RS 4
.nf
\fBStyle\fR * \fIOLDecor\fR
.fi
.RE
.PP
Most (perhaps all) Open Look applications have a strange notion of
keyboard focus handling\.  Although a lot of work went into fvwm to
work well with these, you may still encounter problems\.  It is
recommended to use the \fINeverFocus\fR
focus policy and the \fILenience\fR
style for all such applications (the windows still get the
focus):
.sp
.RS 4
.nf
\fBStyle\fR <application name> \fINeverFocus\fR, \fILenience\fR
.fi
.RE
.PP
But in case you can not live with that focus policy, you can try
using one of the other focus policies in combination with the
\fILenience\fR style:
.sp
.RS 4
.nf
\fBStyle\fR <application name> \fIMouseFocus\fR, \fILenience\fR
\fBStyle\fR <application name> \fISloppyFocus\fR, \fILenience\fR
\fBStyle\fR <application name> \fIClickToFocus\fR, \fILenience\fR
.fi
.RE
.SH M4 PREPROCESSING
.PP
M4 pre\-processing is handled by a module in fvwm\.  To get more
details, try man
\fBFvwmM4\fR\.
In short, if you want fvwm to parse your files with m4, then
replace the command
\fBRead\fR
with
\fBFvwmM4\fR
in your
\fI~/\.fvwm/config\fR
file (if it appears at all), and start fvwm with the command
.sp
.RS 4
.nf
fvwm \-cmd "\fBFvwmM4\fR config"
.fi
.RE
.PP
.SH CPP PREPROCESSING
.PP
Cpp is the C\-language pre\-processor\.  fvwm offers cpp processing
which mirrors the m4 pre\-processing\.  To find out about it,
re\-read the
\fBM4\fR
section, but replace "m4" with "cpp"\.
.SH CONFIGURATION
.SS Configuration Files
.PP
The configuration file is used to describe mouse and button
bindings, colors, the virtual display size, and related items\.
The initialization configuration file is typically called
\fIconfig\fR (or \fI\.fvwm2rc\fR)\.
By using the
\fBRead\fR
command, it is easy to read in new configuration files as you go\.
.PP
Lines beginning with '#' are ignored by fvwm\.  Lines starting with '*'
are expected to contain module configuration commands (rather
than configuration commands for fvwm itself)\.  Like in shell
scripts embedded newlines in a configuration file line can be
quoted by preceding them with a backslash\.  All lines linked in
this fashion are treated as a single line\.  The newline itself is
ignored\.
.PP
Fvwm makes no distinction between configuration commands and
action commands, so anything mentioned in the fvwm commands
section can be placed on a line by itself for fvwm to execute as
it reads the configuration file, or it can be placed as an
executable command in a menu or bound to a mouse button or a
keyboard key\.  It is left as an exercise for the user to decide
which function make sense for initialization and which ones make
sense for run\-time\.
.SS Supplied Configuration
.PP
A sample configuration file,
\fIsystem\.fvwm2rc\fR,
is supplied with the fvwm distribution\.  It is well commented and
can be used as a source of examples for fvwm configuration\.
It may be copied to \fI/usr/local/share/fvwm/config\fR file\.
.PP
Alternatively, the built\-in menu (accessible when no
configuration file is found) has options to create an initial
config file for the user\.
.PP
If you are new to fvwm, try
\fIfvwm\-themes\fR\&[]
package demonstrating the powerful fvwm functionality\.
.SH FONTS
.SS Font names and font loading
.PP
The fonts used for the text of a window title, icon titles, menus
and geometry window can be specified by using the Font and
IconFont \fBStyle\fR, the Font \fBMenuStyle\fR and the \fBDefaultFont\fR
commands\.  Also, all the Modules which use text have configuration
command(s) to specify font(s)\.  All these styles and commands take
a font name as an argument\.  This section explains what is a font
name for fvwm and which fonts fvwm loads\.
.PP
First, you can use what we can call a usual font name, for
example,
.sp
.RS 4
.nf
\-adobe\-courier\-bold\-r\-normal\-\-10\-100\-75\-75\-m\-60\-ISO8859\-1
\-adobe\-courier\-bold\-r\-normal\-\-10\-*
\-*\-fixed\-medium\-o\-normal\-\-14\-*\-ISO8859\-15
.fi
.RE
.PP
That is, you can use an X Logical Font Description (XLFD for
short)\.  Then the "first" font which matches the description is
loaded and used\.  This "first" font depends of your font path and
also of your locale\.  Fonts which match the locale charset are
loaded in priority order\.  For example with
.sp
.RS 4
.nf
\-adobe\-courier\-bold\-r\-normal\-\-10\-*
.fi
.RE
.PP
if the locale charset is ISO8859\-1, then fvwm tries to load a
font which matches
.sp
.RS 4
.nf
\-adobe\-courier\-bold\-r\-normal\-\-10\-*\-ISO8859\-1
.fi
.RE
.PP
with the locale charset ISO8859\-15 fvwm tries to load
.sp
.RS 4
.nf
\-adobe\-courier\-bold\-r\-normal\-\-10\-*\-ISO8859\-15\.
.fi
.RE
.PP
A font name can be given as an extended XLFD\.  This
is a comma separated list of (simple) XLFD font names, for example:
.sp
.RS 4
.nf
\-adobe\-courier\-bold\-r\-normal\-\-14\-*,\-*\-courier\-medium\-r\-normal\-\-14\-*
.fi
.RE
.PP
Each simple font name is tried until a matching font with the
locale charset is found and if this fails each simple font name is
tried without constraint on the charset\.
.PP
More details on the XLFD can be found in the X manual page, the X
Logical Font Description Conventions document (called xlfd) and
the XLoadFont and XCreateFontSet manual pages\.  Some useful font
utilities are: xlsfonts, xfontsel, xfd and xset\.
.PP
If you have Xft support you can specify an Xft font name
(description) of a true type (or Type1) font prefixed by "xft:",
for example:
.sp
.RS 4
.nf
"xft:Luxi Mono"
"xft:Luxi Mono:Medium:Roman:size=14:encoding=iso8859\-1"
.fi
.RE
.PP
The "first" font which matches the description is loaded\.  This
first font depends on the XftConfig configuration file with Xft1
and on the /etc/fonts/fonts\.conf file with Xft2\.
One may read the Xft manual page and the fontconfig man page with
Xft2\.  The first string which follows "xft:" is always considered
as the family\.  With the second example Luxi Mono is the Family
(Other XFree TTF families: "Luxi Serif", "Luxi Sans"), Medium is
the Weight (other possible weights: Light, DemiBold, Bold, Black),
Roman is the slant or the style (other possibilities: Regular,
Oblique, Italic) size specifies the point size (for a pixel size
use pixelsize=), encoding allows for enforce a charset (iso8859\-1
or iso10646\-1 only; if no encoding is given the locale charset is
assumed)\.
An important parameter is "minspace=bool" where bool is True or
False\.  If bool is False (the default?) Xft gives a greater font
height to fvwm than if bool is True\.  This may modify text
placement, icon and window title height, line spacing in menus and
\fBFvwmIdent\fR, button height in some fvwm modules \.\.\.etc\.  With a LCD
monitor you may try to add "rgba=mode" where mode is either rgb,
bgr, vrgb or vbgr to enable subpixel rendering\.  The best mode
depends on the way your LCD cells are arranged\.  You can pass other
specifications in between ":", as "foundry=foundry_name",
"spacing=type" where type can be monospace, proportional or
charcell, "charwidth=integer", "charheight=integer" or
"antialias=bool" where bool is True or False\.  It seems that these
parameters are not always taken in account\.
.PP
To determine which Xft fonts are really loaded you can export
XFT_DEBUG=1 before starting fvwm and take a look to the error
log\.  With Xft2 you may use fc\-list to list the available
fonts\.  Anyway, Xft support is experimental (from the X and the
fvwm point of view) and the quality of the rendering depends on
number of parameters (the XFree and the freetype versions and your
video card(s))\.
.PP
After an Xft font name you can add after a ";" an XLFD
font name (simple or extended) as:
.sp
.RS 4
.nf
xft:Verdana:pixelsize=14;\-adobe\-courier\-bold\-r\-normal\-\-14\-*
.fi
.RE
.PP
then, if either loading the Xft font fails or fvwm has no Xft
support, fvwm loads the font
"\-adobe\-courier\-bold\-r\-normal\-\-14\-*"\.  This allows for writing
portable configuration files\.
.SS Font and string encoding
.PP
Once a font is loaded, fvwm finds its encoding (or charset) using
its name (the last two fields of the name)\.  fvwm assumes that the
strings which are displayed with this font use this encoding (an
exception is that if an iso10646\-1 font is loaded, then UTF\-8 is
assumed for string encoding)\.
In a normal situation,
(i) a font is loaded by giving a font name without specifying the
encoding,
(ii) the encoding of the loaded font is the locale encoding, and
then
(iii) the strings in the fvwm configuration files should use the
locale encoding as well as the window and icon name\.  With Xft the
situation is bit different as Xft supports only iso10646\-1 and
iso8859\-1\.  If you do not specify one of these encodings in the Xft
font name, then fvwm does strings conversion using (iii)\.  Note
that with multibyte fonts (and in particular with "CJK" fonts) for
good text rendering, the locale encoding should be the charset of
the font\.
.PP
To override the previous rules, it is possible to specify the
string encoding in the beginning of a font description as follow:
.sp
.RS 4
.nf
StringEncoding=\fIenc\fR:_full_font_name_
.fi
.RE
.PP
where
\fIenc\fR
is an encoding supported by fvwm (usually font name charset plus some
unicode encodings: UTF\-8, USC\-2, USC\-4 and UTF\-16)\.
.PP
For example, you may use an iso8859\-1 locale charset and have an
\fBFvwmForm\fR in Russian using koi8\-r encoding\.  In this case, you just
have to ask \fBFvwmForm\fR to load a koi8\-r font by specifying the
encoding in the font name\.  With a multibyte language, (as
multibyte font works well only if the locale encoding is the
charset of the font), you should use an iso10646\-1 font:
.sp
.RS 4
.nf
StringEncoding=jisx0208\.1983\-0:\-*\-fixed\-medium\-r\-*\-ja\-*\-iso10646\-1
.fi
.RE
.PP
or
.sp
.RS 4
.nf
"StringEncoding=jisx0208\.1983\-0:xft:Bitstream Cyberbit"
.fi
.RE
.PP
if your
\fBFvwmForm\fR
configuration uses jisx0208\.1983\-0 encoding\.  Another possibility
is to use UTF\-8 encoding for your \fBFvwmForm\fR configuration and use
an iso10646\-1 font:
.sp
.RS 4
.nf
\-*\-fixed\-medium\-r\-*\-ja\-*\-iso10646\-1
.fi
.RE
.PP
or
.sp
.RS 4
.nf
"StringEncoding=UTF\-8:xft:Bitstream Cyberbit"
.fi
.RE
.PP
or equivalently
.sp
.RS 4
.nf
"xft:Bitstream Cyberbit:encoding=iso10646\-1"
.fi
.RE
.PP
In general iso10646\-1 fonts together with UTF\-8 string encoding
allows the display of any characters in a given menu, \fBFvwmForm\fR
etc\.
.PP
More and more, unicode is used and text files use UTF\-8
encoding\.  However, in practice the characters used range over your
locale charset (this is the case when you generate a menu with
fvwm\-menu\-desktop with recent versions of KDE and
GNOME)\.  For
saving memory (an iso10646\-1 font may have a very large number of
characters) or because you have a pretty font without an
iso10646\-1 charset, you can specify the string encoding to be
UTF\-8 and use a font in the locale charset:
.sp
.RS 4
.nf
StringEncoding=UTF\-8:\-*\-pretty_font\-*\-12\-*
.fi
.RE
.PP
In most cases, fvwm correctly determines the encoding of the
font\.  However, some fonts do not end with valid encoding
names\.  When the font name isn't normal, for example:
.sp
.RS 4
.nf
\-misc\-fixed\-*\-\-20\-*\-my_utf8\-36
.fi
.RE
.PP
you need to add the encoding after the font name using a slash as
a delimiter\.  For example:
.sp
.RS 4
.nf
\fBMenuStyle\fR * \fIFont\fR \-misc\-fixed\-*\-\-20\-*\-my_utf8\-36/iso10646\-1
.fi
.RE
.PP
If fvwm finds an encoding, fvwm uses the iconv system functions to
do conversion between encodings\.  Unfortunately, there are no
standards\.  For conversion between iso8859\-1 and UTF\-8: a GNU
system uses "ISO\-8859\-1" and other systems use "iso881" to define
the converters (these two names are supported by fvwm)\.  Moreover,
in some cases it may be necessary to use machine specific
converters\.  So, if you experience problems you can try to get
information on your iconv implementation ("man iconv" may help)
and put the name which defines the converter between the font
encoding and UTF\-8 at the end of the font name after the encoding
hint and a / (another possible solution is to use GNU
libiconv)\.  For example use:
.sp
.RS 4
.nf
\fBStyle\fR * \fIFont\fR \-misc\-fixed\-*\-\-14\-*\-iso8859\-1/*/latin1
.fi
.RE
.PP
to use latin1 for defining the converter for the iso8859\-1 encoding\.
The "*" in between the "/" says to fvwm to determine the
encoding from the end of the font name\.  Use:
.sp
.RS 4
.nf
\fBStyle\fR * \fIFont\fR \e
	\-misc\-fixed\-*\-\-14\-*\-local8859\-6/iso8859\-6/local_iso8859_6_iconv
.fi
.RE
.PP
to force fvwm to use the font with iso8859\-6 as the encoding
(this is useful for bi\-directionality)
and to use local_iso8859_6_iconv for defining the converters\.
.SS Font Shadow Effects
.PP
Fonts can be given 3d effects\.  At the beginning of the font name
(or just after a possible StringEncoding specification) add
.sp
.RS 4
.nf
Shadow=\fIsize\fR [\fIoffset\fR] [\fIdirections]\fR]:
.fi
.RE
.PP
\fIsize\fR
is a positive integer which specifies the number of pixels of shadow\.
\fIoffset\fR
is an optional positive integer which defines the number of pixels
to offset the shadow from the edge of the character\.  The default
offset is zero\.
\fIdirections\fR
is an optional set of directions the shadow emanates from the
character\.  The
\fIdirections\fR
are a space separated list of fvwm directions:
.PP
\fIN\fR, \fINorth\fR, \fITop\fR, \fIt\fR, \fIUp\fR, \fIu\fR, \fI\-\fR
.PP
\fIE\fR, \fIEast\fR, \fIRight\fR, \fIr\fR, \fIRight\fR, \fIr\fR, \fI]\fR
.PP
\fIS\fR, \fISouth\fR, \fIBottom\fR, \fIb\fR, \fIDown\fR, \fId\fR, \fI_\fR
.PP
\fIW\fR, \fIWest\fR, \fILeft\fR, \fIl\fR, \fILeft\fR, \fIl\fR, \fI[\fR
.PP
\fINE\fR, \fINorthEast\fR, \fITopRight\fR, \fItr\fR, \fIUpRight\fR, \fIur\fR, \fI^\fR
.PP
\fISE\fR, \fISouthEast\fR, \fIBottomRight\fR, \fIbr\fR, \fIDownRight\fR, \fIdr\fR, \fI>\fR
.PP
\fISW\fR, \fISouthWest\fR, \fIBottomLeft\fR, \fIbl\fR, \fIDownLeft\fR, \fIdl\fR, \fIv\fR
.PP
\fINW\fR, \fINorthWest\fR, \fITopLeft\fR, \fItl\fR, \fIUpLeft\fR, \fIul\fR, \fI<\fR
.PP
\fIC\fR, \fICenter\fR, \fICentre\fR, \fI\.\fR
.PP
A shadow is displayed in each given direction\.
\fIAll\fR
is equivalent to all the directions\.  The default
\fIdirection\fR
is
\fIBottomRight\fR\.
With the
\fICenter\fR
direction, the shadow surrounds the whole string\.  Since this is a
super set of all other directions, it is a waste of time to
specify this along with any other directions\.
.PP
The shadow effect only works with colorsets\.  The color of the
shadow is defined by using the
\fIfgsh\fR
option of the
\fBColorset\fR
command\.  Please refer to the
\fBColorsets\fR
section for details about colorsets\.
.PP
Note: It can be difficult to find the font,
\fIfg\fR, \fIfgsh\fR and \fIbg\fR
colors to make this effect look good, but it can look quite good\.
.SH BI\-DIRECTIONAL TEXT
.PP
Arabic and Hebrew text require bi\-directional text support to be
displayed correctly, this means that logical strings should be
converted before their visual presentation, so left\-to\-right and
right\-to\-left sub\-strings are determined and reshuffled\.
In fvwm this is done automatically in window titles, menus,
module labels and other places if the fonts used for displaying the
text are of one of the charsets that require
\fIbidi\fR
(bi\-directional) support\.  For example, this includes iso8859\-6,
iso8859\-8 and iso10646\-1 (unicode), but not other iso8859\-* fonts\.
.PP
This bi\-directional text support is done using the
\fIfribidi\fR
library compile time option, see
\fIINSTALL\.fvwm\fR\.
.SH KEYBOARD SHORTCUTS
.PP
Almost all window manager operations can be performed from the
keyboard so mouse\-less operation should be possible\.  In addition
to scrolling around the virtual desktop by binding the
\fBScroll\fR
command to appropriate keys,
\fBPopup\fR,
\fBMove\fR,
\fBResize\fR, 
and any other command can be bound to keys\.  Once a command
is started the pointer is moved by using the up, down,
left, and right arrows, and the action is terminated by pressing
return\.  Holding down the
.SM Shift
key causes the pointer movement to go in larger steps and holding
down the
.SM control
key causes the pointer movement to go in smaller steps\.  Standard
emacs and vi cursor movement controls (
.SM n
,
.SM p
,
.SM f
,
.SM b
,
and
.SM j
,
.SM k
,
.SM h
,
.SM l
) can be used instead of the arrow keys\.
.SH SESSION MANAGEMENT
.PP
Fvwm supports session management according to the X Session
Management Protocol\.  It saves and restores window position, size,
stacking order, desk, stickiness, shadiness, maximizedness,
iconifiedness for all windows\.  Furthermore, some global state is
saved\.
.PP
Fvwm doesn't save any information regarding styles, decors,
functions or menus\.  If you change any of these resources during a
session (e\.g\. by issuing
\fBStyle\fR
commands or by using various modules), these changes are lost
after saving and restarting the session\.  To become permanent,
such changes have to be added to the configuration file\.
.PP
Note further that the current implementation has the following
anomaly when used on a multi\-screen display: Starting fvwm for the
first time, fvwm manages all screens by forking a copy of itself
for each screen\.  Every copy knows its parent and issuing a
\fBQuit\fR
command to any instance of fvwm kills the master and thus all
copies of fvwm\.  When you save and restart the session, the
session manager brings up a copy of fvwm on each screen, but this
time they are started as individual instances managing one screen
only\.  Thus a
\fBQuit\fR
kills only the copy it was sent to\.  This is probably not a very
serious problem, since with session management, you are supposed
to quit a session through the session manager anyway\.  If it is
really needed,
.sp
.RS 4
.nf
\fBExec\fR exec killall fvwm
.fi
.RE
.PP
still kills all copies of fvwm\.  Your system must have the
\fBkillall\fR
command though\.
.SH BOOLEAN ARGUMENTS
.PP
A number of commands take one or several boolean arguments\.  These take a few equivalent inputs: "yes", "on", "true", "t" and "y" all evaluate to true while "no", "off", "false", "f" and "n" evaluate to false\.  Some commands allow "toggle" too which means that the feature is disabled if it is currently enabled and vice versa\.
.SH BUILTIN KEY AND MOUSE BINDINGS
.PP
The following commands are built\-in to fvwm:
.sp
.RS 4
.nf
\fBKey\fR Help R A \fBPopup\fR MenuFvwmRoot
\fBKey\fR F1 R A \fBPopup\fR MenuFvwmRoot
\fBKey\fR Tab A M \fBWindowList\fR Root c c NoDeskSort
\fBKey\fR Escape A MC \fBEscapeFunc\fR
\fBMouse\fR 1 R A \fBMenu\fR MenuFvwmRoot
\fBMouse\fR 1 T   A FuncFvwmRaiseLowerX \fBMove\fR
\fBMouse\fR 1 FS  A FuncFvwmRaiseLowerX \fBResize\fR
\fBMouse\fR 2 FST A FuncFvwmRaiseLowerX \fBMove\fR
\fBAddToFunc\fR FuncFvwmRaiseLowerX
+ I \fBRaise\fR
+ M $0
+ D \fBLower\fR
.fi
.RE
.PP
The
.SM Help
and
.SM F1
keys invoke a built\-in menu that fvwm creates\.  This is primarily
for new users that have not created their own configuration
file\.  Either key on the root (background) window pops up an menu
to help you get started\.
.PP
The
.SM Tab
key pressed anywhere with the
.SM Meta
key (same as the
.SM Alt
key on PC keyboards) held down pop\-ups a window list\.
.PP
Mouse button 1 on the title\-bar or side frame can move, raise or
lower a window\.
.PP
Mouse button 1 on the window corners can resize, raise or lower a
window\.
.PP
You can override or remove these bindings\.  To remove the window
list binding, use this:
.sp
.RS 4
.nf
\fBKey\fR Tab A M \-
.fi
.RE
.SH COMMAND EXECUTION
.SS Module and Function Commands
.PP
If fvwm encounters a command that it doesn't recognize,
it checks to see if the
specified command should have been
.sp
.RS 4
.nf
\fBFunction\fR (rest of command)
.fi
.RE
.PP
or
.sp
.RS 4
.nf
\fBModule\fR (rest of command)
.fi
.RE
.PP
This allows complex functions or modules to be invoked in a manner
which is fairly transparent to the configuration file\.
.PP
Example: the
\fIconfig\fR
file contains the line
.sp
.RS 4
.nf
HelpMe
.fi
.RE
.PP
Fvwm looks for an fvwm command called "HelpMe", and fails\.
Next it looks for a user\-defined complex function called "HelpMe"\.
If no such function exists, fvwm tries to execute a
module called "HelpMe"\.
.SS Delayed Execution of Commands
.PP
Note: There are many commands that affect look and feel of
specific, some or all windows, like
\fBStyle\fR, \fBMouse\fR, \fBColorset\fR, \fBTitleStyle\fR
and many others\.  For performance reasons such changes are
not applied immediately but only when fvwm is idle, i\.e\. no user
interaction or module input is pending\.  Specifically, new
\fBStyle\fR
options that are set in a function are not applied until after the
function has completed\.  This can sometimes lead to unwanted
effects\.
.PP
To force that all pending changes are applied immediately, use the
\fBUpdateStyles\fR, \fBRefresh\fR or \fBRefreshWindow\fR
commands\.
.SH QUOTING
.PP
Quotes are required only when needed to make fvwm consider two or
more words to be a single argument\.  Unnecessary quoting is
allowed\.  If you want a quote character in your text, you must
escape it by using the backslash character\.  For example, if you
have a pop\-up menu called "Window\-Ops", then you do not need
quotes:
.sp
.RS 4
.nf
\fBPopup\fR Window\-Ops
.fi
.RE
.PP
but if you replace the dash with a space, then you need
quotes:
.sp
.RS 4
.nf
\fBPopup\fR "Window Ops"
.fi
.RE
.PP
The supported quoting characters are double quotes, single quotes
and reverse single quotes\.  All three kinds of quotes are treated
in the same way\.  Single characters can be quoted with a preceding
backslash\.  Quoting single characters works even inside other
kinds of quotes\.
.SH COMMAND EXPANSION
.PP
Whenever an fvwm command line is executed, fvwm performs parameter
expansion\.  A parameter is a '$' followed by a word enclosed in
brackets ($[\.\.\.]) or a single special character\.  If fvwm
encounters an unquoted parameter on the command line it expands it
to a string indicated by the parameter name\.  Unknown parameters
are left untouched\.  Parameter expansion is performed before
quoting\.  To get a literal '$' use "$$"\.
.PP
If a command is prefixed with a '\-' parameter expansion isn't
performed\.  This applies to the command immediately following the '\-',
in which the expansion normally would have taken place\.  When uesed
together with other prefix commands it must be added before the other
prefix\.
.PP
Example:
.sp
.RS 4
.nf
\fBPick\fR \-\fBExec\fR exec xmessage '$[w\.name]'
.fi
.RE
.PP
opens an xmessage dialog with "$[w\.name]" unexpanded\.
.PP
The longer variables may contain additional variables inside the
name, which are expanded before the outer variable\.
.PP
In earlier versions of fvwm, some single letter variables were
supported\.  It is deprecated now, since they cause a number of
problems\.  You should use the longer substitutes instead\.
.PP
Example:
.sp
.RS 4
.nf
# Print the current desk number, horizontal page number
# and the window's class (unexpanded here, no window)\.
\fBEcho\fR $[desk\.n] $[page\.nx] $[w\.class]
.fi
.RE
.PP
Note: If the command is called outside a window context, it
prints "$[w\.class]" instead of the class name\.  It is usually not
enough to have the pointer over a window to have a context window\.
To force using the window with the focus, the
\fBCurrent\fR
command can be used:
.sp
.RS 4
.nf
\fBCurrent\fR \fBEcho\fR $[desk\.n] $[page\.nx] $[w\.class]
.fi
.RE
.PP
The parameters known by fvwm are:
.PP
$$
.RS 4
A literal '$'\.
.RE
.PP
$\.
.RS 4
The absolute directory of the currently Read file\.  Intended for creating relative and relocatable configuration trees\.  If used outside of any read file, the returned value is '\.'\.
.RE
.PP
$0 to $9
.RS 4
The positional parameters given to a complex function (a function that has been defined with the
\fBAddToFunc\fR
command)\.  "$0" is replaced with the first parameter, "$1" with the second parameter and so on\.  If the corresponding parameter is undefined, the "$\.\.\." is deleted from the command line\.
.RE
.PP
$*
.RS 4
All positional parameters given to a complex function\.  This includes parameters that follow after "$9"\.
.RE
.PP
$[\fIn\fR]
.RS 4
The
\fIn\fR:th positional parameter given to a complex function, counting from 0\.  If the corresponding parameter is undefined, the "$[\fIn\fR]" is deleted from the command line\.  The parameter is expanded unquoted\.
.RE
.PP
$[\fIn\fR\-\fIm\fR]
.RS 4
The positional parameters given to a complex function, starting with parameter
\fIn\fR
and ending with parameter
\fIm\fR\.  If all the corresponding parameters are undefined, the "$[\.\.\.]" is deleted from the command line\.  If only some of the parameters are defined, all defined parameters are expanded, and the remaining silently ignored\.  All parameters are expanded unquoted\.
.RE
.PP
$[\fIn\fR\-]
.RS 4
All the positional parameters given to a complex function, starting with parameter
\fIn\fR\.  If all the corresponding parameters are undefined, the "$[\.\.\.]" is deleted from the command line\.  All parameters are expanded unquoted\.
.RE
.PP
$[*]
.RS 4
All the positional parameters given to a complex function\.  This is equivalent of $[0\-]\.
.RE
.PP
$[version\.num]
.RS 4
The version number, like "2\.6\.0"\.
.RE
.PP
$[version\.info]
.RS 4
The version info, like " (from cvs)", empty for the official releases\.
.RE
.PP
$[version\.line]
.RS 4
The first line printed by the \-\-version command line option\.
.RE
.PP
$[vp\.x] $[vp\.y] $[vp\.width] $[vp\.height]
.RS 4
Either coordinate or the width or height of the current viewport\.
.RE
.PP
$[desk\.n]
.RS 4
The current desk number\.
.RE
.PP
$[desk\.name<n>]
.RS 4
These parameters are replaced with the name of the desktop number <n> that is defined with the
\fBDesktopName\fR
command\.  If no name is defined, then the default name is returned\.
.RE
.PP
$[desk\.width] $[desk\.height]
.RS 4
The width or height of the whole desktop, i\.e\. the width or height multiplied by the number of pages in x or y direction\.
.RE
.PP
$[desk\.pagesx] $[desk\.pagesy]
.RS 4
The number of total pages in a desk in x or y direction\.  This is the same as the values set by
\fBDesktopSize\fR\.
.RE
.PP
$[page\.nx] $[page\.ny]
.RS 4
The current page numbers, by X and Y axes, starting from 0\.
\fIpage\fR
is equivalent to
\fIarea\fR
in the
GNOME
terminology\.
.RE
.PP
$[w\.id]
.RS 4
The window\-id (expressed in hex, e\.g\. 0x10023c) of the window the command was called for or "$[w\.id]" if no window is associated with the command\.
.RE
.PP
$[w\.name] $[w\.iconname] $[w\.class] $[w\.resource] $[w\.visiblename] $[w\.iconfile] $[w\.miniiconfile] $[w\.iconfile\.svgopts] $[w\.miniiconfile\.svgopts]
.RS 4
The window's name, icon name, resource class and resource name, visible name, file name of its icon or mini icon defined with the
\fIIcon\fR
or
\fIMiniIcon\fR
style (including the full path if the file was found on disk), and (if fvwm is compiled with
SVG
support) the icon or mini icon svg rendering options (including the leading colon), or unexpanded "$[w\.<attribute>]" string if no window is associated with the command\.
.sp
Note, the first 5 variables may include any kind of characters, so these variables are quoted\.  It means that the value is surrounded by single quote characters and any contained single quote is prefixed with a backslash\.  This guarantees that commands like:
.sp
.RS 4
.nf
\fBStyle\fR $[w\.resource] \fIIcon\fR norm/network\.png
.fi
.RE
.sp
work correctly, regardless of any special symbols the value may contain, like spaces and different kinds of quotes\.
.sp
In the case of the window's visible name, this is the value returned from the literal title of the window shown in the titlebar\.  Typically this will be the same as $[w\.name] once expanded, although in the case of using
\fIIndexedWindowName\fR
then this is more useful a distinction, and allows for referencing the specific window by its visible name for inclusion in things like
\fBStyle\fR
commands\.
.RE
.PP
$[w\.x] $[w\.y] $[w\.width] $[w\.height]
.RS 4
Either coordinate or the width or height of the current window if it is not iconified\.  If no window is associated with the command or the window is iconified, the string is left as is\.
.RE
.PP
$[w\.desk]
.RS 4
The number of the desk on which the window is shown\.  If the window is sticky the current desk number is used\.
.RE
.PP
$[w\.layer]
.RS 4
The layer of the window\.
.RE
.PP
$[cw\.x] $[cw\.y] $[cw\.width] $[cw\.height]
.RS 4
These work like $[w\.\.\.\.] but return the geometry of the client part of the window\.  In other words: the border and title of the window is not taken into account\.
.RE
.PP
$[i\.x], $[it\.x], $[ip\.x] $[i\.y], $[it\.y], $[ip\.y] $[i\.width], $[it\.width], $[ip\.width] $[i\.height], $[it\.height], $[ip\.height]
.RS 4
These work like $[w\.\.\.\.] but return the geometry of the icon ($[i\.\.\.\.]), the icon title ($[it\.\.\.\.]) or the icon picture ($[ip\.\.\.\.])\.
.RE
.PP
$[pointer\.x] $[pointer\.y]
.RS 4
These return the position of the pointer on the screen\.  If the pointer is not on the screen, these variables are not expanded\.
.RE
.PP
$[pointer\.wx] $[pointer\.wy]
.RS 4
These return the position of the pointer in the selected window\.  If the pointer is not on the screen, the window is iconified or no window is selected, these variables are not expanded\.
.RE
.PP
$[pointer\.cx] $[pointer\.cy]
.RS 4
These return the position of the pointer in the client portion of the selected window\.  If the pointer is not on the screen, the window is shaded or iconified or no window is selected, these variables are not expanded\.
.RE
.PP
$[screen]
.RS 4
The screen number fvwm is running on\.  Useful for setups with multiple screens\.
.RE
.PP
$[fg\.cs<n>] $[bg\.cs<n>] $[hilight\.cs<n>] $[shadow\.cs<n>]
.RS 4
These parameters are replaced with the name of the foreground (fg), background (bg), hilight (hilight) or shadow (shadow) color that is defined in colorset <n> (replace <n> with zero or a positive integer)\.  For example "$[fg\.cs3]" is expanded to the name of the foreground color of colorset 3 (in rgb:rrrr/gggg/bbbb form)\.  Please refer to the
\fBColorsets\fR
section for details about colorsets\.
.RE
.PP
$[schedule\.last]
.RS 4
This is replaced by the id of the last command that was scheduled with the
\fBSchedule\fR
command, even if this command was already executed\.
.RE
.PP
$[schedule\.next]
.RS 4
This is replaced by the id the next command used with
\fBSchedule\fR
will get (unless a different id is specified explicitly)\.
.RE
.PP
$[cond\.rc]
.RS 4
The return code of the last conditional command\.  This variable is only valid inside a function and can not be used in a conditional command\.  Please refer to the section
\fBConditional Commands\fR
in the command list\.
.RE
.PP
$[func\.context]
.RS 4
The context character of the running command as used in the
\fBMouse\fR,
\fBKey\fR
or
\fBPointerKey\fR
command\.  This is useful for example with:
.sp
.RS 4
.nf
\fBMouse\fR 3 FS N \fBWindowShade\fR $$[func\.context]
.fi
.RE
.sp
.RE
.PP
$[gt\.\fIstr\fR]
.RS 4
return the translation of
\fIstr\fR
by looking in the current locale catalogs\.  If no translation is found
\fIstr\fR
is returned as is\.  See the
\fBLocalePath\fR
command\.
.RE
.PP
$[\.\.\.]
.RS 4
If the string within the braces is neither of the above, fvwm tries to find an environment variable with this name and replaces its value if one is found (e\.g\. "$[PAGER]" could be replaced by "more")\.  Otherwise the string is left as is\.
.RE
.PP
Some examples can be found in the description of the
\fBAddToFunc\fR
command\.
.SH SCRIPTING & COMPLEX FUNCTIONS
.PP
To achieve the more complex effects, fvwm has a number of
commands that improve its scripting abilities\.  Scripts can be
read from a file with
\fBRead\fR,
from the output of a command with
\fBPipeRead\fR
or written as a complex function with the
\fBAddToFunc\fR
command\.  For the curious, section 7 of the fvwm FAQ shows some
real life applications of scripting\.  Please refer to the sections
\fBUser Functions and Shell Commands\fR
and
\fBConditional Commands\fR
for details\.  A word of warning: during execution of complex
functions, fvwm needs to take all input from the mouse pointer
(the pointer is "grabbed" in the slang of X)\.  No other programs
can receive any input from the pointer while a function is run\.
This can confuse some programs\.  For example, the xwd program
refuses to make screen shots when run from a complex function\.  To
achieve the same functionality you can use the
\fBRead\fR
or
\fBPipeRead\fR
command instead\.
.SH LIST OF FVWM COMMANDS
.PP
The command descriptions below are grouped together in the
following sections\.  The sections are hopefully sorted in order of
usefulness to the newcomer\.
.sp
.RS 4
\h'-04'\(bu\h'+03'\fBMenu commands\fR
.sp
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fBMiscellaneous commands\fR
.sp
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fBCommands affecting window movement and placement\fR
.sp
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fBCommands for focus and mouse movement\fR
.sp
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fBCommands controlling window state\fR
.sp
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fBCommands for mouse, key and stroke bindings\fR
.sp
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fBThe Style command (controlling window styles)\fR
.sp
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fBOther commands controlling window styles\fR
.sp
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fBCommands controlling the virtual desktop\fR
.sp
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fBCommands for user functions and shell commands\fR
.sp
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fBConditional commands\fR
.sp
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fBModule commands\fR
.sp
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fBQuit, restart and session management commands\fR
.sp
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fBColorsets\fR
.sp
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fBColor gradients\fR
.sp
.RE
.SS Menus
.PP
Before a menu can be opened, it has to be populated with menu
items using the
\fBAddToMenu\fR
command and bound to a key or mouse button with the
\fBKey\fR,
\fBPointerKey\fR or
\fBMouse\fR
command (there are many other ways to invoke a menu too)\.  This is
usually done in the configuration file\.
.PP
Fvwm menus are extremely configurable in look and feel\.  Even the
slightest nuances can be changed to the user's liking, including
the menu item fonts, the background, delays before popping up sub
menus, generating menus dynamically and many other features\.
Please refer to the
\fBMenuStyle\fR
command to learn more\.
.TP
.B Types of Menus
.RS
.\".PP
In fvwm there are four slightly different types of menus:
.PP
\fBPopup\fR menus
can appear everywhere on the screen on their own or attached to a
part of a window\.  The
\fBPopup\fR
command opens popup menus\.  If the popup menu was invoked with a
mouse button held down, it is closed when the button is released\.
The item under the pointer is then activated and the associated
action is executed\.
.PP
\fBMenu\fR
is a very similar command, but the menus it opens are slightly less
transient\.  When invoked by clicking a mouse button, it stays open
and can be navigated with no button held\.  But if it is invoked by
a button press followed by mouse motion, it behaves exactly like a
popup menu\.
.PP
\fITear off menus\fR or \fIPin up menus\fR
are menus from either of the above two commands that have been
"torn off" their original context and pinned on the desktop like a
normal window\.  They are created from other menus by certain key
presses or mouse sequences or with the
\fBTearMenuOff\fR
command from inside a menu\.
.PP
\fISub menus\fR
are menus inside menus\.  When a menu item that has the
\fBPopup\fR
command as its action is selected, the named menu is opened as an
inferior menu to the parent\.  Any type of menu can have sub menus\.
.RE
.TP
.B Menu Anatomy
.RS
.\".PP
Menus consist of any number of titles which are inactive menu
items that usually appear at the top of the menu, normal items
triggering various actions when selected, separator lines between
the items, tear off bars (a horizontal broken line) that tear off
the menu when selected, and sub menu items indicated with a
triangle pointing left or right, depending on the direction in
which the sub menu appears\.  All the above menu items are
optional\.
.PP
Additionally, if the menu is too long to fit on the screen, the
excess menu items are put in a continuation menu and a sub menu
with the string "More\.\.\." is placed at the bottom of the menu\.  The
"More\.\.\." string honors the locale settings\.
.PP
Finally, there may be a picture running up either side of the menu
(a "side bar")\.
.RE
.TP
.B Menu Navigation
.RS
.\".PP
Menus can be navigated either with the keyboard or with the
mouse\.  Many people prefer to use the mouse, but it can be rather
tedious\.  Once you get the hang of it, keyboard navigation can be
much faster\.  While fvwm displays a menu, it can do nothing else\.
For example, new windows do not appear before the menu is closed\.
However, this is not exactly true for tear off menus\.  See the
\fBTear Off Menus\fR
section for details\.
.RE
.TP
.B Mouse Navigation
.RS
.\".PP
Moving the pointer over a menu selects the item below it\.
Normally this is indicated by a 3d border around the item, but not
all parts of a menu can be selected\.  Pressing any mouse button
while a menu is open by default activates the item below it\.  Items of a
popup menu are also activated by releasing a held mouse button\.
In case of an item that hides a sub menu, the sub menu is
displayed if the pointer hovers over the item long enough or moves
close to the triangle indicating the sub menu\.  This behaviour can
be tuned with menu styles\.
.PP
Scrolling a mouse wheel over a menu either wraps the pointer along the
menu (default), scrolls the menu under the pointer or act as if the
menu was clicked depending on the
\fIMouseWheel\fR menu style\.
.PP
Clicking on a selected item activates it \- what happens exactly
depends on the type of the item\.
.PP
Clicking on a title, a separator, the side bar, or outside the
menu closes the menu (exception: tear off menus can not be closed
this way)\.  Pressing mouse button 2 over a menu title or
activating a tear off bar creates a tear off menu from the current
menu\.  Clicking on a normal menu item invokes the command that is
bound to it, and clicking on a sub menu item either closes all
open menus and replaces them with the sub menu or posts the menu
(default)\.
.PP
Posting menus is meant to ease mouse navigation\.  Once a sub menu
is posted, only items from that sub menu can be selected\.  This
can be very useful to navigate the menu if the pointer tends to
stray off the menu\.  To unpost the menu and revert back to normal
operation, either click on the same sub menu item or press any
key\.
.RE
.TP
.B Keyboard Navigation
.RS
.\".PP
Just like with mouse navigation, the item below the pointer is
selected\.  This is achieved by warping the pointer to the menu
items when necessary\.  While a menu is open, all key presses are
intercepted by the menu\.  No other application can get keyboard
input (although this is not the case for tear off menus)\.
.PP
Items can be selected directly by pressing a hotkey that can be
configured individually for each menu item\.  The hotkey is
indicated by underlining it in the menu item label\.  With the
\fIAutomaticHotkeys\fR
menu style fvwm automatically assigns hotkeys to all menu items\.
.PP
The most basic keys to navigate through menus are the cursor keys
(move up or down one item, enter or leave a sub menu),
.SM Space
(activate item) and
.SM Escape
(close menu)\.  Numerous other keys can be used to navigate through
menus by default:
.PP
\fIEnter\fR,
\fIReturn\fR,
\fISpace\fR
activate the current item\.
.PP
\fIEscape\fR,
\fIDelete\fR,
\fICtrl\-G\fR
exit the current sequence of menus or destroy a tear off menu\.
.PP
\fIJ\fR,
\fIN\fR,
\fICursor\-Down\fR,
\fITab\fR,
\fIMeta\-Tab\fR,
\fICtrl\-F\fR,
move to the next item\.
.PP
\fIK\fR,
\fIP\fR,
\fICursor\-Up\fR,
\fIShift\-Tab\fR,
\fIShift\-Meta\-Tab\fR,
\fICtrl\-B\fR,
move to the prior item\.
.PP
\fIL\fR,
\fICursor\-Right\fR,
\fIF\fR
enter a sub menu\.
.PP
\fIH\fR,
\fICursor\-Left\fR,
\fIB\fR
return to the prior menu\.
.PP
\fICtrl\-Cursor\-Up\fR,
\fICtrl\-K\fR
\fICtrl\-P\fR,
\fIShift\-Ctrl\-Meta\-Tab\fR,
\fIPage\-Up\fR
move up five items\.
.PP
\fICtrl\-Cursor\-Down\fR,
\fICtrl\-J\fR
\fICtrl\-N\fR,
\fICtrl\-Meta\-Tab\fR
\fIPage\-Down\fR
move down five items\.
.PP
\fIShift\-P\fR,
\fIHome\fR,
\fIShift\-Cursor\-Up\fR,
\fICtrl\-A\fR
move to the first item\.
.PP
\fIShift\-N\fR,
\fIEnd\fR,
\fIShift\-Cursor\-Down\fR,
\fICtrl\-E\fR
move to the last item\.
.PP
\fIMeta\-P\fR,
\fIMeta\-Cursor\-Up\fR,
\fICtrl\-Cursor\-Left\fR,
\fIShift\-Ctrl\-Tab\fR,
move up just below the next separator\.
.PP
\fIMeta\-N\fR,
\fIMeta\-Cursor\-Down\fR,
\fICtrl\-Cursor\-Right\fR,
\fICtrl\-Tab\fR,
move down just below the next separator\.
.PP
\fIInsert\fR
opens the "More\.\.\." sub menu if any\.
.PP
\fIBackspace\fR
tears off the menu\.
.RE
.TP
.B Menu Bindings
.RS
.\".PP
The keys and mouse buttons used to navigate the menu can be configured
using the
\fBKey\fR
and
\fBMouse\fR
commands with the special context 'M', possible combined with 'T' for
the menu title, 'I' for other menu items, 'S' for any border or
sidepic, '[' for left border including a left sidepic, ']' for right
border including a right sidepic, '\-' for top border, '_' for bottom
border\.  The menu context uses its own set of actions that can be bound
to keys and mouse buttons\.  These are
\fIMenuClose\fR,
\fIMenuCloseAndExec\fR,
\fIMenuEnterContinuation\fR,
\fIMenuEnterSubmenu\fR,
\fIMenuLeaveSubmenu\fR,
\fIMenuMoveCursor\fR,
\fIMenuCursorLeft\fR,
\fIMenuCursorRight\fR,
\fIMenuSelectItem\fR,
\fIMenuScroll\fR and
\fIMenuTearOff\fR\.
.PP
It is not possible to override the key Escape with no modifiers for
closing the menu\.  Neither is it possible to undefine mouse button 1,
the arrow keys or the enter key for minimal navigation\.
.PP
\fBMenuClose\fR
exits from the current sequence of menus or destroys a tear off menu\.
.PP
\fBMenuCloseAndExec\fR
exits from the current sequence of menus or destroys a tear off menu and
executes the rest of the line as a command\.
.PP
\fBMenuEnterContinuation\fR
opens the "More\.\.\." sub menu if any\.
.PP
\fBMenuEnterSubmenu\fR
enters a sub menu\.
.PP
\fBMenuLeaveSubmenu\fR
returns to the prior menu\.
.PP
\fBMenuMoveCursor\fR
\fIn\fR
[\fIm\fR]
moves the selection to another item\.  If the first argument is zero
the second argument specifies an absolute item in the menu to move
the pointer to\.  Negative items are counted from the end of the menu\.
If the first argument is non\-zero, the second argument must be omitted,
and the first argument specifies a relative change in the selected item\.
The positions may be suffixed with a 's' to indicate that the items should
refer only to the first items after separators\.
.PP
\fBMenuCursorLeft\fR
enters a sub menu with the
\fISubmenusLeft\fR
menu style, and returns to the prior menu with the
\fISubmenusRight\fR menu style\.
.PP
\fBMenuCursorRight\fR
enters a sub menu with the
\fISubmenusRight\fR
menu style, and returns to the prior menu with the
\fISubmenusLeft\fR menu style\.
.PP
\fBMenuSelectItem\fR
triggers the action for the menu item\.
.PP
\fBMenuScroll \fR\fIn\fR
performs menu scrolling according to the
\fIMouseWheel\fR menu style with
\fIn\fR items\.  The distance can be
suffixed with an 's' to indicate the items should refer only to the
first items after separators\.
.PP
\fBMenuTearOff\fR
turns a normal menu into a "torn off" menu\.  See
\fBTear Off Menus\fR
for details\.
.RE
.TP
.B Tear Off Menus
.RS
.\".PP
A tear off menu is any menu that has been "torn off" the window it
was attached to and pinned to the root window\.  There are three
ways to tear off a menu: click on the menu title with mouse
button 2, press
.SM Backspace
in the menu or activate its tear off bar (a horizontal bar with a
broken line)\.  Tear off bars must be added to the menu as any
other item by assigning them the command
\fBTearMenuOff\fR\.
.PP
The builtin tear off actions can be overridden by undefining the
builtin menu actions bound to tear off\.  To remove the builtin mouse
button 2 binding, use:
.sp
.RS 4
.nf
\fBMouse\fR 2 MT A \-
.fi
.RE
.PP
and to remove the builtin backspace binding, use:
.sp
.RS 4
.nf
\fBKey\fR Backspace M A \-
.fi
.RE
.PP
See the section
\fBMenu Bindings\fR
for details on how to assign other bindings for tear off\.
.PP
Note that prior to fvwm 2\.5\.20 the tear off mouse bindings were
redefined in different way, which no longer work\.
.PP
The window containing the menu is placed as any other window would
be\.  If you find it confusing to have your tear off menus appear
at random positions on the screen, put this line in your
configuration file:
.sp
.RS 4
.nf
\fBStyle\fR fvwm_menu \fIUsePPosition\fR
.fi
.RE
.PP
To remove borders and buttons from a tear\-off menu but keep the
menu title, you can use
.sp
.RS 4
.nf
\fBStyle\fR fvwm_menu !\fIButton\fR 0, !\fIButton\fR 1
\fBStyle\fR fvwm_menu !\fIButton\fR 2, !\fIButton\fR 3
\fBStyle\fR fvwm_menu !\fIButton\fR 4, !\fIButton\fR 5
\fBStyle\fR fvwm_menu !\fIButton\fR 6, !\fIButton\fR 7
\fBStyle\fR fvwm_menu !\fIButton\fR 8, !\fIButton\fR 9
\fBStyle\fR fvwm_menu \fITitle\fR, \fIHandleWidth\fR 0
.fi
.RE
.PP
A tear off menu is a cross breeding between a window and a menu\.
The menu is swallowed by a window and its title is stripped off
and displayed in the window title\.  The main advantage is that the
menu becomes permanent \- activating an item does not close the
menu\.  Therefore, it can be used multiple times without reopening
it\.  To destroy such a menu, close its window or press the
.SM Escape
key\.
.PP
Tear off menus behave somewhat differently than normal menus and
windows\.  They do not take the keyboard focus, but while the
pointer is over one of them, all key presses are sent to the
menu\.  Other fvwm key bindings are disabled as long as the pointer
is inside the tear off menu or one of its sub menus\.  When the
pointer leaves this area, all sub menus are closed immediately\.
Note that the window containing a tear off menu is never hilighted
as if it had the focus\.
.PP
A tear off menu is an independent copy of the menu it originated
from\.  As such, it is not affected by adding items to that menu or
changing its menu style\.
.PP
To create a tear off menu without opening the normal menu first,
the option
\fITearOffImmediately\fR
can be added to the
\fBMenu\fR or \fBPopup\fR
command\.
.RE
.TP
\fBAddToMenu\fR \fImenu\-name\fR [\fImenu\-label\fR\ \fIaction\fR]
.RS
.\".PP
Begins or adds to a menu definition\.  Typically a menu definition
looks like this:
.sp
.RS 4
.nf
AddToMenu Utilities Utilities \fBTitle\fR
 + Xterm           \fBExec\fR  exec xterm \-e tcsh
 + Rxvt            \fBExec\fR  exec rxvt
 + "Remote Logins" \fBPopup\fR Remote\-Logins
 + Top             \fBExec\fR  exec rxvt \-T Top \-n Top \-e top
 + Calculator      \fBExec\fR  exec xcalc
 + Xman            \fBExec\fR  exec xman
 + Xmag            \fBExec\fR  exec xmag
 + emacs           \fBExec\fR  exec xemacs
 + Mail            MailFunction xmh "\-font fixed"
 + ""              \fBNop\fR
 + Modules         \fBPopup\fR Module\-Popup
 + ""              \fBNop\fR
 + Exit Fvwm       \fBPopup\fR Quit\-Verify
.fi
.RE
.PP
The menu could be invoked via
.sp
.RS 4
.nf
\fBMouse\fR 1 R A \fBMenu\fR Utilities Nop
.fi
.RE
.PP
or
.sp
.RS 4
.nf
\fBMouse\fR 1 R A \fBPopup\fR Utilities
.fi
.RE
.PP
There is no end\-of\-menu symbol\.  Menus do not have to be defined
in a contiguous region of the
\fIconfig\fR
file\.  The quoted (or first word)
portion in the above examples is the menu label,
which appears in the menu when the user pops it up\.  The remaining
portion is an fvwm command which is executed if the user
selects that menu item\.  An empty menu\-label ("") and the
\fBNop\fR
function are used to insert a separator into the menu\.
.PP
The keywords
\fIDynamicPopUpAction\fR
and
\fIDynamicPopDownAction\fR
have a special meaning when used as the name of a menu item\.  The
action following the keyword is executed whenever the menu is
popped up or down\.  This way you can implement dynamic menus\.  It
is even possible to destroy itself with
\fBDestroyMenu\fR
and the rebuild from scratch\.  When the menu has been destroyed
(unless you used the
\fIrecreate\fR
option when destroying the menu), do not forget to add the dynamic
action again\.
.PP
Note: Do not trigger actions that require user interaction\.  They
may fail and may screw up your menus\.  See the
\fBSilent\fR
command\.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBWarning\fR
Do not issue
\fBMenuStyle\fR
commands as dynamic menu actions\.  Chances are good that this
crashes fvwm\.
.PP
There are several configurable scripts installed together with fvwm
for automatic menu generation\.  They have their own man pages\.
Some of them, specifically
\fBfvwm\-menu\-directory\fR and
\fBfvwm\-menu\-desktop\fR, may be used with
\fIDynamicPopupAction\fR
to create a directory listing or GNOME/KDE
application listing\.
.PP
Example (File browser):
.sp
.RS 4
.nf
# You can find the shell script fvwm_make_browse_menu\.sh
# in the utils/ directory of the distribution\.
AddToMenu BrowseMenu
+ DynamicPopupAction \fBPipeRead\fR \e
  'fvwm_make_browse_menu\.sh BrowseMenu'
.fi
.RE
.PP
Example (Picture menu):
.sp
.RS 4
.nf
# Build a menu of all \.jpg files in
# $HOME/Pictures
AddToMenu JpgMenu foo title
+ DynamicPopupAction \fBFunction\fR MakeJpgMenu

\fBAddToFunc\fR MakeJpgMenu
+ I \fBDestroyMenu\fR recreate JpgMenu
+ I AddToMenu JpgMenu Pictures \fBTitle\fR
+ I \fBPipeRead\fR 'for i in \fI$HOME\fR/Pictures/*\.jpg; \e
  do echo AddToMenu JpgMenu "`basename $i`" \fBExec\fR xv $i; done'
.fi
.RE
.PP
The keyword
\fIMissingSubmenuFunction\fR
has a similar meaning\.  It is executed whenever you try to pop up
a sub menu that does not exist\.  With this function you can define
and destroy menus on the fly\.  You can use any command after the
keyword, but if the name of an item (that is a submenu) defined with
\fBAddToFunc\fR
follows it, fvwm executes this command:
.sp
.RS 4
.nf
\fBFunction\fR <function\-name> <submenu\-name>
.fi
.RE
.PP
i\.e\. the name is passed to the function as its first argument and
can be referred to with "$0"\.
.PP
The
\fBfvwm\-menu\-directory\fR
script mentioned above may be used with
\fIMissingSubmenuFunction\fR
to create an up to date recursive directory listing\.
.PP
Example:
.sp
.RS 4
.nf
# There is another shell script fvwm_make_directory_menu\.sh
# in the utils/ directory of the distribution\. To use it,
# define this function in your configuration file:

\fBDestroyFunc\fR MakeMissingDirectoryMenu
\fBAddToFunc\fR MakeMissingDirectoryMenu
+ I \fBPipeRead\fR fvwm_make_directory_menu\.sh $0

\fBDestroyMenu\fR SomeMenu
AddToMenu SomeMenu
+ MissingSubmenuFunction MakeMissingDirectoryMenu
+ "Root directory" \fBPopup\fR /
.fi
.RE
.PP
This is another implementation of the file browser that uses
sub menus for subdirectories\.
.PP
Titles can be used within the menu\.  If you add the option
\fItop\fR
behind the keyword
\fBTitle\fR,
the title is added to the top of the menu\.  If there was a title
already, it is overwritten\.
.sp
.RS 4
.nf
AddToMenu Utilities Tools Title top
.fi
.RE
.PP
All text up to the first
.SM Tab
in the menu label is aligned to the left side of the menu, all
text right of the first
.SM Tab
is aligned to the left in a second column and all text thereafter
is placed right aligned in the third column\.  All other
.SM Tab
s
are replaced by spaces\.  Note that you can change this format with
the
\fIItemFormat\fR
option of the
\fBMenuStyle\fR
command\.
.PP
If the menu\-label contains an ampersand ('&'), the next character
is taken as a hot\-key for the menu item\.  Hot\-keys are underlined
in the label\.  To get a literal '&', insert "&&"\.  Pressing the
hot\-key moves through the list of menu items with this hot\-key or
selects an item that is the only one with this hot\-key\.
.PP
If the menu\-label contains a sub\-string which is set off by stars,
then the text between the stars is expected to be the name of an
image file to insert in the menu\.  To get a literal '*', insert "**"\.  For example
.sp
.RS 4
.nf
+ Calculator*xcalc\.xpm* \fBExec\fR exec xcalc
.fi
.RE
.PP
inserts a menu item labeled "Calculator" with a picture of a
calculator above it\.  The following:
.sp
.RS 4
.nf
+ *xcalc\.xpm*           \fBExec\fR exec xcalc
.fi
.RE
.PP
Omits the "Calculator" label, but leaves the picture\.
.PP
If the menu\-label contains a sub\-string which is set off by
percent signs, then the text between the percent signs is expected
to be the name of image file (a so called mini icon to insert to
the left of the menu label\.  A second mini icon that is drawn at
the right side of the menu can be given in the same way\.  To get a
literal '%', insert "%%"\.  For example
.sp
.RS 4
.nf
+ Calculator%xcalc\.xpm% \fBExec\fR exec xcalc
.fi
.RE
.PP
inserts a menu item labeled "Calculator" with a picture of a
calculator to the left\.  The following:
.sp
.RS 4
.nf
+ %xcalc\.xpm%           \fBExec\fR exec xcalc
.fi
.RE
.PP
Omits the "Calculator" label, but leaves the picture\.  The
pictures used with this feature should be small (perhaps 16x16)\.
.PP
If the menu\-name (not the label) contains a sub\-string which is
set off by at signs ('@'), then the text between them is expected
to be the name of an image file to draw along the left
side of the menu (a side pixmap)\.  You may want to use the
\fISidePic\fR
option of the
\fBMenuStyle\fR
command instead\.  To get a literal '@', insert "@@"\.  For example
.sp
.RS 4
.nf
AddToMenu StartMenu@linux\-menu\.xpm@
.fi
.RE
.PP
creates a menu with a picture in its bottom left corner\.
.PP
If the menu\-name also contains a sub\-string surrounded by '^'s, then
the text between '^'s is expected to be the name of an X11 color
and the column containing the side picture is colored with that
color\.  You can set this color for a menu style using the
\fISideColor\fR
option of the
\fBMenuStyle\fR
command\.  To get a literal '^', insert "^^"\.  Example:
.sp
.RS 4
.nf
AddToMenu StartMenu@linux\-menu\.xpm@^blue^
.fi
.RE
.PP
creates a menu with a picture in its bottom left corner and
colors with blue the region of the menu containing the picture\.
.PP
In all the above cases, the name of the resulting menu is name
specified, stripped of the substrings between the various
delimiters\.
.RE
.TP
\fBChangeMenuStyle\fR \fImenustyle\fR \fImenu\fR ...
.RS
.\".PP
Changes the menu style of
\fImenu\fR to \fImenustyle\fR\.
You may specify more than one menu in each call of
\fBChangeMenuStyle\fR\.
.RE
.TP
\fBCopyMenuStyle\fR \fIorig\-menustyle\fR \fIdest\-menustyle\fR
.RS
.\".PP
Copy
\fIorig\-menustyle\fR to
\fIdest\-menustyle\fR,
where
\fIorig\-menustyle\fR
is an existing menu style\.  If the menu style
\fIdest_menustyle\fR
does not exist, then it is created\.
.RE
.TP
\fBDestroyMenu\fR [recreate] \fImenu\fR
.RS
.\".PP
Deletes a menu, so that subsequent references to it are no longer
valid\.  You can use this to change the contents of a menu during
an fvwm session\.  The menu can be rebuilt using
\fBAddToMenu\fR\.
The optional parameter
\fIrecreate\fR
tells fvwm not to throw away the menu completely but to throw away
all the menu items (including the title)\.
.sp
.RS 4
.nf
DestroyMenu Utilities
.fi
.RE
.RE
.TP
\fBDestroyMenuStyle\fR \fImenustyle\fR
.RS
.\".PP
Deletes the menu style named
\fImenustyle\fR
and changes all menus using this style to the default style, you
cannot destroy the default menu style\.
.sp
.RS 4
.nf
DestroyMenuStyle pixmap1
.fi
.RE
.RE
.TP
\fBMenu\fR \fImenu\-name\fR [\fIposition\fR] [\fIdouble\-click\-action\fR]
.RS
.\".PP
Causes a previously defined menu to be popped up in a sticky
manner\.  That is, if the user invokes the menu with a click action
instead of a drag action, the menu stays up\.  The command
\fIdouble\-click\-action\fR
is invoked if the user double\-clicks a button (or hits the key
rapidly twice if the menu is bound to a key) when bringing up the
menu\.  If the double click action is not specified, double
clicking on the menu does nothing\.  However, if the menu begins
with a menu item (i\.e\. not with a title or a separator) and the
double click action is not given, double clicking invokes the
first item of the menu (but only if the pointer really was over
the item)\.
.PP
The pointer is warped to where it was when the menu was invoked if
it was both invoked and closed with a keystroke\.
.PP
The
\fIposition\fR
arguments allow placement of the menu somewhere on the screen, for
example centered on the visible screen or above a title bar\.
Basically it works like this: you specify a
\fIcontext\-rectangle\fR
and an offset to this rectangle by which the upper left corner of
the menu is moved from the upper left corner of the rectangle\.
The
\fIposition\fR
arguments consist of several parts:
.HP 1
[\fIcontext\-rectangle\fR] \fIx\fR \fIy\fR [\fIspecial\-options\fR]
.PP
The
\fIcontext\-rectangle\fR
can be one of:
.PP
\fIRoot\fR
.RS 4
the root window of the current screen\.
.RE
.PP
\fIXineramaRoot\fR
.RS 4
the root window of the whole Xinerama screen\.  Equivalent to "root" when Xinerama is not used\.
.RE
.PP
\fIMouse\fR
.RS 4
a 1x1 rectangle at the mouse position\.
.RE
.PP
\fIWindow\fR
.RS 4
the frame of the context window\.
.RE
.PP
\fIInterior\fR
.RS 4
the inside of the context window\.
.RE
.PP
\fITitle\fR
.RS 4
the title of the context window or icon\.
.RE
.PP
\fIButton\fR<n>
.RS 4
button #n of the context window\.
.RE
.PP
\fIIcon\fR
.RS 4
the icon of the context window\.
.RE
.PP
\fIMenu\fR
.RS 4
the current menu\.
.RE
.PP
\fIItem\fR
.RS 4
the current menu item\.
.RE
.PP
\fIContext\fR
.RS 4
the current window, menu or icon\.
.RE
.PP
\fIThis\fR
.RS 4
whatever widget the pointer is on (e\.g\. a corner of a window or the root window)\.
.RE
.PP
\fIRectangle\fR <\fIgeometry\fR>
.RS 4
the rectangle defined by <\fIgeometry\fR> in X geometry format\.  Width and height default to 1 if omitted\.
.RE
.PP
If the context\-rectangle is omitted or illegal (e\.g\. "item" on a
window), "Mouse" is the default\.  Note that not all of these make
sense under all circumstances (e\.g\. "Icon" if the pointer is on a
menu)\.
.PP
The offset values
\fIx\fR
and
\fIy\fR
specify how far the menu is moved from its default position\.  By
default, the numeric value given is interpreted as a percentage of
the context rectangle's width (height), but with a trailing '\fIm\fR'
the menu's width (height) is used instead\.  Furthermore a trailing '\fIp\fR'
changes the interpretation to mean pixels\.
.PP
Instead of a single value you can use a list of values\.  All
additional numbers after the first one are separated from their
predecessor by their sign\.  Do not use any other separators\.
.PP
If
\fIx\fR or \fIy\fR
are prefixed with "'\fIo\fR<number>" where <number> is an integer, the
menu and the rectangle are moved to overlap at the specified
position before any other offsets are applied\.  The menu and the
rectangle are placed so that the pixel at <number> percent of the
rectangle's width/height is right over the pixel at <number>
percent of the menu's width/height\.  So "o0" means that the
top/left borders of the menu and the rectangle overlap, with
"o100" it's the bottom/right borders and if you use "o50" they are
centered upon each other (try it and you will see it is much
simpler than this description)\.  The default is "o0"\.  The prefix
"o<number>" is an abbreviation for "+<number>\-<number>m"\.
.PP
A prefix of '\fIc\fR'
is equivalent to "o50"\.  Examples:
.sp
.RS 4
.nf
# window list in the middle of the screen
\fBWindowList\fR Root c c

# menu to the left of a window
Menu name window \-100m c+0

# popup menu 8 pixels above the mouse pointer
\fBPopup\fR name mouse c \-100m\-8p

# somewhere on the screen
Menu name rectangle 512x384+1+1 +0 +0

# centered vertically around a menu item
\fBAddToMenu\fR foobar\-menu
 + "first item" \fBNop\fR
 + "special item" \fBPopup\fR "another menu" item +100 c
 + "last item" \fBNop\fR

# above the first menu item
\fBAddToMenu\fR foobar\-menu
 + "first item" \fBPopup\fR "another menu" item +0 \-100m
.fi
.RE
.PP
Note that you can put a sub menu far off the current menu so you
could not reach it with the mouse without leaving the menu\.  If
the pointer leaves the current menu in the general direction of
the sub menu the menu stays up\.
.PP
The
\fIspecial\-options\fR:
.PP
To create a tear off menu without opening the normal menu, add the
option
\fITearOffImmediately\fR\.
Normally the menu opens in normal state for a split second before
being torn off\.  As tearing off places the menu like any other
window, a position should be specified explicitly:
.sp
.RS 4
.nf
# Forbid fvwm to place the menu window
\fBStyle\fR <name of menu> UsePPosition
# Menu at top left corner of screen
Menu Root 0p 0p TearOffImmediately
.fi
.RE
.PP
The
\fIAnimated\fR and
\fIMwm\fR or
\fIWin\fR
menu styles may move a menu somewhere else on the screen\.  If you
do not want this you can add
\fIFixed\fR
as an option\.  This might happen for example if you want the menu
always in the top right corner of the screen\.
.PP
Where do you want a menu to appear when you click on its menu
item? The default is to place the title under the cursor, but if
you want it where the position arguments say, use the
\fISelectInPlace\fR
option\.  If you want the pointer on the title of the menu, use
\fISelectWarp\fR
too\.  Note that these options apply only if the
\fIPopupAsRootMenu\fR \fBMenuStyle\fR
option is used\.
.PP
The pointer is warped to the title of a sub menu whenever the
pointer would be on an item when the sub menu is popped up
(\fIfvwm\fR
menu style) or never warped to the title at all
(\fIMwm\fR or
\fIWin\fR
menu styles)\.  You can force (forbid) warping whenever the
sub menu is opened with the
\fIWarpTitle\fR (\fINoWarp\fR) option\.
.PP
Note that the
\fIspecial\-options\fR
do work with a normal menu that has no other position arguments\.
.RE
.TP
\fBMenuStyle\fR \fIstylename\fR [\fIoptions\fR]
.RS
.\".PP
Sets a new menu style or changes a previously defined style\.  The
\fIstylename\fR
is the style name; if it contains spaces or tabs it has to be
quoted\.  The name "*" is reserved for the default menu style\.  The
default menu style is used for every menu\-like object (e\.g\. the
window created by the
\fBWindowList\fR
command) that had not be assigned a style using the
\fBChangeMenuStyle\fR\.
See also
\fBDestroyMenuStyle\fR\.
When using monochrome color options are ignored\.
.PP
\fIoptions\fR
is a comma separated list containing some of the keywords
Fvwm / Mwm / Win,
BorderWidth,
Foreground,
Background,
Greyed,
HilightBack / !HilightBack,
HilightTitleBack,
ActiveFore / !ActiveFore,
MenuColorset,
ActiveColorset,
GreyedColorset,
TitleColorset,
Hilight3DThick / Hilight3DThin / Hilight3DOff,
Hilight3DThickness,
Animation / !Animation,
Font,
TitleFont,
MenuFace,
PopupDelay,
PopupOffset,
TitleWarp / !TitleWarp,
TitleUnderlines0 / TitleUnderlines1 / TitleUnderlines2,
SeparatorsLong / SeparatorsShort,
TrianglesSolid / TrianglesRelief,
PopupImmediately / PopupDelayed,
PopdownImmediately / PopdownDelayed,
PopupActiveArea,
DoubleClickTime,
SidePic,
SideColor,
PopupAsRootMenu / PopupAsSubmenu / PopupIgnore / PopupClose,
RemoveSubmenus / HoldSubmenus,
SubmenusRight / SubmenusLeft,
SelectOnRelease,
ItemFormat,
VerticalItemSpacing,
VerticalMargins,
VerticalTitleSpacing,
AutomaticHotkeys / !AutomaticHotkeys,
MouseWheel,
ScrollOffPage / !ScrollOffPage,
TrianglesUseFore / !TrianglesUseFore\.
.PP
In the above list some options are listed as option pairs or
triples with a '/' in between\.  These options exclude each other\.
All paired options can be negated to have the effect of the
counterpart option by prefixing ! to the option\.
.PP
Some options are now negated by prefixing ! to the option\.  This
is the preferred form for all such options\.  The other negative
forms are now deprecated and will be removed in the future\.
.PP
This is a list of MenuStyle deprecated negative options:
ActiveForeOff, AnimationOff, AutomaticHotkeysOff, HilightBackOff,
TitleWarpOff
.PP
\fIFvwm\fR,
\fIMwm\fR,
\fIWin\fR
reset all options to the style with the same name in former
versions of fvwm\.  The default for new menu styles is
\fIFvwm\fR
style\.  These options override all others except
\fIForeground\fR, \fIBackground\fR, \fIGreyed\fR, \fIHilightBack\fR,
\fIActiveFore\fR and \fIPopupDelay\fR,
so they should be used only as the first option specified for a
menu style or to reset the style to defined behavior\.  The same
effect can be created by setting all the other options one by one\.
.PP
\fIMwm\fR and \fIWin\fR
style menus popup sub menus automatically\.
\fIWin\fR
menus indicate the current menu item by changing the background to
dark\.
\fIFvwm\fR
sub menus overlap the parent menu,
\fIMwm\fR and \fIWin\fR
style menus never overlap the parent menu\.
.PP
\fIFvwm\fR
style is equivalent to !HilightBack, Hilight3DThin,
!ActiveFore,
!Animation, Font, MenuFace, PopupOffset 0 67,
TitleWarp, TitleUnderlines1, SeparatorsShort, TrianglesRelief,
PopupDelayed, PopdownDelayed, PopupDelay 150, PopdownDelay 150,
PopupAsSubmenu, HoldSubmenus,
SubmenusRight, BorderWidth 2, !AutomaticHotkeys,
PopupActiveArea 75\.
.PP
\fIMwm\fR
style is equivalent to !HilightBack, Hilight3DThick,
!ActiveFore,
!Animation, Font, MenuFace, PopupOffset \-3 100,
!TitleWarp, TitleUnderlines2, SeparatorsLong, TrianglesRelief,
PopupImmediately, PopdownDelayed, PopdownDelay 150,
PopupAsSubmenu, HoldSubmenus, SubmenusRight, BorderWidth 2,
!AutomaticHotkeys, PopupActiveArea 75\.
.PP
\fIWin\fR
style is equivalent to HilightBack, Hilight3DOff, ActiveFore,
!Animation, Font, MenuFace, PopupOffset \-5 100, !TitleWarp,
TitleUnderlines1, SeparatorsShort, TrianglesSolid,
PopupImmediately, PopdownDelayed, PopdownDelay 150,
PopupAsSubmenu, RemoveSubmenus, SubmenusRight, BorderWidth 2,
!AutomaticHotkeys, PopupActiveArea 75\.
.PP
\fIBorderWidth\fR
takes the thickness of the border around the menus in pixels\.  It
may be zero to 50 pixels\.  The default is 2\.  Using an illegal
value reverts the border width to the default\.
.PP
\fIForeground\fR and
\fIBackground\fR
may have a color name as an argument\.  This color is used for menu
text or the menu's background\.  You can omit the color name to
reset these colors to the built\-in default\.
.PP
\fIGreyed\fR
may have a color name as an argument\.  This color is the one used
to draw a menu\-selection which is prohibited (or not recommended)
by the Mwm hints which an application has specified\.  If the color
is omitted the color of greyed menu entries is based on the
background color of the menu\.
.PP
\fIHilightBack\fR and
\fI!HilightBack\fR
switch hilighting the background of the selected menu item on and
off\.  A specific background color may be used by providing the
color name as an argument to
\fIHilightBack\fR\.
If you use this option without an argument the color is based on
the menu's background color\.  The
\fIActiveColorset\fR
option overrides the specified color\.  If the colorset has a
non solid background it is used for the hilighting\.
.PP
\fIHilightTitleBack\fR
switches hilighting the background of menu titles on\.  If a
\fITitleColorset\fR
was used, the background colour is taken from there\.  Otherwise
the color is based on the menu's background color\.  If the colorset
has a non solid background it is used for the hilighting\.
.PP
\fIActiveFore\fR and
\fI!ActiveFore\fR
switch hilighting the foreground of the selected menu item on and
off\.  A specific foreground color may be used by providing the
color name as an argument to
\fIActiveFore\fR\.
Omitting the color turns hilighting on when an
\fIActiveColorset\fR
is used\.
\fIActiveFore\fR
turns off hilighting the foreground completely\.  The
\fIActiveColorset\fR
option overrides the specified color\.
.PP
\fIMenuColorset\fR
controls if a colorset is used instead of the
\fIForeground\fR, \fIBackground\fR and \fIMenuFace\fR
menu styles\.  If the
\fIMenuColorset\fR
keyword is followed by a number equal to zero or greater, this
number is taken as the number of the colorset to use\.  If the
number is omitted, the colorset is switched off and the regular
menu styles are used again\.  The foreground and background colors
of the menu items are replaced by the colors from the colorset\.  If
the colorset has a pixmap defined, this pixmap is used as the
background of the menu\.  Note that the
\fIMenuFace\fR
menu style has been optimized for memory consumption and may use
less memory than the background from a colorset\.  The shape mask
from the colorset is used to shape the menu\.  Please refer to the
\fBColorsets\fR
section for details about colorsets\.
.PP
\fIActiveColorset\fR
works exactly like
\fIMenuColorset\fR,
but the foreground from the colorset replaces the color given with
the
\fIActiveFore\fR
menu style and the colorset's background color replaces the color
given with the
\fIHilightBack\fR
command (to turn on background hilighting you have to use the
\fIHilightBack\fR
menu style too)\.  If specified, the hilight and shadow colors
from the colorset are used too\.  The pixmap and shape mask from
the colorset are not used\.  Hilighting the background or
foreground can be turned off individually with the
\fI!ActiveFore\fR or \fI!HilightBack\fR
menu styles\.
.PP
\fIGreyedColorset\fR
works exactly like
\fIMenuColorset\fR,
but the foreground from the colorset replaces the color given with
the
\fIGreyed\fR
menu style\.  No other parts of the colorset are used\.
.PP
\fITitleColorset\fR
works exactly like
\fIMenuColorset\fR,
but is used only for menu titles\.
.PP
\fIHilight3DThick\fR,
\fIHilight3DThin\fR and
\fIHilight3DOff\fR
determine if the selected menu item is hilighted with a 3D
relief\.  Thick reliefs are two pixels wide, thin reliefs are one
pixel wide\.
.PP
\fIHilight3DThickness\fR
takes one numeric argument that may be between \-50 and +50
pixels\.  With negative values the menu item gets a pressed in look\.
The above three commands are equivalent to a thickness of 2, 1 and
0\.
.PP
\fIAnimation\fR and
\fI!Animation\fR
turn menu animation on or off\.  When animation is on, sub menus
that do not fit on the screen cause the parent menu to be shifted
to the left so the sub menu can be seen\.
.PP
\fIFont\fR and
\fITitleFont\fR
take a font name as an argument\.  If a font by this name exists
it is used for the text of all menu items\.  If it does not exist
or if the name is left blank the built\-in default is used\.  If a
\fITitleFont\fR
is given, it is used for all menu titles instead of the normal font\.
.PP
\fIMenuFace\fR
enforces a fancy background upon the menus\.  You can use the same
options for
\fIMenuFace\fR
as for the
\fBButtonStyle\fR\.
See description of
\fBButtonStyle\fR
command and the
\fBColor Gradients\fR
sections for more information\.  If you use
\fIMenuFace\fR
without arguments the style is reverted back to normal\.
.PP
Some examples of MenuFaces are:
.sp
.RS 4
.nf
MenuFace DGradient 128 2 lightgrey 50 blue 50 white
MenuFace TiledPixmap texture10\.xpm
MenuFace HGradient 128 2 Red 40 Maroon 60 White
MenuFace Solid Maroon
.fi
.RE
.PP
Note: The gradient styles H, V, B and D are optimized for high
speed and low memory consumption in menus\.  This is not the case
for all the other gradient styles\.  They may be slow and consume
huge amounts of memory, so if you encounter performance problems
with them you may be better off by not using them\.  To improve
performance you can try one or all of the following:
.PP
Turn hilighting of the active menu item other than foreground
color off:
.sp
.RS 4
.nf
MenuStyle <style> Hilight3DOff, !HilightBack
MenuStyle <style> ActiveFore <preferred color>
.fi
.RE
.PP
Make sure sub menus do not overlap the parent menu\.  This can
prevent menus being redrawn every time a sub menu pops up or down\.
.sp
.RS 4
.nf
MenuStyle <style> PopupOffset 1 100
.fi
.RE
.PP
Run your X server with backing storage\.  If your X Server is
started with the \-bs option, turn it off\.  If not try the \-wm
and +bs options:
.sp
.RS 4
.nf
startx \-\- \-wm +bs
.fi
.RE
.PP
.PP
You may have to adapt this example to your system (e\.g\. if you use
xinit to start X)\.
.PP
\fIPopupDelay\fR
requires one numeric argument\.  This value is the delay in
milliseconds before a sub menu is popped up when the pointer moves
over a menu item that has a sub menu\.  If the value is zero no
automatic pop up is done\.  If the argument is omitted the built\-in
default is used\.  Note that the popup delay has no effect if the
\fIPopupImmediately\fR
option is used since sub menus pop up immediately then\.
.PP
\fIPopupImmediately\fR
makes menu items with sub menus pop up it up as soon as the
pointer enters the item\.  The
\fIPopupDelay option\fR
is ignored then\.  If
\fIPopupDelayed\fR
is used fvwm looks at the
\fIPopupDelay\fR
option if or when this automatic popup happens\.
.PP
\fIPopdownDelay\fR
works exactly like
\fIPopupDelay\fR
but determines the timeout of the
\fIPopupDelayed\fR
style\.
.PP
\fIPopdownImmediately\fR
makes sub menus vanish as soon as the pointer leaves the sub menu
and the correspondent item in the parent menu\.  With the opposite
option
\fIPopdownDelayed\fR
the sub menu only pops down after the time specified with the
\fIPopdownDelay\fR
option\.  This comes handy when the pointer often strays off the
menu item when trying to move into the sub menu\.  Whenever there
is a conflict between the
\fIPopupImmediately\fR, \fIPopupDelayed\fR, \fIPopupDelay\fR
styles and the
\fIPopdownImmediately\fR, \fIPopdownDelayed\fR, \fIPopdownDelay\fR
styles, the
\fIPopup\.\.\.\fR
styles win when using mouse navigation and the
\fIPopdown\.\.\.\fR
styles win when navigating with the keyboard\.
.PP
\fIPopupOffset\fR
requires two integer arguments\.  Both values affect where sub
menus are placed relative to the parent menu\.  If both values are
zero, the left edge of the sub menu overlaps the left edge of the
parent menu\.  If the first value is non\-zero the sub menu is
shifted that many pixels to the right (or left if negative)\.  If
the second value is non\-zero the menu is moved by that many
percent of the parent menu's width to the right or left\.
.PP
\fIPopupActiveArea\fR
requires an integer value between 51 and 100\.  Normally, when the
pointer is over a menu item with a sub menu and the pointer enters
the area that starts at 75% of the menu width, the sub menu is
shown immediately\.  This percentage can be changed with
\fIPopupActiveArea\fR\.
Setting this value to 100 disables this kind of automatic popups
altogether\.  The default value is restored if no or an illegal
value is given\.
.PP
\fITitleWarp\fR and \fI!TitleWarp\fR
affect if the pointer warps to the menu title when a sub menu is
opened or not\.  Note that regardless of this setting the pointer is
not warped if the menu does not pop up under the pointer\.
.PP
\fITitleUnderlines0\fR,
\fITitleUnderlines1\fR and
\fITitleUnderlines2\fR
specify how many lines are drawn below a menu title\.
.PP
\fISeparatorsLong\fR and
\fISeparatorsShort\fR
set the length of menu separators\.  Long separators run from the
left edge all the way to the right edge\.  Short separators leave a
few pixels to the edges of the menu\.
.PP
\fITrianglesSolid\fR and
\fITrianglesRelief\fR
affect how the small triangles for sub menus is drawn\.  Solid
triangles are filled with a color while relief triangles are
hollow\.
.PP
\fIDoubleClickTime\fR
requires one numeric argument\.  This value is the time in
milliseconds between two mouse clicks in a menu to be considered
as a double click\.  The default is 450 milliseconds\.  If the
argument is omitted the double click time is reset to this
default\.
.PP
\fISidePic\fR
takes the name of an image file as an argument\.  The
picture is drawn along the left side of the menu\.  The
\fISidePic\fR
option can be overridden by a menu specific side pixmap (see
\fBAddToMenu\fR)\.
If the file name is omitted an existing side pixmap is removed from
the menu style\.
.PP
\fISideColor\fR
takes the name of an X11 color as an argument\.  This color is used
to color the column containing the side picture (see
above)\.  The SideColor option can be overridden by a menu specific
side color (see
\fBAddToMenu\fR)\.
If the color name is omitted the side color option is switched off\.
.PP
\fIPopupAsRootMenu\fR,
\fIPopupAsSubmenu\fR,
\fIPopupIgnore\fR and
\fIPopupClose\fR
change the behavior when you click on a menu item that opens a
sub menu\.  With
\fIPopupAsRootMenu\fR
the original menu is closed before the sub menu appears, with
\fIPopupAsSubmenu\fR
it is not, so you can navigate back into the
parent menu\.  Furthermore, with
\fIPopupAsSubmenu\fR
the sub menu is held open (posted) regardless of where you move
the mouse\.  Depending on your menu style this may simplify
navigating through the menu\.  \fBAny\fR keystroke while a menu is posted
reverts the menu back to the normal behavior\.  With
\fIPopupClose\fR
the menu is closed when a sub menu item is activated, and the menu
stays open if
\fIPopupIgnore\fR
is used (even if the menu was invoked with the
\fBPopup\fR
command)\.
\fIPopupAsSubmenu\fR
is the default\.
.PP
\fIRemoveSubmenus\fR
instructs fvwm to remove sub menu when you move back into the
parent menu\.  With
\fIHoldSubmenus\fR
the sub menu remains visible\.  You probably want to use
\fIHoldSubmenus\fR
if you are using the
\fIPopupDelayed\fR
style\.
\fIRemoveSubmenus\fR
affects menu navigation with the keyboard\.
.PP
\fISelectOnRelease\fR
takes an optional key name as an argument\.  If the given key is
released in a menu using this style, the current menu item is
selected\.  This is intended for
.SM Alt-Tab
\fBWindowList\fR
navigation\.
The key name is a standard X11 key name as defined in
\fI/usr/include/X11/keysymdef\.h\fR,
(without the
\fIXK_\fR
prefix), or the keysym database
\fI/usr/X11R6/lib/X11/XKeysymDB\fR\.
To disable this behavior, omit
the key name\.
.PP
Note: Some X servers do not support KeyRelease events\.
\fISelectOnRelease\fR
does not work on such a machine\.
.PP
\fIItemFormat\fR
takes a special string as its argument that determines the layout
of the menu items\.  Think of the format string as if it were a
menu item\.  All you have to do is tell fvwm where to place the
different parts of the menu item (i\.e\. the labels, the triangle
denoting a sub menu, the mini icons and the side pic) in the blank
area\.  The string consists of spaces,
.SM Tab
characters and formatting directives beginning with '%'\.  Any
illegal characters and formatting directives are silently ignored:
.PP
\fB%l\fR, \fB%c\fR and \fB%r\fR
.RS 4
Insert the next item label\.  Up to three labels can be used\.  The item column is left\-aligned (\fB%l\fR), centered (\fB%c\fR) or right\-aligned (\fB%r\fR)\.
.RE
.PP
\fB%i\fR
.RS 4
Inserts the mini icon\.
.RE
.PP
\fB%>\fR and \fB%<\fR
.RS 4
Insert the sub menu triangle pointing either to the right (\fB%>\fR) or to the left (\fB%<\fR)\.
.RE
.PP
\fB%|\fR
.RS 4
The first
\fB%|\fR
denotes the beginning of the area that is highlighted either with a background color or a relief (or both)\.  The second
\fB%|\fR
marks the end of this area\.
\fB%|\fR
can be used up to twice in the string\.  If you do not add one or both of them, fvwm sets the margins to the margins of the whole item (not counting the side picture)\.
.RE
.PP
\fB%s\fR
.RS 4
Places the side picture either at the beginning or the end of the menu\.  This directive may be used only once and only as the first or last in the format string\.  If the
\fB%s\fR
is not at the beginning of the string, menus are not drawn properly\.
.RE
.PP
\fBSpace\fR, \fBTab\fR, \fB%Space\fR and \fB%Tab\fR
.RS 4
Add gap of one space, or a tab, using the width of the menu font\.  When using a tab, the size of the gap can be one to 8 spaces since the tab position is a multiple of 8 from the edge of the menu\.  The whole string must be quoted if spaces or tabs are used\.
.RE
.PP
\fB%p\fR
.RS 4
Like Space and Tab
\fB%p\fR
inserts an empty area into the item, but with better control of its size (see below)\.
.RE
.PP
You can define an additional space before and after each of the
objects like this:
.sp
.RS 4
.nf
\fB%\fR\fIleft\fR\fB\.\fR\fIright\fR\fBp\fR
.fi
.RE
.PP
This means: if the object is defined in the menu (e\.g\. if it is
\fB%s\fR
and you use a side picture, or it is
\fB%l\fR
for the third column and there are items defined that actually
have a third column), then add
\fIleft\fR
pixels before the object and
\fIright\fR
pixels after it\.  You may leave out the
\fIleft\fR
or the \fI\.right\fR
parts if you do not need them\.  All values up to the screen width
are allowed\.  Even negative values can be used with care\.  The
\fBp\fR
may be replaced with any other formatting directives described
above\.
.PP
Note: Only items defined in the format string are visible in the
menus\.  So if you do not put a
\fB%s\fR
in there you do not see a side picture, even if one is specified\.
.PP
Note: The
\fISubmenusLeft\fR
style changes the default
\fIItemFormat\fR
string, but if it was set manually it is not modified\.
.PP
Note: If any unformatted title of the menu is wider than the
widest menu item, the spaces between the different parts of the
menu items are enlarged to match the width of the title\.  Leading
left aligned objects in the format string
(\fB%l\fR, \fB%i\fR,
\fB%<\fR, first \fB%|\fR)
stick to the left edge of the menu and trailing right aligned
objects
(\fB%r\fR, \fB%i\fR,
\fB%>\fR, second \fB%|\fR)
stick to the right edge\.  The gaps between the remaining items are
enlarged equally\.
.PP
Examples:
.sp
.RS 4
.nf
MenuStyle * ItemFormat "%\.4s%\.1|%\.5i%\.5l%\.5l%\.5r%\.5i%2\.3>%1|"
.fi
.RE
.PP
Is the default string used by fvwm: (side picture + 4 pixels gap)
(beginning of the hilighted area + 1 pixel gap) (mini icon + 5p)
(first column left aligned + 5p) (second column left aligned + 5p)
(third column right aligned + 5p) (second mini icon + 5p) (2p +
sub menu triangle + 3p) (1p + end of hilighted area)\.
.sp
.RS 4
.nf
MenuStyle * ItemFormat "%\.1|%3\.2<%5i%5l%5l%5r%5i%1|%4s"
.fi
.RE
.PP
Is used by fvwm with the
\fISubmenusLeft\fR
option below\.
.PP
\fIVerticalItemSpacing\fR and
\fIVerticalTitleSpacing\fR
control the vertical spacing of menu items and titles like
\fIItemFormat\fR
controls the horizontal spacing\.  Both take two numeric arguments
that may range from \-100 to +100\.  The first is the gap in pixels
above a normal menu item (or a menu title), the second is the gap
in pixels below it\.  Negative numbers do not make much sense and
may screw up the menu completely\.  If no arguments are given or
the given arguments are invalid, the built\-in defaults are used:
one pixel above the item or title and two below\.
.PP
\fIVerticalMargins\fR
can be used to add some padding at the top and bottom of menus\.
It takes two numeric arguments that must be positive integers (or
zero)\.  If the number of arguments or its values are incorrect,
fvwm defaults both to 0, which means no padding at all\.  If the
values are correct, the first one is used for the top margin, and
the second one is used for the bottom margin\.
.PP
\fISubmenusLeft\fR
mirrors the menu layout and behavior\.  Sub menus pop up to the
left, the sub menu triangle is drawn left and the mini icon and
side picture are drawn at the right side of the menu\.  The default
is
\fISubmenusRight\fR\.
The position hints of a menu are also affected by this setting,
i\.e\. position hints using
\fIitem\fR or \fImenu\fR
as context rectangle and position hints using
\fIm\fR
offsets\.
.PP
\fIAutomaticHotkeys\fR and
\fI!AutomaticHotkeys\fR
control the menu's ability to automatically provide hot\-keys on
the first character of each menu item's label\.  This behavior is
always overridden if an explicit hot\-key is assigned in the
\fBAddToMenu\fR
command\.
.PP
\fIMouseWheel\fR
controls the ability to scroll the menu using a mouse wheel\.  It takes
one argument, that can be one of
ScrollsPointer, ScrollsMenu, ScrollsMenuBackwards or ActivatesItem\.
ScrollsPointer makes the mouse wheel scroll the pointer over a menu\.
This is the default\.  ScrollsMenu and ScrollsMenuBackwards scroll the menu
beneath the pointer\.  ActivatesItem disables scrolling by mouse wheel and
makes the use of a mouse wheel act as if the menu was clicked\.
If no argument is supplied the default setting is restored\.
.PP
\fIScrollOffPage\fR
allows a menu to be scrolled out of the visible area if
\fIMouseWheel\fR
is set to ScrollsMenu or ScrollsMenuBackwards\.  This is the default\.
The opposite,
\fI!ScrollOffPage\fR
disables this behaviour\.
.PP
\fITrianglesUseFore\fR
draws sub menu triangles with the foreground color of the menu colorset
(normally drawn with the hilight color)\.
\fI!TrianglesUseFore\fR
disables this behaviour\.
.PP
Examples:
.sp
.RS 4
.nf
MenuStyle * Mwm
MenuStyle * Foreground Black, Background gray40
MenuStyle * Greyed gray70, ActiveFore White
MenuStyle * !HilightBack, Hilight3DOff
MenuStyle * Font lucidasanstypewriter\-14
MenuStyle * MenuFace DGradient 64 darkgray MidnightBlue

MenuStyle red Mwm
MenuStyle red Foreground Yellow
MenuStyle red Background Maroon
MenuStyle red Greyed Red, ActiveFore Red
MenuStyle red !HilightBack, Hilight3DOff
MenuStyle red Font lucidasanstypewriter\-12
MenuStyle red MenuFace DGradient 64 Red Black
.fi
.RE
.PP
Note that all style options could be placed on a single line for
each style name\.
.RE
.TP
\fBMenuStyle\fR \fIforecolor\fR \fIbackcolor\fR \fIshadecolor\fR \fIfont\fR \fIstyle\fR [\fIanim\fR]
.RS
.\".PP
This is the old syntax of the
\fBMenuStyle\fR
command\.  It is obsolete and may be removed in the future\.  Please
use the new syntax as described above\.
.PP
Sets the menu style\.  When using monochrome the colors are
ignored\.  The
\fIshadecolor\fR
is the one used to draw a menu\-selection which is prohibited (or
not recommended) by the Mwm hints which an application has
specified\.  The style option is either
\fIFvwm\fR, \fIMwm\fR or \fIWin\fR,
which changes the appearance and operation of the menus\.
.PP
\fIMwm\fR and \fIWin\fR
style menus popup sub menus automatically\.
\fIWin\fR
menus indicate the current menu item by changing the background to
black\.
\fIFvwm\fR
sub menus overlap the parent menu,
\fIMwm\fR and \fIWin\fR
style menus never overlap the parent menu\.
.PP
When the
\fIanim\fR
option is given, sub menus that do not fit on the screen cause the
parent menu to be shifted to the left so the sub menu can be
seen\.  See also
\fBSetAnimation\fR
command\.
.RE
.TP
\fBPopup\fR \fIPopupName\fR [\fIposition\fR] [\fIdefault\-action\fR]
.RS
.\".PP
This command has two purposes: to bind a menu to a key or mouse
button, and to bind a sub menu into a menu\.  The formats for the
two purposes differ slightly\.  The
\fIposition\fR
arguments are the same as for
\fBMenu\fR\.
The command
\fIdefault\-action\fR
is invoked if the user clicks a button to invoke the menu and
releases it immediately again (or hits the key rapidly twice if
the menu is bound to a key)\.  If the default action is not
specified, double clicking on the menu does nothing\.  However, if
the menu begins with a menu item (i\.e\. not with a title or a
separator) and the default action is not given, double clicking
invokes the first item of the menu (but only if the pointer really
was over the item)\.
.PP
To bind a previously defined pop\-up menu to a key or mouse button:
.PP
The following example binds mouse buttons 2 and 3 to a pop\-up
called "Window Ops"\.  The menu pops up if the buttons 2 or 3 are
pressed in the window frame, side\-bar, or title\-bar, with no
modifiers (none of shift, control, or meta)\.
.sp
.RS 4
.nf
\fBMouse\fR 2 FST N Popup "Window Ops"
\fBMouse\fR 3 FST N Popup "Window Ops"
.fi
.RE
.PP
Pop\-ups can be bound to keys through the use of the
\fBKey\fR
command\.  Pop\-ups can be operated without using the mouse by
binding to keys and operating via the up arrow, down arrow, and
enter keys\.
.PP
To bind a previously defined pop\-up menu to another menu, for use
as a sub menu:
.PP
The following example defines a sub menu "Quit\-Verify" and binds
it into a main menu, called "RootMenu":
.sp
.RS 4
.nf
\fBAddToMenu\fR Quit\-Verify
 + "Really Quit Fvwm?" \fBTitle\fR
 + "Yes, Really Quit"  \fBQuit\fR
 + "Restart Fvwm"      \fBRestart\fR
 + "Restart Fvwm 1\.xx" \fBRestart\fR fvwm1 \-s
 + ""                  \fBNop\fR
 + "No, Don't Quit"    \fBNop\fR

\fBAddToMenu\fR RootMenu "Root Menu" \fBTitle\fR
 + "Open XTerm Window" Popup NewWindowMenu
 + "Login as Root"     \fBExec\fR exec xterm \-T Root \-n Root \-e su \-
 + "Login as Anyone"   \fBPopup\fR AnyoneMenu
 + "Remote Hosts"      \fBPopup\fR HostMenu
 + ""                  \fBNop\fR
 + "X utilities"       Popup Xutils
 + ""                  \fBNop\fR
 + "Fvwm Modules"      Popup Module\-Popup
 + "Fvwm Window Ops"   Popup Window\-Ops
 + ""                  \fBNop\fR
 + "Previous Focus"    \fBPrev\fR (AcceptsFocus) \fBFocus\fR
 + "Next Focus"        \fBNext\fR (AcceptsFocus) \fBFocus\fR
 + ""                  \fBNop\fR
 + "Refresh screen"    \fBRefresh\fR
 + ""                  \fBNop\fR
 + "Reset X defaults"  \fBExec\fR xrdb \-load \e
                       $HOME/\.Xdefaults
 + ""                  \fBNop\fR
 + ""                  \fBNop\fR
 + \fBQuit\fR                Popup Quit\-Verify
.fi
.RE
.PP
Popup differs from
\fBMenu\fR
in that pop\-ups do not stay up if the user simply clicks\.  These
are popup\-menus, which are a little hard on the wrist\.
\fBMenu\fR
menus stay up on a click action\.  See the
\fBMenu\fR
command for an explanation of the interactive behavior of menus\.  A
menu can be open up to ten times at once, so a menu may even use
itself or any of its predecessors as a sub menu\.
.RE
.TP
\fBTearMenuOff\fR
.RS
.\".PP
When assigned to a menu item, it inserts a tear off bar into the
menu (a horizontal broken line)\.  Activating that item tears off
the menu\.  If the menu item has a label, it is shown instead of
the broken line\.  If used outside menus, this command does
nothing\.  Examples:
.sp
.RS 4
.nf
\fBAddToMenu\fR WindowMenu
+ I "" TearMenuOff

\fBAddToMenu\fR RootMenu
+ I "click here to tear me off" TearMenuOff
.fi
.RE
.RE
.TP
\fBTitle\fR
.RS
.\".PP
Does nothing This is used to insert a title line in a popup or menu\.
.RE
.SS Miscellaneous Commands
.TP
\fBBugOpts\fR [\fIoption\fR\ [\fIbool\fR]], ...
.RS
.\".PP
This command controls several workarounds for bugs in third party
programs\.  The individual options are separated by commas\.  The
optional argument
\fIbool\fR
is a boolean argument and controls if the bug workaround is
enabled or not\.  It can either be "True" or "False" to turn the
option on or off, or "toggle" to switch is back and forth\.  If
\fIbool\fR
is omitted, the default setting is restored\.
.PP
\fIFlickeringMoveWorkaround\fR
disables ConfigureNotify events that are usually sent to an
application while it is moved\.  If some windows flicker annoyingly
while being moved, this option may help you\.  Note that if this
problem occurs it is not an fvwm bug, it is a problem of the
application\.
.PP
\fIMixedVisualWorkaround\fR
makes fvwm install the root colormap before it does some
operations using the root window visuals\.  This is only useful
when the
\fB\-visual\fR
option is used to start fvwm and then only with some
configurations of some servers (e\.g\. Exceed 6\.0 with an 8 bit
PseudoColor root and fvwm using a 24 bit TrueColor visual)\.
.PP
The
\fIModalityIsEvil\fR
option controls whether Motif applications have the ability to
have modal dialogs (dialogs that force you to close them first
before you can do anything else)\.  The default is to not allow
applications to have modal dialogs\.  Use this option with
care\.  Once this option is turned on, you have to restart fvwm to
turn it off\.
.PP
\fIRaiseOverNativeWindows\fR
makes fvwm try to raise the windows it manages over native windows
of the X server's host system\.  This is needed for some X servers
running under Windows, Windows NT or Mac OS X\.  Fvwm tries to detect if it
is running under such an X server and initializes the flag
accordingly\.
.PP
\fIRaiseOverUnmanaged\fR
makes fvwm try to raise the windows it manages over
override_redirect windows\.  This is used to cope with ill\-mannered
applications that use long\-lived windows of this sort, contrary to
ICCCM
conventions\.  It is useful with the
\fIUnmanaged\fR
style option too\.
.PP
\fIFlickeringQtDialogsWorkaround\fR
suppresses flickering of the focused window in some modules when
using KDE or QT applications with application modal dialog
windows\.  By default this option is turned on\.  This option may be
visually disturbing for other applications using windows not
managed by fvwm\.  Since these applications are rare it is most
likely safe to leave this option at its default\.
.PP
\fIQtDragnDropWorkaround\fR
surpresses the forwarding of unknown ClientEvent messages to windows \-\-
usually this is harmless, but Qt has problems handling unrecognised
ClientEvent messages\.  Enabling this option might therefore help for Qt
applications using DragnDrop\.  This option is off by default\.
.PP
\fIEWMHIconicStateWorkaround\fR
is needed by EWMH compliant pagers or taskbars which represent
windows which are on a different desktops as iconified\.  These
pagers and taskbars use a version of the EWMH specification before
version 1\.2 (the current KDE 2 & 3 versions)\.  These pagers and
taskbars use the IconicState WM_STATE state to determine if an
application is iconified\.  This state, according to the
ICCCM,
does not imply that a window is iconified (in the usual sense)\.
Turning on this option forces fvwm to establish an equivalence
between the IconicState WM_STATE state and the iconified window\.
This violates
ICCCM
compliance but should not cause big problems\.
By default this option is off\.
.PP
With the
\fIDisplayNewWindowNames\fR
enabled, fvwm prints the name, icon name (if available), resource
and class of new windows to the console\.  This can help in finding
the correct strings to use in the
\fBStyle\fR
command\.
.PP
When the
\fIExplainWindowPlacement\fR
option is enabled, fvwm prints a message to the console whenever a
new window is placed or one of the commands
\fBPlaceAgain\fR,
\fBRecapture\fR or
\fBRecaptureWindow\fR
is used\.  The message explains on which desk, page, Xinerama
screen and position it was placed and why\.  This option can be
used to figure out why a specific window does not appear where you
think it should\.
.PP
The
\fIDebugCRMotionMethod\fR
option enables some debugging code in the ConfigureRequest
handling routines of fvwm\.  It is not helpful for the user, but if
you report a bug to the fvwm team we may ask you to enable this
option\.
.PP
The \fITransliterateUtf8\fR option
enables transliteration during conversions from utf\-8 strings\.  By
default fvwm will not transliterate during conversion, but will fall
back to alternate strings provided by the clients if conversion from
utf\-8 fails due to characters which have no direct correspondance in
the target charecter set\.  Some clients however neglect to set non utf\-8
properties correctly in which case this option may help\.
.RE
.TP
\fBBusyCursor\fR [\fIOption\fR\ \fIbool\fR], ...
.RS
.\".PP
This command controls the cursor during the execution of certain
commands\.
\fIOption\fR
can be
\fIDynamicMenu\fR,
\fIModuleSynchronous\fR,
\fIRead\fR,
\fIWait\fR or
\fI*\fR\.
An option must be followed by a boolean argument
\fIbool\fR\.
You can use commas to separate individual options\.  If you set an
option to "True", then when the corresponding command is run, fvwm
displays the cursor of the
\fIWAIT\fR
context of the
\fBCursorStyle\fR
command\.  "False" forces to not display the cursor\.  The default is:
.sp
.RS 4
.nf
BusyCursor DynamicMenu False, ModuleSynchronous False, \e
  Read False, Wait False
.fi
.RE
.PP
The \fI*\fR option
refers to all available options\.
.PP
The \fIRead\fR
option controls the \fBPipeRead\fR command\.
.PP
The \fIDynamicMenu\fR
option affects the \fIDynamicPopupAction\fR
and \fIMissingSubmenuFunction\fR
options of the \fBAddToMenu\fR
command\.  If this option is set to "False", then the busy cursor
is not displayed during a dynamic menu command even if this
command is a \fBRead\fR or \fBPipeRead\fR
command and the \fIRead\fR
option is set to "True"\.
.PP
The \fIModuleSynchronous\fR
option affects the \fBModuleSynchronous\fR command\.
If this option is set to "False", then the busy cursor is not
displayed while fvwm waits for a module started by
\fBModuleSynchronous\fR to complete its startup\.
.PP
The \fIWait\fR
option affects only the root cursor\.  During a wait pause the root
cursor is replaced by the busy cursor and fvwm is still fully
functional (you can escape from the pause, see the
\fBEscapeFunc\fR
command)\.  If you want to use this option and if you do not use
the default root cursor, you must set your root cursor with the
\fBCursorStyle\fR command\.
.RE
.TP
\fBClickTime\fR [\fIdelay\fR]
.RS
.\".PP
Specifies the maximum delay in milliseconds between a button press
and a button release for the
\fBFunction\fR
command to consider the action a mouse click\.  The default delay
is 150 milliseconds\.  Omitting the delay value resets the
\fBClickTime\fR
to the default\.
.RE
.TP
\fBColorLimit\fR \fIlimit\fR
.RS
.\".PP
This command is obsolete\.  See the \fB\-\-color\-limit\fR option to fvwm\.
.RE
.TP
\fBColormapFocus\fR FollowsMouse | FollowsFocus
.RS
.\".PP
By default, fvwm installs the colormap of the window that the
cursor is in\.  If you use
.sp
.RS 4
.nf
ColormapFocus \fIFollowsFocus\fR
.fi
.RE
.PP
then the installed colormap is the one for the window that
currently has the keyboard focus\.
.RE
.TP
\fBCursorStyle\fR \fIcontext\fR [\fInum\fR\ |\ \fIname\fR\ |\ None\ |\ Tiny\ |\ \fIfile\fR\ [\fIx\fR\ \fIy\fR]\ [\fIfg\fR\ \fIbg\fR]]
.RS
.\".PP
Defines a new cursor for the specified context\.  Note that this
command can not control the shapes an applications uses, for
example, to indicate that it is busy\.  The various contexts are:
.PP
\fIPOSITION\fR (top_left_corner)
.RS 4
used when initially placing windows
.RE
.PP
\fITITLE\fR (top_left_arrow)
.RS 4
used in a window title\-bar
.RE
.PP
\fIDEFAULT\fR (top_left_arrow)
.RS 4
used in windows that do not set their cursor
.RE
.PP
\fISYS\fR (hand2)
.RS 4
used in one of the title\-bar buttons
.RE
.PP
\fIMOVE\fR (fleur)
.RS 4
used when moving or resizing windows
.RE
.PP
\fIRESIZE\fR (sizing)
.RS 4
used when moving or resizing windows
.RE
.PP
\fIWAIT\fR (watch)
.RS 4
used during certain fvwm commands (see
\fBBusyCursor\fR
for details)
.RE
.PP
\fIMENU\fR (top_left_arrow)
.RS 4
used in menus
.RE
.PP
\fISELECT\fR (crosshair)
.RS 4
used when the user is required to select a window
.RE
.PP
\fIDESTROY\fR (pirate)
.RS 4
used for
\fBDestroy\fR,
\fBClose\fR, and
\fBDelete\fR
commands
.RE
.PP
\fITOP\fR (top_side)
.RS 4
used in the top side\-bar of a window
.RE
.PP
\fIRIGHT\fR (right_side)
.RS 4
used in the right side\-bar of a window
.RE
.PP
\fIBOTTOM\fR (bottom_side)
.RS 4
used in the bottom side\-bar of a window
.RE
.PP
\fILEFT\fR (left_side)
.RS 4
used in the left side\-bar of a window
.RE
.PP
\fITOP_LEFT\fR (top_left_corner)
.RS 4
used in the top left corner of a window
.RE
.PP
\fITOP_RIGHT\fR (top_right_corner)
.RS 4
used in the top right corner of a window
.RE
.PP
\fIBOTTOM_LEFT\fR (bottom_left_corner)
.RS 4
used in the bottom left corner of a window
.RE
.PP
\fIBOTTOM_RIGHT\fR (bottom_right_corner)
.RS 4
used in the bottom right corner of a window
.RE
.PP
\fITOP_EDGE\fR (top_side)
.RS 4
used at the top edge of the screen
.RE
.PP
\fIRIGHT_EDGE\fR (right_side)
.RS 4
used at the right edge of the screen
.RE
.PP
\fIBOTTOM_EDGE\fR (bottom_side)
.RS 4
used at the bottom edge of the screen
.RE
.PP
\fILEFT_EDGE\fR (left_side)
.RS 4
used at the left edge of the screen
.RE
.PP
\fIROOT\fR (left_ptr)
.RS 4
used as the root cursor
.RE
.PP
\fISTROKE\fR (plus)
.RS 4
used during a
\fBStrokeFunc\fR
command\.
.RE
.PP
The defaults are shown in parentheses above\.  If you ever want to
restore the default cursor for a specific context you can omit the
second argument\.
.PP
The second argument is either the numeric value of the cursor as
defined in the include file \fIX11/cursorfont\.h\fR
or its name (without the XC_ prefix)\.  Alternatively, the xpm file
name may be specified\.  The name can also be
\fINone\fR
(no cursor) or
\fITiny\fR
(a single pixel as the cursor)\.
.sp
.RS 4
.nf
# make the kill cursor be XC_gumby (both forms work):
CursorStyle DESTROY 56
CursorStyle DESTROY gumby
.fi
.RE
.PP
Alternatively, the cursor can be loaded from an (XPM, PNG or SVG) image
\fIfile\fR\.  If fvwm is compiled with Xcursor support,
full ARGB is used, and (possibly animated) cursor files made with the
\fBxcursorgen\fR program can be loaded\.  Otherwise the cursor
is converted to monochrome\.
.PP
The optional \fIx\fR and \fIy\fR
arguments (following a \fIfile\fR argument) specifies
the hot\-spot coordinate with 0 0 as the top left corner of the image\.
Coordinates within the image boundary are valid and overrides any hot\-spot
defined in the (XPM/Xcursor) image file\.  An invalid or undefined hot\-spot
is placed in the center of the image\.
.sp
.RS 4
.nf
CursorStyle ROOT cursor_image\.png 0 0
.fi
.RE
.PP
The optional
\fIfg\fR and \fIbg\fR
arguments specify the foreground and background colors for the
cursor, defaulting to black and white (reverse video compared
to the actual bitmap)\.  These colors are only used with monochrome
cursors\.  Otherwise they are silently ignored\.
.sp
.RS 4
.nf
CursorStyle ROOT nice_arrow\.xpm yellow black
.fi
.RE
.RE
.TP
\fBDefaultColors\fR [\fIforeground\fR] [\fIbackground\fR]
.RS
.\".PP
\fBDefaultColors\fR
sets the default foreground and background colors used in
miscellaneous windows created by fvwm, for example in the geometry
feedback windows during a move or resize operation\.  If you do not
want to change one color or the other, use \- as its color name\.  To
revert to the built\-in default colors omit both color names\.  Note
that the default colors are not used in menus, window titles or
icon titles\.
.RE
.TP
\fBDefaultColorset\fR [\fInum\fR]
.RS
.\".PP
\fBDefaultColorset\fR
sets the colorset used by the windows controlled by the
\fBDefaultColors\fR
command\.  To revert back to the
\fBDefaultColors\fR
colors use
.sp
.RS 4
.nf
DefaultColorset \-1
.fi
.RE
.PP
or any variant of the
\fBDefaultColors\fR
command\.
.RE
.TP
\fBDefaultFont\fR [\fIfontname\fR]
.RS
.\".PP
\fBDefaultFont\fR
sets the default font to font
\fIfontname\fR\.
The default font is used by fvwm whenever no other font has been
specified\.  To reset the default font to the built\-in default,
omit the argument\.  The default font is used for menus, window
titles, icon titles as well as the geometry feedback windows
during a move or resize operation\.  To override the default font
in a specific context, use the
\fBStyle\fR * \fIFont\fR,
\fBStyle\fR * \fIIconFont\fR, or
\fBMenuStyle\fR
commands\.
.RE
.TP
\fBDefaultIcon\fR \fIfilename\fR
.RS
.\".PP
Sets the default icon which is used if a window has neither an
client\-supplied icon nor an icon supplied via the
\fIIcon\fR
option of the
\fBStyle\fR
command\.
.RE
.TP
\fBDefaultLayers\fR \fIbottom\fR \fIput\fR \fItop\fR
.RS
.\".PP
Changes the layers that are used for the
\fIStaysOnBottom\fR,
\fIStaysPut\fR,
\fIStaysOnTop\fR
\fBStyle\fR
options\.  Initially, the layers 2, 4 and 6 are used\.
.RE
.TP
\fBDeschedule\fR [\fIcommand_id\fR]
.RS
.\".PP
Removes all commands that were scheduled with the id
\fIcommand_id\fR
with the
\fBSchedule\fR
command from the list of commands to be executed unless they were
already executed\.  If the
\fIcommand_id\fR
is omitted, the value of the variable $[schedule\.last] is used as
the id\.
.RE
.TP
\fBEmulate\fR Fvwm | Mwm | Win
.RS
.\".PP
This command is a catch all for how miscellaneous things are done
by fvwm\.  Right now this command affects where the move/resize
feedback window appears and how window placement is aborted\.  To
have more Mwm\- or Win\-like behavior you can call
\fBEmulate\fR
with
\fIMwm\fR or
\fIWin\fR
as its argument\.  With
Mwm
resize and move feedback windows are in the center of the screen,
instead of the upper left corner\.
This also affects how manual placement is aborted\.
See the \fIManualPlacement\fR description\.
.RE
.TP
\fBEscapeFunc\fR
.RS
.\".PP
By default the key sequence
.SM Ctrl-Alt-Escape
allows for escaping from a
\fBWait\fR
pause and from a locked
\fBModuleSynchronous\fR
command\.  The
\fBEscapeFunc\fR
command used with the
\fBKey\fR
command allows for configuring this key sequence\.  An example:
.sp
.RS 4
.nf
\fBKey\fR Escape A MC \-
\fBKey\fR Escape A  S EscapeFunc
.fi
.RE
.PP
replaces the
.SM Ctrl-Alt-Escape
key sequence with
.SM Shift-Escape
for aborting a
\fBWait\fR
pause and
\fBModuleSynchronous\fR
command\.
\fBEscapeFunc\fR
used outside the
\fBKey\fR
command does nothing\.
.RE
.TP
\fBFakeClick\fR [\fIcommand\fR\ \fIvalue\fR] ...
.RS
.\".PP
This command is mainly intended for debugging fvwm and no
guarantees are made that it works for you\.
\fIFakeClick\fR
can simulate mouse button press and release events and pass them
to fvwm or the applications\.  The parameters are a list of
commands which consist of pairs of
\fIcommand\fR
tokens and integer
\fIvalues\fR,
The
\fIpress\fR and \fIrelease\fR
commands are followed by the appropriate mouse button number and
generate a button press or release event on the window below the
pointer\.  The
\fIwait\fR
commands pauses fvwm for the given number of milliseconds\.  The
\fImodifiers\fR
command simulates pressing or releasing modifier keys\.  The values
1 to 5 are mapped to
.SM Mod1
to
.SM Mod5
while 6, 7 and 8 are mapped to
.SM Shift
,
.SM Lock
and
.SM Control
\.
The modifier is set for any further button events\.  To release a
modifier key, use the corresponding negative number\.  The
\fIdepth\fR
command determines to which window the button events are
sent\.  With a depth of 1, all events go to the root window,
regardless of the pointer's position\.  With 2, the event is passed
to the top level window under the pointer which is usually the
frame window\.  With 3, events go to the client window\.  Higher
numbers go to successive sub windows\.  Zero (0) goes to the
smallest window that contains the pointer\.  Note that events
propagate upward\.
.sp
.RS 4
.nf
FakeClick depth 2 press 1 wait 250 release 1
.fi
.RE
.PP
This simulates a click with button 1 in the parent window (depth
2) with a delay of 250 milliseconds between the press and the
release\.
Note: all command names can be abbreviated with their first letter\.
.RE
.TP
\fBFakeKeypress\fR [\fIcommand\fR\ \fIvalue\fR] ...
.RS
.\".PP
This command is mainly intended for debugging fvwm and no
guarantees are made that it works for you\.
\fBFakeKeypress\fR
can simulate key press and release events and pass them
to fvwm or applications\.  The parameters are a list of
commands which consist of pairs of command tokens and values\.
The
\fIpress\fR and
\fIrelease\fR
commands are followed by a key name\.
The key name is a standard X11 key name as defined in
\fI/usr/include/X11/keysymdef\.h\fR,
(without the
\fIXK_\fR
prefix), or the keysym database
\fI/usr/X11R6/lib/X11/XKeysymDB\fR\.
The
\fIwait\fR,
\fImodifiers\fR and
\fIdepth\fR
commands are the same as those used by
\fBFakeClick\fR\.
.PP
Save all GVim sessions with: "Esc:w\en"
.sp
.RS 4
.nf
\fBAll\fR (gvim) FakeKeypress press Escape \e
                        press colon \e
                        press w \e
                        press Return
.fi
.RE
.PP
Save & exit all GVim sessions with: "Esc:wq\en"
.sp
.RS 4
.nf
\fBAll\fR (gvim) FakeKeypress press Escape \e
                        press colon \e
                        press w \e
                        press q \e
                        press Return
.fi
.RE
.PP
Send A to a specific window:
.sp
.RS 4
.nf
\fBWindowId\fR 0x3800002 FakeKeypress press A
.fi
.RE
.PP
Note: all command names can be abbreviated with their first letter\.
.RE
.TP
\fBGlobalOpts\fR [\fIoptions\fR]
.RS
.\".PP
This command is obsolete\.  Please
replace the global options in your configuration file according to
the following table:
.sp
.RS 4
.nf
GlobalOpts \fIWindowShadeShrinks\fR
  \-\->
\fBStyle\fR * \fIWindowShadeShrinks\fR

GlobalOpts \fIWindowShadeScrolls\fR
  \-\->
\fBStyle\fR * \fIWindowShadeScrolls\fR

GlobalOpts \fISmartPlacementIsReallySmart\fR
  \-\->
\fBStyle\fR * \fIMinOverlapPlacement\fR

GlobalOpts \fISmartPlacementIsNormal\fR
  \-\->
\fBStyle\fR * \fITileCascadePlacement\fR

GlobalOpts \fIClickToFocusDoesntPassClick\fR
  \-\->
\fBStyle\fR * \fIClickToFocusPassesClickOff\fR

GlobalOpts \fIClickToFocusPassesClick\fR
  \-\->
\fBStyle\fR * \fIClickToFocusPassesClick\fR

GlobalOpts \fIClickToFocusDoesntRaise\fR
  \-\->
\fBStyle\fR * \fIClickToFocusRaisesOff\fR

GlobalOpts \fIClickToFocusRaises\fR
  \-\->
\fBStyle\fR * \fIClickToFocusRaises\fR

GlobalOpts \fIMouseFocusClickDoesntRaise\fR
  \-\->
\fBStyle\fR * \fIMouseFocusClickRaisesOff\fR

GlobalOpts \fIMouseFocusClickRaises\fR
  \-\->
\fBStyle\fR * \fIMouseFocusClickRaises\fR

GlobalOpts \fINoStipledTitles\fR
  \-\->
\fBStyle\fR * !\fIStippledTitle\fR

GlobalOpts \fIStipledTitles\fR
  \-\->
\fBStyle\fR * \fIStippledTitle\fR

GlobalOpts \fICaptureHonorsStartsOnPage\fR
  \-\->
\fBStyle\fR * \fICaptureHonorsStartsOnPage\fR

GlobalOpts \fICaptureIgnoresStartsOnPage\fR
  \-\->
\fBStyle\fR * \fICaptureIgnoresStartsOnPage\fR

GlobalOpts \fIRecaptureHonorsStartsOnPage\fR
  \-\->
\fBStyle\fR * \fIRecaptureHonorsStartsOnPage\fR

GlobalOpts \fIRecaptureIgnoresStartsOnPage\fR
  \-\->
\fBStyle\fR * \fIRecaptureIgnoresStartsOnPage\fR

GlobalOpts \fIActivePlacementHonorsStartsOnPage\fR
  \-\->
\fBStyle\fR * \fIManualPlacementHonorsStartsOnPage\fR

GlobalOpts \fIActivePlacementIgnoresStartsOnPage\fR
  \-\->
\fBStyle\fR * \fIManualPlacementIgnoresStartsOnPage\fR

GlobalOpts \fIRaiseOverNativeWindows\fR
  \-\->
\fBBugOpts\fR \fIRaiseOverNativeWindows\fR on

GlobalOpts \fIIgnoreNativeWindows\fR
  \-\->
\fBBugOpts\fR \fIRaiseOverNativeWindows\fR off

.fi
.RE
.RE
.TP
\fBHilightColor\fR \fItextcolor\fR \fIbackgroundcolor\fR
.RS
.\".PP
This command is obsoleted by the
\fBStyle\fR
options
\fIHilightFore\fR and
\fIHilightBack\fR\.
Please use
.sp
.RS 4
.nf
\fBStyle\fR * \fIHilightFore\fR textcolor, \fIHilightBack\fR backgroundcolor
.fi
.RE
.PP
instead\.
.RE
.TP
\fBHilightColorset\fR [\fInum\fR]
.RS
.\".PP
This command is obsoleted by the
\fBStyle\fR
option
\fIHilightColorset\fR\.
Please use
.sp
.RS 4
.nf
\fBStyle\fR * \fIHilightColorset\fR num
.fi
.RE
.PP
instead\.
.RE
.TP
\fBIconFont\fR [\fIfontname\fR]
.RS
.\".PP
This command is obsoleted by the
\fBStyle\fR
option
\fIIconFont\fR\.
Please use
.sp
.RS 4
.nf
\fBStyle\fR * IconFont fontname
.fi
.RE
.PP
instead\.
.RE
.TP
\fBIconPath\fR \fIpath\fR
.RS
.\".PP
This command is obsolete\.  Please use
\fBImagePath\fR
instead\.
.RE
.TP
\fBImagePath\fR \fIpath\fR
.RS
.\".PP
Specifies a colon separated list of directories in which to search
for images (both monochrome and pixmap)\.  To find an image given
by a relative pathname, fvwm looks into each directory listed in
turn, and uses the first file found\.
.PP
If a directory is given in the form "/some/dir;\.ext", this means
all images in this directory have the extension "\.ext" that should
be forced\.  The original image name (that may contain another
extension or no extension at all) is not probed, instead "\.ext" is
added or replaces the original extension\.  This is useful, for
example, if a user has some image directories with "\.xpm" images
and other image directories with the same names, but "\.png"
images\.
.PP
The
\fIpath\fR
may contain environment variables such as
\fI$HOME\fR (or \fI${HOME}\fR)\.
Further, a '+' in the
\fIpath\fR
is expanded to the previous value of the path, allowing appending
or prepending to the path easily\.
.PP
For example:
.sp
.RS 4
.nf
ImagePath $HOME/icons:+:/usr/include/X11/bitmaps
.fi
.RE
.PP
Note: if the
\fBFvwmM4\fR
module is used to parse your
\fIconfig\fR
files, then m4 may want to mangle the word "include" which
frequently shows up in the
\fBImagePath\fR
command\.  To fix this one may add
.sp
.RS 4
.nf
undefine(`include')
.fi
.RE
.PP
prior to the
\fBImagePath\fR
command, or better: use the
\fB\-m4\-prefix\fR
option to force all
\fBm4\fR
directives to have a prefix of "m4_" (see the
\fBFvwmM4\fR
man page)\.
.RE
.TP
\fBLocalePath\fR \fIpath\fR
.RS
.\".PP
Specifies a colon separated list of "locale path" in which to
search for string translations\.  A locale path is constituted by a
directory path and a text domain separated by a semicolon
(';')\.  As an example the default locale path is:
.sp
.RS 4
.nf
/install_prefix/share/locale;fvwm
.fi
.RE
.PP
where install_prefix is the fvwm installation directory\.  With such
a locale path translations are searched for in
.sp
.RS 4
.nf
/install_prefix/share/locale/lang/LC_MESSAGES/fvwm\.mo
.fi
.RE
.PP
where
\fIlang\fR
depends on the locale\.  If no directory is given the default
directory path is assumed\.  If no text domain is given,
\fBfvwm\fR
is assumed\.  Without argument the default locale path is restored\.
.PP
As for the
\fBImagePath\fR
command,
\fIpath\fR
may contain environment variables and a '+' to append or prepend
the locale path easily\.
.PP
For example, the fvwm\-themes package uses
.sp
.RS 4
.nf
LocalePath ";fvwm\-themes:+"
.fi
.RE
.PP
to add locale catalogs\.
.PP
The default fvwm catalog contains a few strings used by the fvwm
executable itself (Desk and Geometry) and strings used in some
default configuration files and
\fBFvwmForm\fR
configuration\.  You can take a look at the po/ subdirectory of the
fvwm source to get the list of the strings with a possible
translation in various languages\.  At present, very few languages
are supported\.
.PP
The main use of locale catalogs is via the "$[gt\.string]"
parameter:
.sp
.RS 4
.nf
\fBDestroyMenu\fR MenuFvwmWindowOps
\fBAddToMenu\fR   MenuFvwmWindowOps "$[gt\.Window Ops]" \fBTitle\fR
+ "$[gt\.&Move]"              \fBMove\fR
+ "$[gt\.&Resize]"            \fBResize\fR
+ "$[gt\.R&aise]"             \fBRaise\fR
+ "$[gt\.&Lower]"             \fBLower\fR
+ "$[gt\.(De)&Iconify]"       \fBIconify\fR
+ "$[gt\.(Un)&Stick]"         \fBStick\fR
+ "$[gt\.(Un)Ma&ximize]"      \fBMaximize\fR
+ "" \fBNop\fR
+ "$[gt\.&Close]"             \fBClose\fR
+ "$[gt\.&Destroy]"           \fBDestroy\fR
.fi
.RE
.PP
gives a menu in the locale languages if translations are
available\.
.PP
Note that the
\fBFvwmTaskBar\fR
module has its own catalog and that the
\fBFvwmScript\fR
module has a set of special instructions for string
translation\.  It is out of the scope of this discussion to explain
how to build locale catalogs\.  Please refer to the GNU gettext
documentation\.
.RE
.TP
\fBPixmapPath\fR \fIpath\fR
.RS
.\".PP
This command is obsolete\.  Please use
\fBImagePath\fR
instead\.
.RE
.TP
\fBPrintInfo\fR \fIsubject\fR [\fIverbose\fR]
.RS
.\".PP
Print information on
\fIsubject\fR
on stderr\.  An optional integer argument
\fIverbose\fR
defines the level of information which is given\.
The current valid subjects are:
.PP
\fIColors\fR
which prints information about the colors used by fvwm\.  This useful
on screens which can only display 256 (or less) colors at once\.
If
\fIverbose\fR
is one or greater the palette used by fvwm is printed\.
If you have a limited color palette, and you run out of colors,
this command might be helpful\.
.PP
\fIImageCache\fR
which prints information about the images loaded by fvwm\.  If
\fIverbose\fR
is one or greater all images in the cache will be listed together
with their respective reuse\.
.PP
\fILocale\fR
which prints information on your locale and the fonts that fvwm
used\.
\fIverbose\fR
can be 1 or 2\.
.PP
\fInls\fR
which prints information on the locale catalogs that fvwm used
.PP
\fIstyle\fR
which prints information on fvwm styles\.
\fIverbose\fR
can be 1\.
.PP
\fIbindings\fR
which prints information on all the bindings fvwm has: key, mouse and
stroke bindings\.
\fIverbose\fR
has no effect with this option\.
.RE
.TP
\fBRepeat\fR
.RS
.\".PP
When the
\fBRepeat\fR
command is invoked, the last command that was executed by fvwm is
executed again\.  This happens regardless of whether it was
triggered by user interaction, a module or by an X event\.
Commands that are executed from a function defined with the
\fBFunction\fR
command, from the
\fBRead\fR or
\fBPipeRead\fR
commands or by a menu are not repeated\.  Instead, the function,
menu or the
\fBRead\fR or
\fBPipeRead\fR
command is executed again\.
.RE
.TP
\fBSchedule\fR [Periodic] \fIdelay_ms\fR [\fIcommand_id\fR] \fIcommand\fR
.RS
.\".PP
The
\fIcommand\fR
is executed after about
\fIdelay_ms\fR
milliseconds\.  This may be useful in some tricky setups\.  The
\fIcommand\fR
is executed in the same context window as the
\fBSchedule\fR
command\.  An optional integer argument
\fIcommand_id\fR
may be given in decimal, hexadecimal or octal format\.  This id can
be used with the
\fBDeschedule\fR
command to remove the scheduled command before it is executed\.  If
no id is given, fvwm uses negative id numbers, starting with \-1
and decreasing by one with each use of the
\fBSchedule\fR
command\.
Note that the
\fBSchedule\fR
command and its arguments undergo the usual command line
expansion, and, when
\fIcommand\fR
is finally executed, it is expanded again\.  It may therefore be
necessary to quote the parts of the command that must not be
expanded twice\.
.PP
Note: A window's id as it is returned with $[w\.id] can be used as
the
\fIcommand_id\fR\.
Example:
.sp
.RS 4
.nf
\fBCurrent\fR Schedule 1000 $[w\.id] \fBWindowShade\fR
.fi
.RE
.PP
The
\fBSchedule\fR
command also supports the optional keyword
\fIPeriodic\fR
which indicates that the
\fIcommand\fR
should be executed every
\fIdelay_ms\fR\.
Example:
.sp
.RS 4
.nf
Schedule Periodic 10000 \fBPipeRead\fR '[ \-N "$MAIL" ] && echo \e
     Echo You have mail'
.fi
.RE
.PP
Use the
\fBDeschedule\fR
command to stop periodic commands\.
.RE
.TP
\fBState\fR \fIstate\fR [\fIbool\fR]
.RS
.\".PP
Sets, clears or toggles one of the 32 user defined states which
are associated with each window\.  The
\fIstate\fR
is a number ranging from 0 to 31\.  The states have no meaning in
fvwm, but they can be checked in conditional commands like
\fBNext\fR
with the
\fIState\fR
condition\.  The optional argument
\fIbool\fR
is a boolean argument\.  "True" sets the given state, while "False"
clears it\.  Using "toggle" switches to the opposite state\.  If the
\fIbool\fR
argument is not given, the state is toggled\.
.RE
.TP
\fBWindowFont\fR [\fIfontname\fR]
.RS
.\".PP
This command is obsoleted by the
\fBStyle\fR
option
\fIFont\fR\.
Please use
.sp
.RS 4
.nf
\fBStyle\fR * \fIFont\fR fontname
.fi
.RE
.PP
instead\.
.RE
.TP
\fBWindowList\fR [(\fIconditions\fR)] [\fIposition\fR] [\fIoptions\fR] [\fIdouble\-click\-action\fR]
.RS
.\".PP
Generates a pop\-up menu (and pops it up) in which the title and
geometry of each of the windows currently on the desktop are
shown\.
.PP
The format of the geometry part is:
\fIdesk\fR(\fIlayer\fR): \fIx\-geometry\fR \fIsticky\fR,
where
\fIdesk\fR and \fIlayer\fR
are the corresponding numbers and
\fIsticky\fR
is empty or a capital S\.  The geometry of iconified windows is
shown in parentheses\.  Selecting an item from the window list
pop\-up menu causes the interpreted function "WindowListFunc" to be
run with the window id of that window passed in as $0\.  The default
"WindowListFunc" looks like this:
.sp
.RS 4
.nf
\fBAddToFunc\fR WindowListFunc
+ I \fBIconify\fR off
+ I \fBFlipFocus\fR
+ I \fBRaise\fR
+ I \fBWarpToWindow\fR 5p 5p
.fi
.RE
.PP
You can destroy the built\-in "WindowListFunc" and create your own
if these defaults do not suit you\.
.PP
The window list menu uses the "WindowList" menu style if it is
defined (see
\fBMenuStyle\fR
command)\.  Otherwise the default menu style is used\.  To switch
back to the default menu style, issue the command
.sp
.RS 4
.nf
\fBDestroyMenuStyle\fR WindowList
.fi
.RE
.PP
Example:
.sp
.RS 4
.nf
\fBMenuStyle\fR WindowList \fISelectOnRelease\fR Meta_L
.fi
.RE
.PP
The
\fIconditions\fR
can be used to exclude certain windows from the window
list\.  Please refer to the
\fBCurrent\fR
command for details\.  Only windows that match the given conditions
are displayed in the window list\.  The
\fIoptions\fR
below work vice versa: windows that would otherwise not be
included in the window list can be selected with them\.  The
\fIconditions\fR
always override the
\fIoptions\fR\.
.PP
The
\fIposition\fR
arguments are the same as for
\fBMenu\fR\.
The command
\fIdouble\-click\-action\fR
is invoked if the user double\-clicks (or hits the key rapidly
twice if the menu is bound to a key) when bringing the window
list\.  The
\fIdouble\-click\-action\fR
must be quoted if it consists of more than one word\.
.PP
The
\fIdouble\-click\-action\fR
is useful to define a default window if you have bound the window
list to a key (or button) like this:
.sp
.RS 4
.nf
# Here we call an existing function, but
# it may be different\.  See the default
# WindowListFunc definition earlier in this
# man page\.
\fBAddToFunc\fR SwitchToWindow
+ I WindowListFunc

\fBKey\fR Tab A M WindowList "Prev SwitchToWindow"
.fi
.RE
.PP
Hitting
.SM Alt-Tab
once it brings up the window list, if you hit it twice the focus
is flipped between the current and the last focused window\.  With
the proper
\fISelectOnRelease\fR
menu style (see example above) a window is selected as soon as you
release the
.SM Alt
key\.
.PP
The
\fIoptions\fR
passed to WindowList are separated by commas and can be
\fIGeometry\fR / \fINoGeometry\fR / \fINoGeometryWithInfo\fR,
\fINoDeskNum,\fR
\fINoLayer,\fR
\fINoNumInDeskTitle\fR,
\fINoCurrentDeskTitle\fR,
\fIMaxLabelWidth width\fR,
\fITitleForAllDesks\fR,
\fIFunction funcname\fR,
\fIDesk desknum\fR,
\fICurrentDesk\fR,
\fINoIcons\fR / \fIIcons\fR / \fIOnlyIcons\fR,
\fINoNormal\fR / \fINormal\fR / \fIOnlyNormal\fR,
\fINoSticky\fR / \fISticky\fR / \fIOnlySticky\fR,
\fINoStickyAcrossPages\fR / \fIStickyAcrossPages\fR / \fIOnlyStickyAcrossPages\fR,
\fINoStickyAcrossDesks\fR / \fIStickyAcrossDesks\fR / \fIOnlyStickyAcrossDesks\fR,
\fINoOnTop\fR / \fIOnTop\fR / \fIOnlyOnTop\fR,
\fINoOnBottom\fR / \fIOnBottom\fR / \fIOnlyOnBottom\fR,
\fILayer m [n]\fR,
\fIUseSkipList\fR / \fIOnlySkipList\fR,
\fINoDeskSort\fR,
\fIReverseOrder\fR,
\fICurrentAtEnd\fR,
\fIIconifiedAtEnd\fR,
\fIUseIconName\fR,
\fIAlphabetic\fR / \fINotAlphabetic\fR,
\fISortByResource\fR,
\fISortByClass\fR,
\fINoHotkeys\fR,
\fISelectOnRelease\fR\.
.PP
(Note \- normal means not iconic, sticky, or on top)
.PP
With the
\fISortByResource\fR
option windows are alphabetically sorted first by resource class,
then by resource name and then by window name (or icon name if
\fIUseIconName\fR
is specified)\.
\fIReverseOrder\fR
also works in the expected manner\.
.PP
With the
\fISortByClass\fR
option windows are sorted just like with
\fISortByResource\fR,
but the resource name is not taken into account, only the resource
class\.
.PP
The
\fISelectOnRelease\fR
option works exactly like the
\fBMenuStyle\fR
option with the same name, but overrides the option given in a
menu style\.  By default, this option is set to the left
.SM Alt
key\.  To switch it off, use
\fISelectOnRelease\fR
without a key name\.
.PP
If you pass in a function via
\fBFunction\fR funcname,
it is called within a window context of the selected window:
.sp
.RS 4
.nf
\fBAddToFunc\fR IFunc I \fBIconify\fR toggle
WindowList \fBFunction\fR IFunc, NoSticky, CurrentDesk, NoIcons
.fi
.RE
.PP
If you use the
\fILayer\fR
\fIm\fR
[\fIn\fR]
option, only windows in layers between m and n are displayed\.  n
defaults to m\.  With the
\fIReverseOrder\fR
option the order of the windows in the list is reversed\.
.PP
With the
\fICurrentAtEnd\fR
option the currently focused window (if any) is shown at the
bottom of the list\.  This is mostly intended for simulating the
Alt\-Tab behavior in another GUI\.
.PP
\fIIconifiedAtEnd\fR
makes iconified windows be moved to the end of the list\.  This is
also from another GUI\.
.PP
The
\fINoGeometry\fR
option causes fvwm to not display the geometries as well as
the separators which indicate the different desktops\.
\fINoGeometryWithInfo\fR
removes the geometries, but keep the desktop information
and indicates iconic windows\.
\fINoDeskNum\fR
causes fvwm to not display the desktop number in the geometry
or before the window title with the
\fINoGeometryWithInfo\fR
option\.
\fINoNumInDeskTitle\fR
is only useful if a desktop name is defined with the
\fBDesktopName\fR
command\.  It causes fvwm to not display the desktop number before
the desktop name\.  By default, the WindowList menu have a title
which indicates the current desk or the selected desktop if the
\fIDesk\fR
condition is used\.  The
\fINoCurrentDeskTitle\fR
option removes this title\.
\fITitleForAllDesks\fR
causes fvwm to add a menu title with the desk name and/or number
before each group of windows on the same desk\.
With
\fINoLayer\fR,
the layer of the window is not diplayed\.  The options
\fIShowPage\fR,
\fIShowPageX\fR and
\fIShowPageY\fR
enable displaying the page of the window rounded multiples of the
display size\.
With
\fIShowScreen\fR,
the window's Xinerama screen number is displayed\.
.PP
The
\fIMaxLabelWidth\fR
option takes the number of characters to print as its argument\.
No more than that many characters of the window name are visible\.
.PP
If you wanted to use the
\fBWindowList\fR
as an icon manager, you could invoke the following:
.sp
.RS 4
.nf
WindowList OnlyIcons, Sticky, OnTop, Geometry
.fi
.RE
.PP
(Note \- the
\fIOnly\fR
options essentially wipe out all other ones\.\.\. but the
\fIOnlyListSkip\fR
option which just causes
\fBWindowList\fR
to only consider the windows with
\fIWindowListSkip\fR
style\.)
.RE
.TP
\fBXSync\fR
.RS
.\".PP
When
\fBXSync\fR
is called, the X function with the same name is used to send all
pending X requests to the server\.  This command is intended for
debugging only\.
.RE
.TP
\fBXSynchronize\fR [bool]
.RS
.\".PP
The
\fBXSynchronize\fR
command controls whether X requests are sent to the X server
immediately or not\.  Normally, requests are sent in larger batches
to save unnecessary communication\.  To send requests immediately,
use "True" as the argument, to disable this use "False" or to
toggle between both methods use "Toggle" or omit the
\fBbool\fR
argument\.  Fvwm defaults to synchronized requests when started
with the
\fB\-\-debug\fR
option\.  This command is intended for debugging only\.
.RE
.TP
\fB+\fR
.RS
.\".PP
Used to continue adding to the last specified decor, function or
menu\.  See the discussion for
\fBAddToDecor\fR,
\fBAddToFunc\fR, and
\fBAddToMenu\fR\.
.RE
.SS Window Movement and Placement
.TP
\fBAnimatedMove\fR \fIx\fR \fIy\fR [Warp]
.RS
.\".PP
Move a window in an animated fashion\.  Similar to
\fBMove\fR
command\.  The options are the same, except they are required,
since it doesn't make sense to have a user move the window
interactively and animatedly\.  If the optional argument
\fIWarp\fR
is specified the pointer is warped with the window\.
.RE
.TP
\fBHideGeometryWindow\fR [Never | Move | Resize]
.RS
.\".PP
Hides the position or size window that is usually shown when a
window is moved or resized interactively\.  To switch it off only
for move or resize operations the optional parameters
\fIMove\fR and
\fIResize\fR
can be used respectively\.  To switch both on again use the
\fINever\fR
option\.
.RE
.TP
\fBLayer\fR [\fIarg1\fR\ \fIarg2\fR] | [default]
.RS
.\".PP
Puts the current window in a new layer\.  If
\fIarg1\fR
is non zero then the next layer is the current layer number plus
\fIarg1\fR\.
If
\fIarg1\fR
is zero then the new layer is
\fIarg2\fR\.
.PP
As a special case,
\fIdefault\fR
puts the window in its default layer, i\.e\. the layer it was
initially in\.  The same happens if no or invalid arguments are
specified\.
.RE
.TP
\fBLower\fR
.RS
.\".PP
Allows the user to lower a window\.  Note that this lowers a window
only in its layer\.  To bring a window to the absolute bottom, use
.sp
.RS 4
.nf
\fBAddToFunc\fR lower\-to\-bottom
 + I \fBLayer\fR 0 0
 + I Lower
.fi
.RE
.RE
.TP
\fBMove\fR [[screen\ \fIscreen\fR]\ [w\ |\ m]\fIx\fR[p\ |\ w]\ ...\ [w\ |\ m]\fIy\fR[p\ |\ w]\ ...\ [Warp]] | [pointer]
.RS
.\".PP
Allows the user to move a window\.  If called from somewhere in a
window or its border, then that window is moved\.  If called from
the root window then the user is allowed to select the target
window\.
.PP
If the literal option \fIscreen\fR followed by a
\fIscreen\fR
argument is specified, the coordinates are interpreted as relative
to the given screen\.  The width and height of the screen are used
for the calculations instead of the display dimensions\.  The
\fIscreen\fR
as interpreted as in the
\fBMoveToScreen\fR
command\.
If the optional argument
\fIWarp\fR
is specified the pointer is warped with the window\.  If the single
argument
\fIpointer\fR
is given, the top left corner of the window is moved to the
pointer position before starting the operation; this is mainly
intended for internal use by modules like
\fBFvwmPager\fR\.
.PP
The operation can be aborted with 
.SM Escape
or any mouse
button not set to place the window\.  By default mouse button 2 is set to cancel
the move operation\.  To change this you may use the
\fBMouse\fR
command with special context 'P' for Placement\.
.PP
The window condition
\fIPlacedByButton\fR
can be used to check if a specific button was pressed to place the
window (see
\fBCurrent\fR
command)\.
.PP
If the optional arguments
\fIx\fR and
\fIy\fR
are provided, then the window is moved immediately without user
interaction\.  Each argument can specify an absolute or relative
position from either the left/top or right/bottom of the screen\.
By default, the numeric value given is interpreted as a percentage
of the screen width/height, but a trailing '\fIp\fR'
changes the interpretation to mean pixels, while a trailing '\fIw\fR'
means precent of the window width/height\.
To move the window
relative to its current position, add the '\fIw\fR'
(for "window") prefix before the
\fIx\fR and/or \fIy\fR
value\.  To move the window to a position relative to the current
location of the pointer, add the '\fIm\fR'
(for "mouse") prefix\.  To leave either coordinate unchanged,
"\fIkeep\fR" can be specified in place of
\fIx\fR or \fIy\fR\.


For advanced uses, the arguments
\fIx\fR and \fIy\fR
can be used multiple times, but without the prefix '\fIm\fR' or '\fIw\fR'\.
(See complex examples below)\.
.PP
Simple Examples:
.sp
.RS 4
.nf
# Interactive move
\fBMouse\fR 1 T A Move
# Move window to top left is at (10%,10%)
\fBMouse\fR 2 T A Move 10 10
# Move top left to (10pixels,10pixels)
\fBMouse\fR 3 T A Move 10p 10p
.fi
.RE
.PP
More complex examples (these can be bound as actions to
keystrokes, etc\.; only the command is shown, though):
.sp
.RS 4
.nf
# Move window so bottom right is at bottom
# right of screen
Move \-0 \-0

# Move window so top left corner is 10 pixels
# off the top left screen edge
Move +\-10 +\-10

# Move window 5% to the right, and to the
# middle vertically
Move w+5 50

# Move window up 10 pixels, and so left edge
# is at x=40 pixels
Move 40p w\-10p

# Move window to the mouse pointer location
Move m+0 m+0

# Move window to center of screen (50% of screen
# poition minus 50% of widow size)\.
Move 50\-50w 50\-50w
.fi
.RE
.PP
Note: In order to obtain moving windows which do not snap
to screen, with interactive move, hold down \fIAlt\fR
whilst moving the window to disable snap attraction if it's defined\.
.PP
See also the
\fBAnimatedMove\fR
command\.
.RE
.TP
\fBMoveToDesk\fR [prev | \fIarg1\fR\ [\fIarg2\fR]\ [\fImin\fR\ \fImax\fR]]
.RS
.\".PP
Moves the selected window to another desktop\.  The arguments are
the same as for the
\fBGotoDesk\fR
command\.  Without any arguments, the window is moved to the
current desk\.
\fBMoveToDesk\fR
is a replacement for the obsolete
\fBWindowsDesk\fR
command, which can no longer be used\.
.RE
.TP
\fBMoveThreshold\fR [\fIpixels\fR]
.RS
.\".PP
When the user presses a mouse button upon an object fvwm waits to
see if the action is a click or a drag\.  If the mouse moves by
more than
\fIpixels\fR
pixels it is assumed to be a drag\.
.PP
Previous versions of fvwm hardwired
\fIpixels\fR
to 3, which is now the default value\.  If
\fIpixels\fR
is negative or omitted the default value (which might be increased
when 16000x9000 pixel displays become affordable) is restored\.
.RE
.TP
\fBMoveToPage\fR [\fIoptions\fR]\ [\fIx\fR[p\ |\ w]\ \fIy\fR[p\ |\ w]] | [prev]
.RS
.\".PP
Moves the selected window to another page
(\fIx\fR,\fIy\fR)\.  The
upper left page is (0,0), the upper right is (M,0), where M is one
less than the current number of horizontal pages specified in the
\fBDesktopSize\fR
command\.  Similarly the lower left page is (0,N), and the lower
right page is (M,N)\.  Negative page numbers refer to pages from
the rightmost/lowest page\.  If
\fIx\fR and
\fIy\fR
are not given, the window is moved to the current page (a window
that has the focus but is off\-screen can be retrieved with this)\.
Moving windows to a page relative to the current page can be
achieved by adding a trailing '\fIp\fR'
after any or both numerical arguments\.  To move the window
relative to its current location, add a trailing '\fIw\fR'\.
To move a window to the previous page use
\fIprev\fR
as the single argument\.
.PP
Windows are usually not moved beyond desk boundaries\.
.PP
Possible
\fIoptions\fR
are
\fIwrapx\fR and
\fIwrapy\fR
to wrap around the x or y coordinate when the window is moved
beyond the border of the desktop\.  For example, with
\fIwrapx\fR,
when the window moves past the right edge of the desktop, it
reappears on the left edge\.  The options
\fInodesklimitx\fR and
\fInodesklimity\fR
allow moving windows beyond the desk boundaries in x and y
direction (disabling the
\fIwrapx\fR and \fIwrapy\fR
options)\.
.PP
Examples:
.sp
.RS 4
.nf
# \fBMove\fR window to page (2,3)
MoveToPage 2 3

# \fBMove\fR window to lowest and rightmost page
MoveToPage \-1 \-1

# \fBMove\fR window to last page visited
MoveToPage prev

# \fBMove\fR window two pages to the right and one
# page up, wrap at desk boundaries
MoveToPage wrapx wrapy +2p \-1p
.fi
.RE
.RE
.TP
\fBMoveToScreen\fR [\fIscreen\fR]
.RS
.\".PP
Moves the selected window to another Xinerama screen\.  The
\fIscreen\fR
argument can be '\fIp\fR' for the primary screen, '\fIc\fR' for the current
screen (containing the mouse pointer), '\fIw\fR' for the screen containing the center of
+the the context window, '\fIg\fR' for the global screen
or the screen number itself (counting from zero)\.
.RE
.TP
\fBOpaqueMoveSize\fR [\fIpercentage\fR]
.RS
.\".PP
Tells fvwm the maximum size window with which opaque window
movement should be used\.  The percentage is percent of the total
screen area (may be greater than 100)\.  With
.sp
.RS 4
.nf
OpaqueMoveSize 0
.fi
.RE
.PP
all windows are moved using the traditional rubber\-band
outline\.  With
.sp
.RS 4
.nf
OpaqueMoveSize \fIunlimited\fR
.fi
.RE
.PP
or if a negative percentage is given
all windows are moved as solid windows\.  The default is
.sp
.RS 4
.nf
OpaqueMoveSize 5
.fi
.RE
.PP
which allows small windows to be moved in an opaque manner but
large windows are moved as rubber\-bands\.  If
\fIpercentage\fR
is omitted or invalid the default value is set\.  To resize windows
in an opaque manner you can use the
\fIResizeOpaque\fR
style\.  See
the \fBStyle\fR
command\.
.RE
.TP
\fBPlaceAgain\fR [Anim] [Icon]
.RS
.\".PP
Causes the current window's position to be re\-computed using the
initial window placement logic\.  The window is moved to where it
would have been if it were a new window that had just appeared\.
Most useful with
\fISmart\fR or \fIClever\fR (\fIReallySmart\fR)
placement\.  With the optional argument
\fIAnim\fR
an animated move is used to place the window in its new position\.
With the additional option
\fIIcon\fR,
the icon is placed again instead\.
.RE
.TP
\fBRaise\fR
.RS
.\".PP
Allows the user to raise a window\.  Note that this raises a window
only in its layer\.  To bring a window to the absolute top, use
.sp
.RS 4
.nf
\fBAddToFunc\fR raise\-to\-top
 + I \fBLayer\fR 0 ontop
 + I Raise
.fi
.RE
.PP
where ontop is the highest layer used in your setup\.
.RE
.TP
\fBRaiseLower\fR
.RS
.\".PP
Alternately raises and lowers a window\.  The window is raised if
it is obscured by any window (except for its own transients when
\fIRaiseTransient\fR
style is used; see the
\fBStyle\fR
command) otherwise it is lowered\.
.RE
.TP
\fBResize\fR [[frame] [direction\ \fIdir\fR\ [warptoborder]] [fixeddirection] [w]\fIwidth\fR[p\ |\ c] [w]\fIheight\fR[p\ |\ c]]
.RS
.\".PP
Allows for resizing a window\.  If called from somewhere in a window
or its border, then that window is resized\.  If called from the
root window then the user is allowed to select the target window\.
.PP
The operation can be aborted with 
.SM Escape
or by pressing
any mouse button (except button 1 which confirms it)\.
.PP
If the optional arguments
\fIwidth\fR and \fIheight\fR
are provided, then the window is resized so that its dimensions
are
\fIwidth\fR by \fIheight\fR\.
The units of
\fIwidth\fR and \fIheight\fR
are percent\-of\-screen, unless a letter '\fIp\fR'
is appended to one or both coordinates, in which case the location
is specified in pixels\.  With a '\fIc\fR'
suffix the unit defined by the client application (hence the c) is
used\.  So you can say
.sp
.RS 4
.nf
Resize 80c 24c
.fi
.RE
.PP
to make a terminal window just big enough for 80x24
characters\.
.PP
If the
\fIwidth\fR or \fIheight\fR
is prefixed with the letter '\fIw\fR'
the size is not taken as an absolute value but added to the
current size of the window\.  Example:
.sp
.RS 4
.nf
# Enlarge window by one line
Resize keep w+1c
.fi
.RE
.PP
Both,
\fIwidth\fR and \fIheight\fR
can be negative\.  In this case the new size is the screen size
minus the given value\.  If either value is "\fIkeep\fR", the
corresponding dimension of the window is left untouched\.  The new
size is the size of the client window, thus
.sp
.RS 4
.nf
Resize 100 100
.fi
.RE
.PP
may make the window bigger than the screen\.  To base the new size
on the size of the whole fvwm window, add the
\fIframe\fR
option after the command\.  The options
\fIfixeddirection\fR,
\fIdirection\fR and
\fIwarptoborder\fR
are only used in interactive move operations\.  With
\fIfixeddirection\fR
the same border is moved even if the pointer moves past the
opposite border\.  The
\fIdirection\fR
option must be followed by a direction name such as "NorthWest",
"South" or "East" (you get the idea)\.  Resizing is started
immediately, even if the pointer is not on a border\.  The
\fIwarptoborder\fR
option changes the behaviour of the
\fIdirection\fR
option so that the pointer is automatically warped to the border
in the given direction before starting to resize\.  Also, if
resizing is started by clicking on the window border, the pointer
is warped to the outer edge of the border\.
.sp
.RS 4
.nf
\fBAddToFunc\fR ResizeSE I Resize \fBDirection\fR SE
\fBMouse\fR 3 A M ResizeSE
.fi
.RE
.RE
.TP
\fBResize\fR [bottomright\ |\ br\ \fIx\fR\ \fIy\fR]
.RS
.\".PP
An alternate syntax is used if the keyword
\fIbottomright\fR or in short
\fIbr\fR
follows the command name\.  In this case, the arguments
\fIx\fR and \fIy\fR
specify the desired position of the bottom right corner of the
window\.  They are interpreted exactly like the
\fIx\fR and \fIy\fR
arguments of the
\fBMove\fR
command\.  Actually, any of the options accepted by the
\fBMove\fR
command can be used\.
.RE
.TP
\fBResizeMaximize\fR [\fIresize\-arguments\fR]
.RS
.\".PP
Combines the effects of
\fBResize\fR
and
\fBMaximize\fR
in a single command\.  When used on a maximized window, the window
is resized and is still in the maximized state afterwards\.  When
used on an unmaximized window, the window is resized and put into
the maximized state afterwards\.  This is useful if the user wants
to resize the window temporarily and then return to the original
geometry\.  The
\fIresize\-arguments\fR
are the same as for the
\fBResize\fR
command\.
.RE
.TP
\fBResizeMove\fR \fIresize\-arguments\fR \fImove\-arguments\fR
.RS
.\".PP
This command does the same as the
\fBResize\fR
and
\fBMove\fR
commands, but in a single call which is less visually
disturbing\.  The
\fIresize\-arguments\fR
are exactly the same arguments as for the
\fBResize\fR
command and the
\fImove\-arguments\fR
are exactly the same arguments as for the
\fBMove\fR
command except the
\fIpointer\fR
option which is not supported by the
\fBResizeMove\fR
command\.
.PP
Examples:
.sp
.RS 4
.nf
# Move window to top left corner and cover
# most of the screen
ResizeMove \-10p \-20p 0 0

# Grow the focused window towards the top of screen
\fBCurrent\fR \fBResize\fR keep w+$[w\.y]p keep 0
.fi
.RE
.PP
Note: Fvwm may not be able to parse the command properly if the
option
\fIbottomright\fR
of the
\fBResize\fR
command is used\.
.RE
.TP
\fBResizeMoveMaximize\fR \fIresize\-arguments\fR \fImove\-arguments\fR
.RS
.\".PP
Combines the effects of
\fBResizeMove\fR
and
\fBMaximize\fR
in a single command\.  When used on a maximized window, the window
is resized and moved and is still in the maximized state
afterwards\.  When used on an unmaximized window, the window is
resized and put into the maximized state afterwards\.  This is
useful if the user wants to resize the window temporarily and then
return to the original geometry\.  The
\fIresize\-arguments\fR and \fImove\-arguments\fR
are the same as for the
\fBResizeMove\fR
command\.
.RE
.TP
\fBRestackTransients\fR
.RS
.\".PP
This command regroups the transients of a window close to it in
the stacking order as if the window had just been lowered and then
raised\.  The position of the window itself is not altered\.  Only
windows that use either the
\fIRaiseTransient\fR or
\fILowerTransient\fR
style are affected at all\.  When
\fBRestackTransients\fR
is used on a transient window with the
\fIStackTransientParent\fR
style set, it is redirected to the parent window\.
.RE
.TP
\fBSetAnimation\fR \fImilliseconds\-delay\fR [\fIfractions\-to\-move\-list\fR]
.RS
.\".PP
Sets the time between frames and the list of fractional offsets to
customize the animated moves of the
\fBAnimatedMove\fR
command and the animation of menus (if the menu style is set to
animated; see
\fBMenuStyle\fR
command)\.  If the
\fIfractions\-to\-move\-list\fR
is omitted, only the time between frames is altered\.  The
\fIfractions\-to\-move\-list\fR
specifies how far the window should be offset at each successive
frame as a fraction of the difference between the starting
location and the ending location\.  e\.g\.:
.sp
.RS 4
.nf
SetAnimation 10 \-\.01 0 \.01 \.03 \.08 \.18 \.3 \e
  \.45 \.6 \.75 \.85 \.90 \.94 \.97 \.99 1\.0
.fi
.RE
.PP
Sets the delay between frames to 10 milliseconds, and sets the
positions of the 16 frames of the animation motion\.  Negative
values are allowed, and in particular can be used to make the
motion appear more cartoonish, by briefly moving slightly in the
opposite direction of the main motion\.  The above settings are the
default\.
.RE
.TP
\fBSnapAttraction\fR [\fIproximity\fR\ [\fIbehaviour\fR]\ [Screen]]
.RS
.\".PP
The \fBSnapAttraction\fR command is obsolete\.  It has
been replaced by the \fBStyle\fR command option
\fISnapAttraction\fR\.
.RE
.TP
\fBSnapGrid\fR [\fIx\-grid\-size\fR\ \fIy\-grid\-size\fR]
.RS
.\".PP
The \fBSnapGrid\fR command is obsolete\.  It has
been replaced by the \fBStyle\fR command option
\fISnapGrid\fR\.
.RE
.TP
\fBWindowsDesk\fR \fIarg1\fR [\fIarg2\fR]
.RS
.\".PP
Moves the selected window to another desktop\.
.PP
This command has been removed and must be replaced by
\fBMoveToDesk\fR,
the arguments for which are the same as for the
\fBGotoDesk\fR
command\.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBImportant\fR

You cannot simply change the name of the command: the syntax has
changed\.  If you used:

.sp
.RS 4
.nf
WindowsDesk n
.fi
.RE
.PP
to move a window to desk n, you have to change it to:
.sp
.RS 4
.nf
\fBMoveToDesk\fR 0 n
.fi
.RE
.RE
.TP
\fBXorPixmap\fR [\fIpixmap\fR]
.RS
.\".PP
Selects the pixmap with which bits are xor'ed when doing
rubber\-band window moving or resizing\.  This has a better chance
of making the rubber\-band visible if
\fBXorValue\fR
does not give good results\.  An example pixmap
\fIresize\.rainbow\.xpm\fR
is provided with the icon distribution\.  To turn the
\fIXorPixmap\fR
off again use the
\fBXorValue\fR
command or omit the
\fIpixmap\fR
argument\.
.RE
.TP
\fBXorValue\fR [\fInumber\fR]
.RS
.\".PP
Changes the value with which bits are xor'ed when doing
rubber\-band window moving or resizing\.
Valid values range from zero to the maximum value of an
unsigned long integer on your system\.
Setting this value is a trial\-and\-error process\.
The default value 0 tries to find a
value that gives a good contrast to black and white\.
The default value is used if the given
\fInumber\fR
is omitted or invalid\.
.RE
.SS Focus & Mouse Movement
.TP
\fBCursorMove\fR \fIhorizontal\fR[p] \fIvertical\fR[p]
.RS
.\".PP
Moves the mouse pointer by
\fIhorizontal\fR
pages in the X direction and
\fIvertical\fR
pages in the Y direction\.  Either or both entries may be
negative\.  Both horizontal and vertical values are expressed in
percent of pages, so
.sp
.RS 4
.nf
CursorMove 100 100
.fi
.RE
.PP
means to move down and right by one full page\.
.sp
.RS 4
.nf
CursorMove 50 25
.fi
.RE
.PP
means to move right half a page and down a quarter of a
page\.  Alternatively, the distance can be specified in pixels by
appending a '\fIp\fR'
to the horizontal and/or vertical specification\.  For example
.sp
.RS 4
.nf
CursorMove \-10p \-10p
.fi
.RE
.PP
means move ten pixels up and ten pixels left\.  The CursorMove
function should not be called from pop\-up menus\.
.RE
.TP
\fBFlipFocus\fR [NoWarp]
.RS
.\".PP
Executes a
\fBFocus\fR
command as if the user had used the pointer to select the
window\.  This command alters the order of the WindowList in the
same way as clicking in a window to focus, i\.e\. the target window
is removed from the
\fBWindowList\fR
and placed at the start\.  This command is recommended for use with
the
\fBDirection\fR
command and in the function invoked from
\fBWindowList\fR\.
.RE
.TP
\fBFocus\fR [NoWarp]
.RS
.\".PP
Sets the keyboard focus to the selected window\.  If the
\fINoWarp\fR
argument is given, this is all it does\.  Otherwise it also moves
the viewport or window as needed to make the selected window
visible\.  This command does not automatically raise the
window\.  Does not warp the pointer into the selected window (see
\fBWarpToWindow\fR
function)\.  Does not de\-iconify\.  This command does not alter the
order of the
\fBWindowList\fR,
it rotates the
\fBWindowList\fR
around so that the target window is at the start\.
.PP
When the
\fINoWarp\fR
argument is given, Focus cannot transfer the keyboard focus to
windows on other desks\.
.PP
To raise and/or warp a pointer to a window together with
\fBFocus\fR or \fBFlipFocus\fR,
use a function, like:
.sp
.RS 4
.nf
\fBAddToFunc\fR SelectWindow
+ I Focus
+ I \fBIconify\fR false
+ I \fBRaise\fR
+ I \fBWarpToWindow\fR 50 8p
.fi
.RE
.RE
.TP
\fBWarpToWindow\fR \fIx\fR[p] \fIy\fR[p]
.RS
.\".PP
Warps the cursor to the associated window\.  The parameters
\fIx\fR and \fIy\fR
default to percentage of window down and in from the upper left
hand corner (or number of pixels down and in if '\fIp\fR'
is appended to the numbers)\.  If a number is negative the opposite
edge is used and the direction reversed\.  This command works also
with windows that are not managed by fvwm\.  In this case fvwm does
not bring the window onto the screen if it is not visible\.  For
example it is possible to warp the pointer to the center of the
root window on screen 1:
.sp
.RS 4
.nf
\fBWindowId\fR root 1 WarpToWindow 50 50
.fi
.RE
.RE
.SS Window State
.TP
\fBClose\fR
.RS
.\".PP
If the window accepts the delete window protocol a message is sent
to the window asking it to gracefully remove itself\.  If the
window does not understand the delete window protocol then the
window is destroyed as with the
\fBDestroy\fR
command\.  Note: if the window accepts the delete window protocol
but does not close itself in response, the window is not deleted\.
.RE
.TP
\fBDelete\fR
.RS
.\".PP
Sends a message to a window asking that it remove itself,
frequently causing the application to exit\.
.RE
.TP
\fBDestroy\fR
.RS
.\".PP
Destroys an application window, which usually causes the
application to crash and burn\.
.RE
.TP
\fBIconify\fR [\fIbool\fR]
.RS
.\".PP
Iconifies a window if it is not already iconified or de\-iconifies
it if it is already iconified\.  The optional argument
\fIbool\fR
is a boolean argument\.  "\fITrue\fR" means only iconification is
allowed, while "\fIFalse\fR" forces de\-iconification\.  Using "\fItoggle\fR"
switches between iconified and de\-iconified states\.
.PP
There are a number of
\fBStyle\fR
options which influence the appearance and behavior of icons (e\.g\.
\fIStickyIcon\fR, \fINoIcon\fR)\.
.PP
For backward compatibility, the optional argument may also be a
positive number instead of "True", or a negative number instead
of "False"\.  Note that this syntax is obsolete, and will be removed
in the future\.
.RE
.TP
\fBMaximize\fR [\fIflags\fR] [\fIbool\fR] [\fIhorizontal\fR[p]] [\fIvertical\fR[p]]
.RS
.\".PP
Without its optional arguments (or if the
\fIbool\fR
bit has the value "\fItoggle\fR")
\fBMaximize\fR
causes the window to alternately switch from a full\-screen size to
its normal size\.  To force a window into maximized (normal) state
you can use a "\fITrue\fR" or "\fIFalse\fR" value for the
\fIbool\fR
argument\.
.PP
With the optional arguments
\fIhorizontal\fR and \fIvertical\fR,
which are expressed as percentage of a full screen, the user can
control the new size of the window\.  An optional suffix '\fIp\fR'
can be used to indicate pixels instead of percents of the screen
size\.  If horizontal is greater than 0 then the horizontal
dimension of the window is set to
\fIhorizontal\fR*screen_width/100\.
If the value is smaller than 0 the size is subtracted from the
screen width, i\.e\. \-25 is the same as 75\.  If
\fIhorizontal\fR
is "\fIgrow\fR", it is maximized to curren
available space until
finding any obstacle\.  The vertical resizing is similar\.  If both
horizontal and vertical values are "grow", it expands vertically
first, then horizontally to find space\.  Instead of the horizontal
"grow" argument, "\fIgrowleft\fR" or "\fIgrowright\fR" can be used
respectively "\fIgrowup\fR" and "\fIgrowdown\fR"\.
The optional
\fIflags\fR
argument is a space separated list containing the following
key words:
\fIewmhiwa\fR, \fIgrowonwindowlayer\fR, \fIgrowonlayers\fR and \fIscreen\fR\.
\fIewmhiwa\fR
causes fvwm to ignore the EWMH working area\.
\fIgrowonwindowlayer\fR
causes the various grow methods to ignore windows with a layer
other than the current layer of the window which is maximized\.
The
\fIgrowonlayers\fR
option must have two integer arguments\.  The first one is the
minimum layer and the second one the maximum layer to use\.
Windows that are outside of this range of layers are ignored by
the grow methods\.  A negative value as the first or second
argument means to assume no minimum or maximum layer\.
\fIscreen\fR
must have an argument which specifies the Xinerama screen on which
to operate\.
It can be 'p' for the primary screen, 'c' for the current
screen (containing the mouse pointer), 'g' for the global screen
or the screen number itself (counting from zero)\.  This option is
only useful with multiple Xinerama screens\.
.PP
Here are some examples\.  The following adds a title\-bar button to
switch a window to the full vertical size of the screen:
.sp
.RS 4
.nf
\fBMouse\fR 0 4 A Maximize 0 100
.fi
.RE
.PP
The following causes windows to be stretched to the full width:
.sp
.RS 4
.nf
\fBMouse\fR 0 4 A Maximize 100 0
.fi
.RE
.PP
This makes a window that is half the screen size in each
direction:
.sp
.RS 4
.nf
\fBMouse\fR 0 4 A Maximize 50 50
.fi
.RE
.PP
To expand a window horizontally until any other window is found:
.sp
.RS 4
.nf
\fBMouse\fR 0 4 A Maximize 0 grow
.fi
.RE
.PP
To expand a window until any other window on the same or a higher
layer is hit\.
.sp
.RS 4
.nf
\fBMouse\fR 0 4 A Maximize growonlayers $[w\.layer] \-1 grow grow
.fi
.RE
.PP
To expand a window but leave the lower 60 pixels of the screen
unoccupied:
.sp
.RS 4
.nf
\fBMouse\fR 0 4 A Maximize 100 \-60p
.fi
.RE
.PP
Values larger than 100 can be used with caution\.
.RE
.TP
\fBRecapture\fR
.RS
.\".PP
This command is obsolete and should not be used anymore\.  Should
you want to do something specific that you cannot do without it,
please report this to the fvwm\-workers mailing list
<fvwm\-workers@fvwm\.org>\.  This command may be removed at some point
in the future\.  Please read the note at the end of the section
\fBDelayed Execution of Commands\fR
to learn about how to avoid the
\fBRecapture\fR
command\.
.PP
Causes fvwm to recapture all of its windows\.  This ensures that
the latest style parameters are used\.  The recapture operation is
visually disturbing\.
.PP
Since fvwm version 2\.4 only a very few
\fBStyle\fR
options need a
\fBRecapture\fR
to take effect (e\.g\.
\fIUseStyle\fR)\.
.RE
.TP
\fBRecaptureWindow\fR
.RS
.\".PP
This command is obsolete and should not be used anymore\.  See
\fBRecapture\fR
For details\.
.PP
Causes fvwm to recapture the chosen window\.
.RE
.TP
\fBRefresh\fR
.RS
.\".PP
Causes all windows on the screen to redraw themselves\.  All pending
updates of all windows' styles and looks are applied immediately\.
E\.g\. if
\fBStyle\fR or
\fBTitleStyle\fR
commands were issued inside a fvwm function\.
.RE
.TP
\fBRefreshWindow\fR
.RS
.\".PP
Causes the chosen window to redraw itself\.  All pending updates of
the window's style and look are applied immediately\.  E\.g\. if
\fBStyle\fR or
\fBTitleStyle\fR
commands were issued inside a fvwm function\.
.RE
.TP
\fBStick\fR [\fIbool\fR]
.RS
.\".PP
If the
\fIbool\fR
argument is empty or "\fItoggle\fR", the
\fBStick\fR
command makes a window sticky if it is not already sticky, or
non\-sticky if it is already sticky\.  To make a window sticky
regardless of its current state the
\fIbool\fR
argument must be "True"\.  To make it non\-sticky use "False"\.
.RE
.TP
\fBStickAcrossPages\fR [\fIbool\fR]
.RS
.\".PP
Works like
\fBStick\fR
but only sticks a window across pages, not across desks\.
.RE
.TP
\fBStickAcrossDesks\fR [\fIbool\fR]
.RS
.\".PP
Works like
\fBStick\fR
but only sticks a window across desks, not across pages\.
.RE
.TP
\fBWindowShade\fR [bool] | [[ShadeAgain]\ \fIdirection\fR]
.RS
.\".PP
Toggles the window shade feature for titled windows\.  Windows in
the shaded state only display a title\-bar\.  If
\fIbool\fR
is not given or "\fItoggle\fR",
the window shade state is toggled\.  If
\fIbool\fR
is "True", the window is forced to the shaded state\.  If
\fIbool\fR
is "False", then the window is forced to the non\-shaded
state\.  To force shading in a certain direction, the
\fIdirection\fR
argument can be used\.  Any of the strings
"\fINorth\fR",
"\fISouth\fR",
"\fIWest\fR",
"\fIEast\fR",
"\fINorthWest\fR",
"\fINorthEast\fR",
"\fISouthWest\fR",
"\fISouthEast\fR" or
"\fILast\fR"
can be given\.  The direction can be abbreviated with
the usual one or two letters "\fIN\fR", "\fINW\fR", etc\.  Using a direction on
a window that was already shaded unshades the window\.  To shade it
in a different direction, use the
\fIShadeAgain\fR
option\.  The direction
\fILast\fR
shades the window in the direction it last was shaded\.  If the
window has never been shaded before it is shaded as if no
direction had been given\.  Windows without titles can be shaded too\.
Please refer also to the options
\fIWindowShadeSteps\fR,
\fIWindowShadeShrinks\fR,
\fIWindowShadeScrolls\fR,
\fIWindowShadeLazy\fR,
\fIWindowShadeAlwaysLazy\fR and
\fIWindowShadeBusy\fR
options of the
\fBStyle\fR
command\.  Examples:
.sp
.RS 4
.nf
\fBStyle\fR * \fIWindowShadeShrinks\fR, \fIWindowShadeSteps\fR 20, \e
        \fIWindowShadeLazy\fR
\fBMouse\fR 1 \- S WindowShade North
\fBMouse\fR 1 [ S WindowShade West
\fBMouse\fR 1 ] S WindowShade E
\fBMouse\fR 1 _ S WindowShade S
.fi
.RE
.PP
Note: When a window that has been shaded with a
\fIdirection\fR
argument changes the direction of the window title (see
\fITitleAtTop\fR
\fBStyle\fR
option), the shading direction does not change\.  This may look
very strange\.  Windows that were shaded without a
\fIdirection\fR
argument stay shaded in the direction of the title bar\.
.PP
For backward compatibility, the optional argument may also be 1 to
signify "on", and 2 to signify "off"\.  Note that this syntax is
obsolete, and will be removed in the future\.
.RE
.TP
\fBWindowShadeAnimate\fR [\fIsteps\fR\ [p]]
.RS
.\".PP
This command is obsolete\.  Please use the
\fIWindowShadeSteps\fR
option of the
\fBStyle\fR
command instead\.
.RE
.SS Mouse, Key & Stroke Bindings
.TP
\fBIgnoreModifiers\fR [\fIModifiers\fR]
.RS
.\".PP
Tells fvwm which modifiers to ignore when matching Mouse or Key
bindings\.
\fBIgnoreModifiers\fR
affects the
\fIClickToFocus\fR
style too\.  This command belongs into your
\fIconfig\fR\.
If you issue it when your fvwm session is already up and running
the results are unpredictable\.  The should appear before any
applications or modules are started in your
\fIconfig\fR
file (e\.g\. with the
\fBExec\fR
command)\.
.PP
\fIModifiers\fR
has the same syntax as in the
\fBMouse\fR or \fBKey\fR
bindings, with the addition of 'L' meaning the
.SM caps lock
key\.  The default is "L"\.
\fIModifiers\fR
can be omitted, meaning no modifiers are ignored\.  This command
comes in handy if the
.SM num-lock
and
.SM scroll-lock
keys interfere with your shortcuts\.  With XFree86 '2' usually is
the
.SM num-lock
modifier and '5' refers to the
.SM scroll-lock
key\.  To turn all these pesky modifiers off you can use this
command:
.sp
.RS 4
.nf
IgnoreModifiers L25
.fi
.RE
.PP
If the
\fIModifiers\fR
argument is the string "\fIdefault\fR", fvwm reverts back to the
default value "L"\.
.PP
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBImportant\fR
This command creates a lot of extra network traffic, depending on
your CPU, network connection, the number of
\fBKey\fR or \fBMouse\fR
commands in your configuration file and the number of modifiers
you want to ignore\.  If you do not have a lightning fast machine
or very few bindings you should not ignore more than two
modifiers\.  I\.e\. do not ignore
.SM scroll-lock
if you have no problem with it\.  In the
\fIFAQ\fR
you can find a better solution of this problem\.
.RE
.TP
\fBEdgeCommand\fR [\fIdirection\fR\ [\fIFunction\fR]]
.RS
.\".PP
Binds a specified fvwm command
\fIFunction\fR
to an edge of the screen\.  Direction may be one of
"\fINorth\fR",
"\fITop\fR",
"\fIWest\fR",
"\fILeft\fR",
"\fISouth\fR",
"\fIBottom\fR",
"\fIRight\fR" and
"\fIEast\fR"\.
If
\fIFunction\fR
is omitted the binding for this edge is removed\.  If EdgeCommand is
called without any arguments all edge bindings are removed\.
.PP
\fIFunction\fR is executed when the mouse pointer
enters the invisible pan frames that surround the visible screen\.
The binding works only if
\fBEdgeThickness\fR
is set to a value greater than 0\.
If a function is bound to an edge, scrolling specified by
\fBEdgeScroll\fR
is disabled for this edge\.
It is possible to bind a function only to some edges
and use the other edges for scrolling\.
This command is intended to raise or lower certain windows
when the mouse pointer enters an edge\.
\fBFvwmAuto\fR
can be used get a delay when raising or lowering windows\.
The following example raises
\fBFvwmButtons\fR
if the mouse pointer enters the top edge of the screen\.
.sp
.RS 4
.nf
# Disable EdgeScrolling but make it possible
# to move windows over the screen edge
\fBEdgeResistance\fR \-1
\fBStyle\fR * EdgeMoveDelay 250
\fBStyle\fR * EdgeMoveResistance 20

# Set thickness of the edge of the screen to 1
\fBEdgeThickness\fR 1

# Give focus to FvwmButtons if the mouse
# hits top edge
EdgeCommand Top \fBNext\fR (FvwmButtons) \fBFocus\fR
# Make sure the \fBNext\fR command matches the window
\fBStyle\fR FvwmButtons CirculateHit

\fBModule\fR \fBFvwmButtons\fR
\fBModule\fR \fBFvwmAuto\fR 100 "Silent AutoRaiseFunction" \e
     "Silent AutoLowerFunction"

# If any window except FvwmButtons has
# focus when calling this function
# FvwmButtons are lowered
\fBDestroyFunc\fR AutoLowerFunction
\fBAddToFunc\fR AutoLowerFunction
+ I \fBCurrent\fR (!FvwmButtons) \fBAll\fR (FvwmButtons) \fBLower\fR

# If FvwmButtons has focus when calling this function raise it
\fBDestroyFunc\fR AutoRaiseFunction
\fBAddToFunc\fR AutoRaiseFunction
+ I \fBCurrent\fR (FvwmButtons) \fBRaise\fR
.fi
.RE
.PP
Normally, the invisible pan frames are only on the screen edges
that border virtual pages\.  If a screen edge has a command bound
to it, the pan frame is always created on that edge\.
.RE
.TP
\fBEdgeLeaveCommand\fR [\fIdirection\fR\ [\fIFunction\fR]]
.RS
.\".PP
Binds a specified fvwm command
\fIFunction\fR
to an edge of the screen\.  Direction may be one of
"\fINorth\fR",
"\fITop\fR",
"\fIWest\fR",
"\fILeft\fR",
"\fISouth\fR",
"\fIBottom\fR",
"\fIRight\fR" and
"\fIEast\fR"\.
If
\fIFunction\fR
is omitted the binding for this edge is removed\.  If
EdgeLeaveCommand is called without any arguments all edge bindings
are removed\.
.PP
\fIFunction\fR
is executed when the mouse pointer
leaves the invisible pan frames that surround the visible screen\.
The binding works only if
\fBEdgeThickness\fR
is set to a value greater than 0\.
If a function is bound to an edge, scrolling specified by
\fBEdgeScroll\fR
is disabled for this edge\.
It is possible to bind a function only to some edges
and use the other edges for scrolling\.
This command is intended to raise or lower certain windows
when the mouse pointer leaves an edge\.
\fBFvwmAuto\fR
can be used get a delay when raising or lowering windows\.
See example for
\fBEdgeCommand\fR
.PP
Normally, the invisible pan frames are only on the screen edges
that border virtual pages\.  If a screen edge has a command bound
to it, the pan frame is always created on that edge\.
.RE
.TP
\fBGnomeButton\fR
.RS
.\".PP
Used in conjunction with
\fBMouse\fR
to pass mouse button presses on the root window to a
GNOME
program (such as GMC)\.  The following example passes presses of
mouse buttons 1 and 3 to such a program\.
.sp
.RS 4
.nf
\fBMouse\fR 1 R A GnomeButton
\fBMouse\fR 3 R A GnomeButton
.fi
.RE
.RE
.TP
\fBKey\fR [(\fIwindow\fR)] \fIKeyname\fR \fIContext\fR \fIModifiers\fR \fIFunction\fR
.RS
.\".PP
Binds a keyboard key to a specified fvwm command, or
removes the binding if
\fIFunction\fR
is '\-'\.  The syntax is the same as for a
\fBMouse\fR
binding except that the mouse button number is replaced with a
\fIKeyname\fR\.
Normally, the key binding is activated when the key is pressed\.
\fIKeyname\fR
is a standard X11 key name as defined in
\fI/usr/include/X11/keysymdef\.h\fR,
(without the
\fIXK_\fR
prefix), or the keysym database
\fI/usr/X11R6/lib/X11/XKeysymDB\fR\.
Only key names that are
generated with no modifier keys or with just the
.SM Shift
key held are guaranteed to work\.  The
\fIContext\fR and \fIModifiers\fR
fields are defined as in the
\fBMouse\fR
binding\.  However, when you press a key the context window is the
window that has the keyboard focus\.  That is not necessarily the
same as the window the pointer is over (with
\fISloppyFocus\fR or
\fIClickToFocus\fR)\.
Note that key bindings with the '\fIR\fR' (root window) context do not
work properly with
\fISloppyFocus\fR and
\fIClickToFocus\fR\.
If you encounter problems, use the
\fBPointerKey\fR
command instead\.  If you want to bind keys to a window with
\fISloppyFocus\fR or
\fIClickToFocus\fR
that are supposed to work when the pointer is not over the window,
fvwm assumes the pointer is over the client window (i\.e\. you have
to use the 'W' context)\.
.PP
The special context '\fIM\fR' for menus can be used to (re)define the menu
controls\.  It be used alone or together with 'T', 'S', 'I', '[', ']', '\-' and '_'\.  See the \fBMenu Bindings\fR
section for details\.
.PP
The following example binds the built\-in window list to pop up
when
.SM Alt-Ctrl-Shift-F11
is hit, no matter where the mouse pointer is:
.sp
.RS 4
.nf
Key F11 A SCM \fBWindowList\fR
.fi
.RE
.PP
Binding a key to a title\-bar button causes that button to appear\.
Please refer to the
\fBMouse\fR
command for details\.
.RE
.TP
\fBMouse\fR [(\fIwindow\fR)] \fIButton\fR \fIContext\fR \fIModifiers\fR \fIFunction\fR
.RS
.\".PP
Defines a mouse binding, or removes the binding if
\fIFunction\fR
is '\-'\.
\fIButton\fR
is the mouse button number\.  If
\fIButton\fR
is zero then any button performs the specified function\.  Note
that only mouse buttons 1 to 5 are fully supported by X11\.  Any
number above this works only partially\.  Complex functions can not
be used with these buttons and neither any operation that requires
dragging the pointer with the button held\.  This is due to
limitations of X11\.  By default, the highest allowed button number
is 9\.
.PP
\fIContext\fR
describes where the binding applies\.  Valid contexts are '\fIR\fR' for the root window, '\fIW\fR' for an application window, '\fID\fR' for a desktop application (as kdesktop or Nautilus desktop), '\fIT\fR' for a window title\-bar, '\fIS\fR' for a window side, top, or bottom bar, '\fI[\fR', '\fI]\fR', '\fI-\fR' and '\fI_\fR' for the left, right, top or bottom side only, '\fIF\fR' for a window frame (the corners), '<', '^', '>' and '\fIv\fR' for the top
left, top right, bottom right or bottom left corner, '\fII\fR' for an icon window, or '\fI0\fR' through '\fI9\fR' for title\-bar buttons, or any combination of these letters\.  '\fIA\fR' is for any context\.  For
instance, a context of "FST" applies when the mouse is anywhere in
a window's border except the title\-bar buttons\.  Only 'S' and 'W'
are valid for an undecorated window\.
.PP
The special context '\fIM\fR' for menus can be used to (re)define the menu
controls\.  It can be used alone or together with 'T', 'S', 'I', '[', ']', '\-' and '_'\.  See the
\fBMenu Bindings\fR
section for details\.
.PP
The special context '\fIP\fR' controls what buttons that can be used to
place a window\.  When using this context no modifiers are allowed
(\fIModifiers\fR
must be N), no
\fIwindow\fR
is allowed, and the
\fIFunction\fR
must be one of
\fIPlaceWindow\fR,
\fIPlaceWindowDrag\fR,
\fIPlaceWindowInteractive\fR,
\fICancelPlacement\fR,
\fICancelPlacementDrag\fR,
\fICancelPlacementInteractive\fR or
\fI\-\fR\.
.PP
\fIPlaceWindow\fR
makes
\fIButton\fR
usable for window placement, both for interactive and drag move\.
\fICancelPlacement\fR
does the inverse\.  That is makes
\fIButton\fR
to cancel move for both interactive and drag move\.  It may however
not override how new windows are resized after being placed\.  This
is controlled by the
\fBEmulate\fR
command\.  Also a window being dragged can always be placed
by releasing the button hold while dragging, regardless of if it is
set to
\fIPlaceWindow\fR
or not\.
.PP
\fIPlaceWindowDrag\fR and
\fIPlaceWindowInteractive\fR/\fICancelPlacementDrag\fR
and \fICancelPlacementInteractive\fR
work as
\fIPlaceWindow\fR/\fICancelPlacement\fR
with the exception that they only affect either windows dragged /
placed interactively\.
.PP
\fI-\fR
is equivalent to
\fICancelPlacement\fR\.
.PP
The following example makes all buttons but button 3 usable for
interactive placement and makes drag moves started by other buttons
than one cancel if button 1 is pressed before finishing the move:
.sp
.RS 4
.nf
Mouse 0 P N PlaceWindow
Mouse 3 P N CancelPlacement
Mouse 1 P N CancelPlacementDrag
.fi
.RE
.PP
By default, the binding applies to all windows\.  You can specify
that a binding only applies to specific windows by specifying the
window name in brackets\.  The window name is a wildcard pattern
specifying the class, resource or name of the window you want the
binding to apply to\.
.PP
The following example shows how the same key\-binding can be used to
perform different functions depending on the window that is focused:
.sp
.RS 4
.nf
\fBKey\fR (rxvt)  V A C \fBEcho\fR ctrl\-V\-in\-RXVT
\fBKey\fR (*term) V A C \fBEcho\fR ctrl\-V\-in\-Term
\fBKey\fR (*vim)  V A C \-\-
\fBKey\fR         V A C \fBEcho\fR ctrl\-V\-elsewhere
.fi
.RE
.PP
A '\fI--\fR' action indicates that the event should be propagated to the
specified window to handle\.  This is only a valid action for
window\-specific bindings\.
.PP
This example shows how to display the WindowList when Button 3 is
pressed on an rxvt window:
.sp
.RS 4
.nf
Mouse (rxvt) 3 A A \fBWindowList\fR
.fi
.RE
.PP
Note that Fvwm actually intercepts all events for a window\-specific
binding and (if the focused window doesn't match any of the
bindings) sends a synthetic copy of the event to the window\.  This
should be transparent to most applications, however (for security
reasons) some programs ignore these synthetic events by default \-
xterm is one of them\.  To enable handling of these events, add the
following line to your \fI~/\.Xdefaults\fR file:
.sp
.RS 4
.nf
XTerm*allowSendEvents:  true
.fi
.RE
.PP
\fIModifiers\fR
is any combination of '\fIN\fR' for no modifiers, '\fIC\fR' for control, '\fIS\fR' for shift, '\fIM\fR' for Meta, '\fIL\fR' for Caps\-Lock or '\fIA\fR' for any
modifier\.  For example, a modifier of "SM" applies when both the
.SM Meta
and
.SM Shift
keys are down\.  X11 modifiers mod1 through mod5 are represented as
the digits '1' through '5'\.  The modifier 'L' is ignored by
default\.  To turn it on, use the
\fBIgnoreModifiers\fR
command\.
.PP
\fIFunction\fR
is one of fvwm's commands\.
.PP
The title\-bar buttons are numbered with odd numbered buttons on
the left side of the title\-bar and even numbers on the
right\.  Smaller\-numbered buttons are displayed toward the outside
of the window while larger\-numbered buttons appear toward the
middle of the window (0 is short for 10)\.  In summary, the buttons
are numbered:
.sp
.RS 4
.nf
1 3 5 7 9    0 8 6 4 2
.fi
.RE
.PP
The highest odd numbered button which has an action bound to it
determines the number of buttons drawn on the left side of the
title bar\.  The highest even number determines the number of right
side buttons which are drawn\.  Actions can be bound to either
mouse buttons or keyboard keys\.
.RE
.TP
\fBPointerKey\fR [(\fIwindow\fR)] \fIKeyname\fR \fIContext\fR \fIModifiers\fR \fIFunction\fR
.RS
.\".PP
This command works exactly like the
\fBKey\fR
command\.  The only difference is that the binding operates on the
window under the pointer\.  Normal key bindings operate on the
focused window instead\.  The
\fBPointerKey\fR
command can for example be used to bind keys to the root window if
you are using
\fISloppyFocus\fR or
\fIClickToFocus\fR\.
However, some applications (xterm is one example) are unable to
handle this key anymore, even if the pointer is over the xterm
window\.  It is recommended to use the
\fBPointerKey\fR
command only for key combinations that are not needed in any
application window\.
.PP
Example:
.sp
.RS 4
.nf
\fBStyle\fR * \fISloppyFocus\fR
PointerKey f1 a m \fBMenu\fR MainMenu
.fi
.RE
.RE
.TP
\fBStroke\fR [(\fIwindow\fR)] \fISequence\fR \fIButton\fR \fIContext\fR \fIModifiers\fR \fIFunction\fR
.RS
.\".PP
Binds a mouse stroke sequence to a specified fvwm command,
or removes the binding if
\fIFunction\fR
is '\-'\.  The syntax is the same as for a
\fBMouse\fR
binding except that
\fISequence\fR
is inserted in front of the button number and a value of 0 for
\fIButton\fR
concerns the
\fBStrokeFunc\fR
command\.  The
\fIContext\fR and \fIModifiers\fR
fields are defined as in the
\fBMouse\fR
binding\.  However, only the '\fIR\fR' Context really works (if you want
to use other contexts you need to use the
\fBStrokeFunc\fR
below)\.
.PP
Strokes sequences are defined in a telephone grid like this:
.sp
.RS 4
.nf
 1  2  3

 4  5  6

 7  8  9
.fi
.RE
.PP
or in a numeric pad grid like this:
.sp
.RS 4
.nf
 7  8  9

 4  5  6

 1  2  3
.fi
.RE
.PP
The telephone grid is used by default, to use the numeric pad grid
you should begin the sequence with a '\fIN\fR'\.
Note that a complex motion may produce several different sequences
(see the "netscape"
example below to handle such motion)\.  Moreover, sequences are
limited to 20 elements (with the present version of
\fBlibstroke\fR),
however, in practice it is preferable to use sequence with less
than 12 elements\.
.PP
Because of the default button menu in fvwm, you may need to remove
a mouse button binding (using an empty action) before using the
stroke
.sp
.RS 4
.nf
\fBMouse\fR 3 R N
.fi
.RE
.PP
Also, you can still use the stroke "sequence 0" to simulate a
click:
.sp
.RS 4
.nf
Stroke 0 3 R N \fBMenu\fR \fBWindowList\fR \fBNop\fR
.fi
.RE
.PP
The following example starts xterm when the mouse drags an 'I' on
the root window with button 3 pressed down:
.sp
.RS 4
.nf
Stroke 258  3  R  N  \fBExec\fR exec xterm
.fi
.RE
.PP
An example for Netscape:
.sp
.RS 4
.nf
Stroke 7415963    3  R  N  \fBExec\fR exec netscape
Stroke 74148963   3  R  N  \fBExec\fR exec netscape
Stroke 74158963   3  R  N  \fBExec\fR exec netscape
Stroke 7418963    3  R  N  \fBExec\fR exec netscape
Stroke 415963     3  R  N  \fBExec\fR exec netscape
.fi
.RE
.PP
You may prefer to use the numeric pad grid since you have such a
grid on your machine\.  Here an example:
.sp
.RS 4
.nf
Stroke N78963214   3  R  N \fBFvwmForm\fR FvwmForm\-QuitVerify
Stroke N789632147  3  R  N \fBFvwmForm\fR FvwmForm\-QuitVerify
.fi
.RE
.PP
This example starts the "QuitVerify" form if you draw a box that
begins in the top left corner\.
.PP
Note: You need
\fBlibstroke\fR
installed and fvwm compiled with stroke support\.
\fBlibstroke\fR
can be obtained at
\fIhttp://www\.etla\.net/~willey/projects/libstroke/\fR
.RE
.TP
\fBStrokeFunc\fR [\fIOptions\fR]
.RS
.\".PP
Causes fvwm to record a mouse stroke sequence and to execute the
corresponding action as defined in a
\fBStroke\fR
command\.  The cursor is modified to the
\fISTROKE\fR
context of the
\fBCursorStyle\fR
command during recording\.  When the stroke is finished
\fBStrokeFunc\fR
looks for a stroke binding of the form
.sp
.RS 4
.nf
\fBStroke\fR sequence 0 Context Modifiers action
.fi
.RE
.PP
and executes the corresponding action (Note the 0)\.  Normal use of
this function is via a
\fBMouse\fR or
\fBKey\fR
command\.  Examples:
.sp
.RS 4
.nf
\fBMouse\fR 3 A M StrokeFunc
\fBKey\fR x R N StrokeFunc
.fi
.RE
.PP
If you press mouse button 3 and
.SM Alt
anywhere (respectively, press the key x when the cursor is on the
root window), then fvwm records the mouse motions until the mouse
button 3 (respectively, the x key) is released and then check if
the recorded
\fIsequence\fR
corresponds to a stroke binding of the form
.sp
.RS 4
.nf
"Stroke \fIsequence\fR 0 A M \fIaction\fR"
"Stroke \fIsequence\fR 0 R N \fIaction\fR"
.fi
.RE
.PP
Note that the
\fIContext\fR and \fIModifiers\fR
are taken at the beginning of the execution of the
\fBStrokeFunc\fR
command (so you can release the modifiers before the end of the
stroke recording in the case of a mouse binding and if you used,
say, a title\-bar context the mouse motion can go through an
application window)\.  The keys
.SM Escape
and
.SM Delete
allow you to abort the command\.
.PP
The
\fBStrokeFunc\fR
command has five options:
\fINotStayPressed\fR, \fIEchoSequence\fR, \fIDrawMotion\fR, 
\fIFeedBack\fR and \fIStrokeWidth\fR\.
These options are disabled by default\.
\fIEchoSequence\fR
causes fvwm to Echo the recorded stroke sequence\.
\fIDrawMotion\fR
causes fvwm to draw the mouse motion on the screen\.
\fIFeedBack\fR
causes fvwm to display during a fraction of second the cursor of
the
\fIWAIT\fR
context of the
\fBCursorStyle\fR
command if the recorded stroke sequence corresponds to a stroke
binding\.
\fIStrokeWidth\fR
takes an integer argument, which must be >= 0 and <= 100 and which
defines the width of the line for the
\fIDrawMotion\fR
option\.
.PP
\fINotStayPressed\fR
works only if
\fBStrokeFunc\fR
is used via a
\fBMouse\fR
or a
\fBKey\fR
command\.  This option removes the need to have a button or the key
pressed during the stroke, but you have to do a mouse click or
press the
.SM Return
or
.SM Space
key to finish the mouse motion recording (these keys also work
without the
\fINotStayPressed\fR
option)\.
.PP
You can use the
\fBStrokeFunc\fR
"alone"\.  In this case it works as above with the
\fINotStayPressed\fR
option enabled\.  However,
\fIModifiers\fR,
in general, may not work as expected (i\.e\., in this case use 'A'
or 'N' as
\fIModifiers\fR
in the stroke bindings)\.
.PP
Note that some computers do not support key release events\.  If
that is the case the
\fBStrokeFunc\fR
used via a
\fBKey\fR
command works as if the
\fINotStayPressed\fR
option is enabled\.
.RE
.SS Controlling Window Styles
.PP
For readability, the commands in this section are not sorted alphabetically\.
The description of the \fBStyle\fR command can be found at the end of this section\.
.TP
\fBFocusStyle\fR \fIstylename\fR \fIoptions\fR
.RS
.\".PP
works exactly like the
\fBStyle\fR
command, but accepts only the focus policy related styles
beginning with "FP"\.  The prefix can be removed, but at the cost
of a little bit of time\.
\fBFocusStyle\fR
is meant to make the configuration file more readable\.  Example:
.sp
.RS 4
.nf
FocusStyle * EnterToFocus, !LeaveToUnfocus
.fi
.RE
.PP
is equivalent to
.sp
.RS 4
.nf
\fBStyle\fR * FPEnterToFocus, !FPLeaveToUnfocus
.fi
.RE
.RE
.TP
\fBDestroyStyle\fR \fIstyle\fR
.RS
.\".PP
deletes the style named
\fIstyle\fR\.
The changes take effect immediately\.  Note that
\fIstyle\fR
is not a wild\-carded search string, but rather a case\-sensitive
string that should exactly match the original
\fBStyle\fR
command\.
.PP
Destroying style "*" can be done, but isn't really to be
recommended\.  For example:
.sp
.RS 4
.nf
DestroyStyle Application*
.fi
.RE
.PP
This removes all settings for the style named "Application*", NOT
all styles starting with "Application"\.
.RE
.TP
\fBDestroyWindowStyle\fR
.RS
.\".PP
deletes the styles set by the
\fBWindowStyle\fR
command on the selected window\.  The changes take effect immediately\.
.RE
.TP
\fBUpdateStyles\fR
.RS
.\".PP
All pending updates of all windows' styles and looks are applied
immediately\.  E\.g\. if
\fBStyle\fR,
\fIWindowStyle\fR or
\fITitleStyle\fR
commands were issued inside a fvwm function\.
.RE
.TP
\fBStyle\fR \fIstylename\fR \fIoptions\fR ...
.RS
.\".PP
The
\fBStyle\fR
command is used to set attributes of a window to values other than
the default or to set the window manager default styles\.
.PP
\fIstylename\fR
can be a window's name, class, visible name, or resource string\.  It may contain
the wildcards '*' and '?', which are matched in the usual Unix
filename manner\.  Multiple style options in a single
\fBStyle\fR
command are read from left to right as if they were issued one
after each other in separate commands\.  A given style always
overrides all conflicting styles that have been issued earlier (or
further left on the same style line)\.
.PP
Note: windows that have no name (WM_NAME) are given a name of
"Untitled", and windows that do not have a class (WM_CLASS,
res_class) are given class "NoClass" and those that do not have a
resource (WM_CLASS, res_name) are given resource "NoResource"\.
.PP
If a window has the resource "fvwmstyle" set, the value of that
resource is used in addition to any window names when
selecting the style\.
.PP
\fIoptions\fR
is a comma separated list containing one or more of the
following keywords\.  Each group of style names is separated by
slashes ('/')\.  The last style in these groups is the default\.
\fIBorderWidth\fR, \fIHandleWidth\fR,
\fI!Icon\fR / \fIIcon\fR, \fIMiniIcon\fR,
\fIIconBox\fR, \fIIconGrid\fR, \fIIconFill\fR, \fIIconSize\fR,
\fI!Title\fR / \fITitle\fR,
\fITitleAtBottom\fR / \fITitleAtLeft\fR / \fITitleAtRight\fR / \fITitleAtTop\fR,
\fILeftTitleRotatedCW\fR / \fILeftTitleRotatedCCW\fR,
\fIRightTitleRotatedCCW\fR / \fIRightTitleRotatedCW\fR,
\fITopTitleRotated\fR / \fITopTitleNotRotated\fR,
\fIBottomTitleRotated\fR / \fIBottomTitleNotRotated\fR,
\fI!UseTitleDecorRotation\fR / \fIUseTitleDecorRotation\fR,
\fIStippledTitle\fR / \fI!StippledTitle\fR,
\fIStippledIconTitle\fR / \fI!StippledIconTitle\fR,
\fIIndexedWindowName\fR / \fIExactWindowName\fR,
\fIIndexedIconName\fR / \fIExactIconName\fR,
\fI!Borders\fR / \fIBorders\fR,
\fI!Handles\fR / \fIHandles\fR,
\fIWindowListSkip\fR / \fIWindowListHit\fR,
\fICirculateSkip\fR / \fICirculateHit\fR,
\fICirculateSkipShaded\fR / \fICirculateHitShaded\fR,
\fICirculateSkipIcon\fR / \fICirculateHitIcon\fR,
\fILayer\fR,
\fIStaysOnTop\fR / \fIStaysOnBottom\fR / \fIStaysPut\fR,
\fISticky\fR / \fISlippery\fR,
\fIStickyAcrossPages\fR / \fI!StickyAcrossPages\fR,
\fIStickyAcrossDesks\fR / \fI!StickyAcrossDesks\fR,
\fI!StickyStippledTitle\fR / \fIStickyStippledTitle\fR,
\fI!StickyStippledIconTitle\fR / \fIStickyStippledIconTitle\fR,
\fIStartIconic\fR / \fIStartNormal\fR,
\fIColor\fR, \fIForeColor\fR, \fIBackColor\fR, \fIColorset\fR,
\fIHilightFore\fR, \fIHilightBack\fR, \fIHilightColorset\fR,
\fIBorderColorset\fR, \fIHilightBorderColorset\fR,
\fIIconTitleColorset\fR, \fIHilightIconTitleColorset\fR,
\fIIconBackgroundColorset\fR,
\fIIconTitleRelief\fR, \fIIconBackgroundRelief\fR, \fIIconBackgroundPadding\fR,
\fIFont\fR,
\fIIconFont\fR,
\fIStartsOnDesk\fR / \fIStartsOnPage\fR / \fIStartsAnyWhere\fR,
\fIStartsOnScreen\fR,
\fIStartShaded\fR / \fI!StartShaded\fR,
\fIManualPlacementHonorsStartsOnPage\fR / \fIManualPlacementIgnoresStartsOnPage\fR,
\fICaptureHonorsStartsOnPage\fR / \fICaptureIgnoresStartsOnPage\fR,
\fIRecaptureHonorsStartsOnPage\fR / \fIRecaptureIgnoresStartsOnPage\fR,
\fIStartsOnPageIncludesTransients\fR / \fIStartsOnPageIgnoresTransients\fR,
\fIIconTitle\fR / \fI!IconTitle\fR,
\fIMwmButtons\fR / \fIFvwmButtons\fR,
\fIMwmBorder\fR / \fIFvwmBorder\fR,
\fIMwmDecor\fR / \fI!MwmDecor\fR,
\fIMwmFunctions\fR / \fI!MwmFunctions\fR,
\fIHintOverride\fR / \fI!HintOverride\fR,
\fI!Button\fR / \fIButton\fR,
\fIResizeHintOverride\fR / \fI!ResizeHintOverride\fR,
\fIOLDecor\fR / \fI!OLDecor\fR,
\fIGNOMEUseHints\fR / \fIGNOMEIgnoreHints\fR,
\fIStickyIcon\fR / \fISlipperyIcon\fR,
\fIStickyAcrossPagesIcon\fR / \fI!StickyAcrossPagesIcon\fR,
\fIStickyAcrossDesksIcon\fR / \fI!StickyAcrossDesksIcon\fR,
\fIManualPlacement\fR / \fICascadePlacement\fR / \fIMinOverlapPlacement\fR /
\fIMinOverlapPercentPlacement\fR / \fITileManualPlacement\fR /
\fITileCascadePlacement\fR / \fIPositionPlacement\fR,
\fIMinOverlapPlacementPenalties\fR,
\fIMinOverlapPercentPlacementPenalties\fR,
\fIDecorateTransient\fR / \fINakedTransient\fR,
\fIDontRaiseTransient\fR / \fIRaiseTransient\fR,
\fIDontLowerTransient\fR / \fILowerTransient\fR,
\fIDontStackTransientParent\fR / \fIStackTransientParent\fR,
\fISkipMapping\fR / \fIShowMapping\fR,
\fIScatterWindowGroups\fR / \fIKeepWindowGroupsOnDesk\fR,
\fIUseDecor\fR,
\fIUseStyle\fR,
\fI!UsePPosition\fR / \fINoPPosition\fR / \fIUsePPosition\fR,
\fI!UseUSPosition\fR, \fINoUSPosition\fR / \fIUseUSPosition\fR,
\fI!UseTransientPPosition\fR, \fINoTransientPPosition\fR / \fIUseTransientPPosition\fR,
\fI!UseTransientUSPosition\fR / \fINoTransientUSPosition\fR / \fIUseTransientUSPosition\fR,
\fI!UseIconPosition\fR / \fINoIconPosition\fR / \fIUseIconPosition\fR,
\fILenience\fR / \fI!Lenience\fR,
\fIClickToFocus\fR / \fISloppyFocus\fR /
\fIMouseFocus\fR|\fIFocusFollowsMouse\fR / \fINeverFocus\fR,
\fIClickToFocusPassesClickOff\fR / \fIClickToFocusPassesClick\fR,
\fIClickToFocusRaisesOff\fR / \fIClickToFocusRaises\fR,
\fIMouseFocusClickRaises\fR / \fIMouseFocusClickRaisesOff\fR,
\fIGrabFocus\fR / \fIGrabFocusOff\fR,
\fIGrabFocusTransientOff\fR / \fIGrabFocusTransient\fR,
\fIFPFocusClickButtons\fR,
\fIFPFocusClickModifiers\fR,
\fI!FPSortWindowlistByFocus\fR / \fIFPSortWindowlistByFocus\fR,
\fIFPClickRaisesFocused\fR / \fI!FPClickRaisesFocused\fR,
\fIFPClickDecorRaisesFocused\fR / \fI!FPClickDecorRaisesFocused\fR,
\fIFPClickIconRaisesFocused\fR / \fI!FPClickIconRaisesFocused\fR,
\fI!FPClickRaisesUnfocused\fR / \fIFPClickRaisesUnfocused\fR,
\fIFPClickDecorRaisesUnfocused\fR / \fI!FPClickDecorRaisesUnfocused\fR,
\fIFPClickIconRaisesUnfocused\fR / \fI!FPClickIconRaisesUnfocused\fR,
\fIFPClickToFocus\fR / \fI!FPClickToFocus\fR,
\fIFPClickDecorToFocus\fR / \fI!FPClickDecorToFocus\fR,
\fIFPClickIconToFocus\fR / \fI!FPClickIconToFocus\fR,
\fI!FPEnterToFocus\fR / \fIFPEnterToFocus\fR,
\fI!FPLeaveToUnfocus\fR / \fIFPLeaveToUnfocus\fR,
\fI!FPFocusByProgram\fR / \fIFPFocusByProgram\fR,
\fI!FPFocusByFunction\fR / \fIFPFocusByFunction\fR,
\fIFPFocusByFunctionWarpPointer\fR / \fI!FPFocusByFunctionWarpPointer\fR,
\fIFPLenient\fR / \fI!FPLenient\fR,
\fI!FPPassFocusClick\fR / \fIFPPassFocusClick\fR,
\fI!FPPassRaiseClick\fR / \fIFPPassRaiseClick\fR,
\fIFPIgnoreFocusClickMotion\fR / \fI!FPIgnoreFocusClickMotion\fR,
\fIFPIgnoreRaiseClickMotion\fR / \fI!FPIgnoreRaiseClickMotion\fR,
\fI!FPAllowFocusClickFunction\fR / \fIFPAllowFocusClickFunction\fR,
\fI!FPAllowRaiseClickFunction\fR / \fIFPAllowRaiseClickFunction\fR,
\fIFPGrabFocus\fR / \fI!FPGrabFocus\fR,
\fI!FPGrabFocusTransient\fR / \fIFPGrabFocusTransient\fR,
\fIFPOverrideGrabFocus\fR / \fI!FPOverrideGrabFocus\fR,
\fIFPReleaseFocus\fR / \fI!FPReleaseFocus\fR,
\fI!FPReleaseFocusTransient\fR / \fIFPReleaseFocusTransient\fR,
\fIFPOverrideReleaseFocus\fR / \fI!FPOverrideReleaseFocus\fR,
\fIStartsLowered\fR / \fIStartsRaised\fR,
\fIIgnoreRestack\fR / \fIAllowRestack\fR,
\fIFixedPosition\fR / \fIVariablePosition\fR,
\fIFixedUSPosition\fR / \fIVariableUSPosition\fR,
\fIFixedPPosition\fR / \fIVariablePPosition\fR,
\fIFixedSize\fR / \fIVariableSize\fR,
\fIFixedUSSize\fR / \fIVariableUSSize\fR,
\fIFixedPSize\fR / \fIVariablePSize\fR,
\fI!Closable\fR / \fIClosable\fR,
\fI!Iconifiable\fR / \fIIconifiable\fR,
\fI!Maximizable\fR / \fIMaximizable\fR,
\fI!AllowMaximizeFixedSize\fR / \fIAllowMaximizeFixedSize\fR,
\fIIconOverride\fR / \fINoIconOverride\fR / \fINoActiveIconOverride\fR,
\fIDepressableBorder\fR / \fIFirmBorder\fR,
\fIMinWindowSize\fR,
\fIMaxWindowSize\fR,
\fIIconifyWindowGroups\fR / \fIIconifyWindowGroupsOff\fR,
\fIResizeOpaque\fR / \fIResizeOutline\fR,
\fIBackingStore\fR / \fIBackingStoreOff\fR / \fIBackingStoreWindowDefault\fR,
\fIOpacity\fR / \fIParentalRelativity\fR,
\fISaveUnder\fR / \fISaveUnderOff\fR,
\fIWindowShadeShrinks\fR / \fIWindowShadeScrolls\fR,
\fIWindowShadeSteps\fR,
\fIWindowShadeAlwaysLazy\fR / \fIWindowShadeBusy\fR / \fIWindowShadeLazy,\fR
\fIEWMHDonateIcon\fR / \fIEWMHDontDonateIcon\fR,
\fIEWMHDonateMiniIcon\fR / \fIEWMHDontDonateMiniIcon\fR,
\fIEWMHMiniIconOverride\fR / \fIEWMHNoMiniIconOverride\fR,
\fIEWMHUseStackingOrderHints\fR / \fIEWMHIgnoreStackingOrderHints\fR,
\fIEWMHIgnoreStateHints\fR / \fIEWMHUseStateHints\fR,
\fIEWMHIgnoreStrutHints\fR / \fIEWMHUseStrutHints\fR,
\fIEWMHIgnoreWindowType\fR / \fI!EWMHIgnoreWindowType\fR,
\fIEWMHMaximizeIgnoreWorkingArea\fR / \fIEWMHMaximizeUseWorkingArea\fR /
\fIEWMHMaximizeUseDynamicWorkingArea\fR,
\fIEWMHPlacementIgnoreWorkingArea\fR / \fIEWMHPlacementUseWorkingArea\fR /
\fIEWMHPlacementUseDynamicWorkingArea\fR,
\fIMoveByProgramMethod\fR,
\fIUnmanaged\fR,
\fIState\fR,
\fISnapGrid\fR,
\fISnapAttraction\fR,
\fIEdgeMoveDelay\fR,
\fIEdgeResizeDelay\fR\.
\fIEdgeMoveResistance\fR,
\fIInitialMapCommand\fR
.PP
In the above list some options are listed as
style\-option/opposite\-style\-option\.  The opposite\-style\-option for
entries that have them describes the fvwm default behavior and can
be used if you want to change the fvwm default behavior\.
.TP
.B Focus policy
.RS
.\".PP
\fIClickToFocus\fR
instructs fvwm to give the focus to a window when it is clicked
in\.  The default
\fIMouseFocus\fR
(or its alias
\fIFocusFollowsMouse\fR)
tells fvwm to give a window the focus as soon as the pointer
enters the window, and take it away when the pointer leaves the
window\.
\fISloppyFocus\fR
is similar, but doesn't give up the focus if the pointer leaves
the window to pass over the root window or a ClickToFocus window
(unless you click on it, that is), which makes it possible to move
the mouse out of the way without losing focus\.  A window with the
style
\fINeverFocus\fR
never receives the focus\.  This is useful for modules like
\fBFvwmButtons\fR\.
for example\.
Note: Once any of the "FP\.\.\." styles has been used, the defaults
that come with the basic focus policies are not restored when the
latter are used again\.  For example, once !FPGrabFocus has been
used, using ClickToFocus does not restore FPGrabFocus\.
.PP
The focus model can be augmented with several additional options\.
In fvwm\-2\.5\.3 and later, there are a large number of advanced
options beginning with "FP" or "!FP"\.  These options shall replace
the older options one day and are described first\.  Using any of
these new options may limit compatibility with older releases\.  In
general, options beginning with "FP" turn a feature on, while
those beginning with "!FP" turn it off\.
.RE
.TP
.B Focusing the window
.RS
.\".PP
With
\fIFPEnterToFocus\fR,
when the pointer enters a window it receives focus\.
.PP
With
\fIFPLeaveToUnfocus\fR
a window loses focus when the pointer leaves it\.
.PP
With
\fIFPClickToFocus\fR,
\fIFPClickDecorToFocus\fR or
\fIFPClickIconToFocus\fR,
a window receives focus when the inside of the window or the
decorations or its icon is clicked\.
.PP
The
\fIFPFocusByProgram\fR
style allows windows to take the focus themselves\.
.PP
The
!\fIFPFocusByFunction\fR
style forbids that a window receives the focus via the
\fBFocus\fR and \fBFlipFocus\fR
commands\.
.PP
The
\fIFPFocusByFunctionWarpPointer\fR
style controls if the pointer is warped to a selected window
when the
\fBFocus\fR
command is used\.
.PP
\fIFPLenient\fR
allows focus on windows that do not want it, like
\fBFvwmPager\fR
or xclock\.
.PP
The
\fIFPFocusClickButtons\fR
style takes a list of mouse buttons that can be clicked to focus
or raise a window when the appropriate style is used\.  The default
is to use the first three buttons ("123")\.
.PP
The
\fIFPFocusClickModifiers\fR
style takes a list of modifier keys just like the
\fBKey\fR
command\.  The exact combination of modifier keys must be pressed
for the click to focus or raise a window to work\.  The default is
to use no modifiers ("N")\.
.PP
With the
\fIFPPassFocusClick\fR
style, the click that was used to focus a window is passed to
the application\.
.PP
With the
\fIFPAllowFocusClickFunction\fR
style, the click that was used to focus a window can also
trigger a normal action that was bound to the window with the
\fBMouse\fR
command)\.
.PP
If the
\fIFPIgnoreFocusClickMotion\fR
style is used, clicking in a window and then dragging the pointer
with the button held down does not count as the click to focus the
window\.  Instead, the application processes these events
normally\.  This is useful to select text in a terminal window with
the mouse without raising the window\.  However, mouse bindings on
the client window are not guaranteed to work anymore (see
\fBMouse\fR
command)\.  This style forces the initial click to be
passed to the application\.  The distance that the pointer must be
moved to trigger this is controlled by the
\fBMoveThreshold\fR
command\.
.PP
The
\fIFPSortWindowlistByFocus\fR and !\fIFPSortWindowlistByFocus\fR
styles control whether the internal window list is sorted in the
order the windows were focused or in the order they were created\.
The latter is the default for
\fIClickToFocus\fR and \fISloppyFocus\fR\.
.PP
\fBClicking the window to raise\fR
.PP
The styles
\fIFPClickRaisesFocused\fR, \fIFPClickDecorRaisesFocused\fR and
\fIFPClickIconRaisesFocused\fR
allow to raise the window when the interior or the decorations or
the icon of the window is clicked while the window is already
focused\.
.PP
The styles
\fIFPClickRaisesUnfocused\fR, \fIFPClickDecorRaisesUnfocused\fR and
\fIFPClickIconRaisesUnfocused\fR
allow to raise the window when the interior or the decorations or
the icon of the window is clicked while the window is not yet
focused\.
.PP
With the
\fIFPPassRaiseClick\fR
style, the click that was used to raise the window is passed to
the application\.
.PP
With the
\fIFPAllowRaiseClickFunction\fR
style, the click that was used to raise the window can also
trigger a normal action that was bound to the window with the
\fBMouse\fR
command\.
.PP
If the
\fIFPIgnoreRaiseClickMotion\fR
style is used, clicking in a window and then dragging the pointer
with the button held down does not count as the click to raise the
window\.  Instead, the application processes these events
normally\.  This is useful to select text in a terminal window with
the mouse without raising the window\.  However, mouse bindings on
the client window are not guaranteed to work anymore (see
\fBMouse\fR
command\.  Note that this style forces that the initial click is
passed to the application\.  The distance that the pointer must be
moved to trigger this is controlled by the
\fBMoveThreshold\fR
command\.
.PP
\fBGrabbing the focus when a new window is created\fR
.PP
New normal or transient windows with the
\fIFPGrabFocus\fR or \fIFPGrabFocusTransient\fR
style automatically receive the focus when they are created\.
\fIFPGrabFocus\fR
is the default for windows with the
\fIClickToFocus\fR
style\.  Note that even if these styles are disabled, the
application may take the focus itself\.  Fvwm can not prevent this\.
.PP
The
\fIOverrideGrabFocus\fR
style instructs fvwm to never take away the focus from such a
window via the
\fIGrabFocus\fR or \fIGrabFocusTransient\fR
styles\.  This can be useful if you like to have transient windows
receive the focus immediately, for example in a web browser, but
not while you are working in a terminal window or a text
processor\.
.PP
The above three styles are accompanied by
\fIFPReleaseFocus\fR, \fIFPReleaseFocusTransient\fR and
\fIFPOverrideReleaseFocus\fR\.
These control if the focus is returned to another window when the
window is closed\.  Otherwise no window or the window under the
pointer receives the focus\.
.PP
\fIClickToFocusPassesClickOff\fR and \fIClickToFocusPassesClick\fR
controls whether a mouse click to focus a window is sent to the
application or not\.  Similarly,
\fIClickToFocusRaisesOff\fR/\fIMouseFocusClickRaisesOff\fR
and
\fIClickToFocusRaises\fR/\fIMouseFocusClickRaises\fR
control if the window is raised (but depending on the focus
model)\.
.PP
Note: in fvwm versions prior to
2\.5\.3, the "Click\.\.\." options applied only to windows with
\fIClickToFocus\fR
while the "Mouse\.\.\." options applied to windows with a different
focus policy\.  This is no longer the case\.
.PP
The old
\fIGrabFocus\fR
style is equivalent to using
\fIFPGrabFocus\fR + \fIFPReleaseFocus\fR\.
.PP
The old
\fIGrabFocusTransient\fR
style is equivalent to using
\fIFPGrabFocusTransient\fR + \fIFPReleaseFocusTransient\fR\.
.PP
\fILenience\fR
is equivalent to the new style
\fIFPLenient\fR\.
.RE
.TP
.B Window title
.RS
.\".PP
The
\fITitle\fR and !Title
options determine if the window has a title\-bar or not\.  By
default all windows have a title\-bar\.
\fINoTitle\fR
is equivalent to
\fI!Title\fR
but is deprecated\.
.PP
Windows with the
\fITitleAtBottom\fR, \fITitleAtLeft\fR or \fITitleAtRight\fR
style have a title\-bar below, to the left or to the right of the
window instead of above as usual\.  The
\fITitleAtTop\fR
style restores the default placement\.  Even if the window has the
\fI!Title\fR
style set, this affects the
\fBWindowShade\fR
command\.  Please check the
\fBWindowShade\fR
command for interactions between that command and these styles\.
Titles on the left or right side of the windows are augmented by
the following styles:
.PP
Normally, the text in titles on the left side of a window is
rotated counterclockwise by 90 degrees from the normal upright
position and 90 degrees clockwise for titles on the right side\.
It can also be rotated in the opposite directions with
\fILeftTitleRotatedCW\fR if \fITitleAtLeft\fR
is used, and with
\fIRightTitleRotatedCCW\fR if \fITitleAtRight\fR
is used\.  The defaults can be restored with
\fILeftTitleRotatedCCW\fR and \fIRightTitleRotatedCW\fR\.
A normal horizontal text may be rotated as well with
\fITopTitleRotated\fR if \fITitleAtTop\fR
is used, and with
\fIBottomTitleRotated\fR if \fITitleAtBottom\fR
is used\.  The defaults can be restored with
\fITopTitleNotRotated\fR and \fIBottomTitleNotRotated\fR\.
.PP
By default the title bar decoration defined using the
\fBTitleStyle\fR
command is rotated following the title text rotation (see the
previous paragraph)\.  This can be disabled by using the
!\fIUseTitleDecorRotation\fR
style\.
\fIUseTitleDecorRotation\fR
reverts back to the default\.
.PP
With the
\fIStippledTitle\fR
style, titles are drawn with the same effect that is usually
reserved for windows with the
\fISticky\fR, \fIStickyAcrossPages\fR or \fIStickyAcrossDesks\fR
style\.
\fI!StippledTitle\fR
reverts back to normal titles\.
\fIStippledTitleOff\fR
is equivalent to
\fI!StippledTitle\fR
but is deprecated\.
.PP
\fIColor\fR
takes two arguments\.  The first is the window\-label text color and
the second is the window decorations normal background color\.  The
two colors are separated with a slash\.  If the use of a slash
causes problems then the separate
\fIForeColor\fR and \fIBackColor\fR
options can be used\.
.PP
\fBColorset\fR
takes the colorset number as its sole argument and overrides the
colors set by
\fIColor\fR\.
Instead, the corresponding colors from the given colorset are
used\.  Note that all other features of a colorset are not used\.
Use the
\fBColorset\fR
decoration style in the
\fBTitleStyle\fR and \fIButtonStyle\fR
command for that\.
To stop using the colorset, the colorset number is omitted\.
.PP
The
\fIHilightFore\fR, \fIHilightBack\fR and \fIHilightColorset\fR
style options work exactly like
\fIForeColor\fR, \fIBackColor\fR and \fIColorset\fR
but are used only if the window has the focus\.  These styles
replace the old commands
\fBHilightColor\fR and \fIHilightColorset\fR\.
.PP
\fIBorderColorset\fR
takes the colorset number as its sole argument and overrides the
colors set by
\fIColor\fR or \fIColorset\fR\.
for the window border\.  To stop using a colorset, the argument is
omitted\.
.PP
The
\fIHilightBorderColorset\fR
style option works similarly to
\fIBorderColorset\fR
but is used when the window has the focus\.
.PP
!\fIIconTitle\fR
disables displaying icon labels while the opposite style
\fIIconTitle\fR
enables icon labels (default behaviour)\.
\fINoIconTitle\fR
is equivalent to
\fI!IconTitle\fR
but is deprecated\.
.PP
\fIIconTitleColorset\fR
takes the colorset number as its sole argument and overrides the
colors set by
\fIColor\fR or \fIColorset\fR\.
To stop using this colorset, the argument is omitted\.
.PP
\fIHilightIconTitleColorset\fR
takes the colorset number as its sole argument and overrides the
colors set by
\fBHilightColor\fR or \fIHilightColorset\fR\.
To stop using this colorset, the argument is omitted\.
.PP
\fIIconBackgroundColorset\fR
takes the colorset number as its sole argument and uses it to set
a background for the icon picture\.  By default the icon picture is
not drawn onto a background image\.  To restore the default, the
argument is omitted\.
.PP
\fIIconTitleRelief\fR
takes one numeric argument that may be between \-50 and +50 pixels
and defines the thickness of the 3D relief drawn around the icon
title\.  With negative values the icon title gets a pressed in
look\.  The default is 2 and it is restored if the argument is
omitted\.
.PP
\fIIconBackgroundRelief\fR
takes one numeric argument that may be between \-50 and +50 pixels
and defines the thickness of the 3D relief drawn around the icon
picture background (if any)\.  With negative values the icon
background gets a pressed in look\.  The default is 2 and it is
restored if the argument is omitted\.
.PP
\fIIconBackgroundPadding\fR
takes one numeric argument that may be between 0 and 50 pixels and
defines the amount of free space between the relief of the icon
background picture (if any) and the icon picture\.  The default is 2
and it is restored if the argument is omitted\.
.PP
The
\fIFont\fR and \fIIconFont\fR
options take the name of a font as their sole argument\.  This font
is used in the window or icon title\.  By default the font given in
the
\fBDefaultFont\fR
command is used\.  To revert back to the default, use the style
without the name argument\.  These styles replace the older
\fBWindowFont\fR and \fIIconFont\fR
commands\.
.PP
The
\fIIndexedWindowName\fR
style causes fvwm to use window titles in the form
.sp
.RS 4
.nf
name (i)
.fi
.RE
.PP
where
\fIname\fR
is the exact window name and
\fIi\fR
is an integer which represents the
\fIi th\fR
window with
\fIname\fR
as window name\.
\fIExactWindowName\fR
restores the default which is to use the exact window name\.
\fIIndexedIconName\fR
and
\fIExactIconName\fR
work the same as
\fIIndexedWindowName\fR
and
\fIExactWindowName\fR
styles but for the icon titles\.
.RE
.TP
.B Title buttons
.RS
.\".PP
\fIButton\fR and !\fIButton\fR
take a numeric argument which is the number of the title\-bar
button which is to be shown or omitted\.
\fINoButton\fR
is equivalent to
\fI!Button\fR
but is deprecated\.
.PP
\fIMwmButtons\fR
makes the
\fBMaximize\fR
button look pressed\-in when the window is maximized\.  See the
\fIMwmDecorMax\fR
flag in
\fBButtonStyle\fR
for more information\.  To switch this style off again, use the
\fBFvwmButtons\fR
style\.
.RE
.TP
.B Borders
.RS
.\".PP
!\fIBorders\fR
suppresses the window border (but not the title) completely\.  The
\fIBorders\fR
style enables them again\.  Without borders, all other styles
affecting window borders are meaningless\.
.PP
\fIMwmBorder\fR
makes the 3D bevel more closely match Mwm's\.
\fIFvwmBorder\fR
turns off the previous option\.
.PP
With the
!\fIHandles\fR
style, the window does not get the handles in the window corners
that are commonly used to resize it\.  With
\fI!Handles\fR,
the width from the
\fIBorderWidth\fR
style is used\.  By default, or if
\fIHandles\fR
is specified, the width from the
\fIHandleWidth\fR
style is used\.
\fINoHandles\fR
is equivalent to
\fI!Handles\fR
but is deprecated\.
.PP
\fIHandleWidth\fR
takes a numeric argument which is the width of the border to place
the window if it does have resize\-handles\.  Using HandleWidth
without an argument restores the default\.
.PP
\fIBorderWidth\fR
takes a numeric argument which is the width of the border to place
the window if it does not have resize\-handles\.  It is used only if
the
\fI!Handles\fR
style is specified too\.  Using BorderWidth
without an argument restores the default\.
.PP
\fIDepressableBorder\fR
makes the border parts of the window decoration look sunken in
when a button is pressed over them\.  This can be disabled again
with the
\fIFirmBorder\fR
style\.
.RE
.TP
.B Icons, shading, maximizing, movement, resizing
.RS
.\".PP
\fIIcon\fR
takes an (optional) unquoted string argument which is the icon
bitmap or pixmap to use\.  Icons specified this way override pixmap
icons, but not icon windows or the ewmh icon, provided by the
client in the application (with the WM_HINTS property or with the
ewmh _NET_WM_ICON property)\.  The
\fIIconOverride\fR
style changes the behavior to override any client\-provided icons;
the
\fINoIconOverride\fR
style changes the behavior to not override any client\-provided
icons; the default overriding behavior can be activated with the
\fINoActiveIconOverride\fR
style\.  With this style, fvwm uses application provided icons if
the icon is changed but uses the icon provided in the
configuration file until then\.
.PP
There is one exception to these rules, namely
.sp
.RS 4
.nf
Style * Icon unknown\.xpm
.fi
.RE
.PP
doesn't force the unknown\.xpm icon on every window, it just sets
the default icon like the DefaultIcon command\.  If you really want
all windows to have the same icon, you can use
.sp
.RS 4
.nf
Style ** Icon unknown\.xpm
.fi
.RE
.PP
If the
\fINoIcon\fR
attribute is set then the specified window simply disappears when
it is iconified\.  The window can be recovered through the
window\-list\.  If
\fIIcon\fR
is set without an argument then the
\fINoIcon\fR
attribute is cleared but no icon is specified\.  An example which
allows only the
\fBFvwmPager\fR
module icon to exist:
.sp
.RS 4
.nf
Style * NoIcon
Style FvwmPager Icon
.fi
.RE
.PP
\fIIconBox\fR
takes no argument, four numeric arguments (plus optionally a
screen specification), an X11 geometry string or the string
"none":
.sp
.RS 4
.nf
IconBox\fI [\fRscreen scr\-spec\fI] \fRl t r b
.fi
.RE
.PP
or
.sp
.RS 4
.nf
IconBox geometry
.fi
.RE
.PP
Where
\fIl\fR
is the left coordinate,
\fIt\fR
is the top,
\fIr\fR
is right and
\fIb\fR
is bottom\.  Negative coordinates indicate distance from the right
or bottom of the screen\.
If the first argument is the word
\fIscreen\fR,
the
\fIscr-spec\fR
argument specifies the Xinerama screen on which the IconBox is
defined\.  It can be the usual screen Xinerama specification, 'p',
\(aac', 'g', a screen number or the additional 'w' for the screen
where the window center is located\.  This is only useful with
multiple Xinerama screens\.
The "l t r b" specification is more flexible than an X11 geometry\.
For example:
.sp
.RS 4
.nf
IconBox \-80 240 \-1 \-1
.fi
.RE
.PP
defines a box that is 80 pixels wide from the right edge,
240 pixels down from the top, and continues to the bottom of
the screen\.
.PP
Perhaps it is easier to use is an X11
geometry string though:
.sp
.RS 4
.nf
IconBox 1000x70\-1\-1
.fi
.RE
.PP
places an 1000 by 70 pixel icon box on the bottom of the screen
starting in the lower right hand corner of the screen\.
One way to figure out a geometry like this is to use a window
that resizes in pixel increments, for example, xv\.
Then resize and place the xv window where you want the iconbox\.
Then use FvwmIdent to read the windows geometry\.
The icon box is a region of the screen
where fvwm attempts to put icons for any matching window, as long
as they do not overlap other icons\.
Multiple icon boxes can be
defined as overflow areas\.  When the first icon box is full, the
second one is filled\.  All the icon boxes for one style must be
defined in one
\fBStyle\fR
command\.  For example:
.sp
.RS 4
.nf
Style * IconBox \-80 240 \-1 \-1, \e
        IconBox 1000x70\-1\-1
.fi
.RE
.PP
A Style command with the IconBox option replaces any icon box
defined previously by another Style command for the same style\.
Thats why the backslash in the previous example is required\.
.PP
Note: The geometry for the icon box command takes the additional
screen specifier "@w" in case a Xinerama setup is used\.  This
designates the screen where the window center is located\.  The
additional screen specifier is not allowed anywhere else\.
.PP
If you never define an icon box, or you fill all the icon boxes,
fvwm has a default icon box that covers the screen, it fills top
to bottom, then left to right, and has an 80x80 pixel grid\.  To
disable all but the default icon box you can use IconBox without
arguments in a separate
\fBStyle\fR
command\.  To disable all icon boxes including the default icon
box, the argument "none" can be specified\.
.PP
Hint: You can auto arrange your icons in the icon box with a
simple fvwm function\.  Put the "DeiconifyAndRearrange" function
below in your configuration file:
.sp
.RS 4
.nf
\fBAddToFunc\fR DeiconifyAndRearrange
 + C \fBIconify\fR off
 + C \fBAll\fR (CurrentPage, Iconic) \fBPlaceAgain\fR Icon
.fi
.RE
.PP
And then replace all places where you call the
\fBIconify\fR
command to de\-iconify an icon with a call to the new
function\.  For example replace
.sp
.RS 4
.nf
\fBAddToFunc\fR IconFunc
 + C \fBIconify\fR off
 + M \fBRaise\fR
 + M \fBMove\fR
 + D \fBIconify\fR off

\fBMouse\fR 1 I A \fBIconify\fR off
.fi
.RE
.PP
with
.sp
.RS 4
.nf
\fBAddToFunc\fR IconFunc
 + C DeiconifyAndRearrange
 + M \fBRaise\fR
 + M \fBMove\fR
 + D DeiconifyAndRearrange

\fBMouse\fR 1 I A DeiconifyAndRearrange
.fi
.RE
.PP
\fIIconGrid\fR
takes 2 numeric arguments greater than zero\.
.sp
.RS 4
.nf
\fIIconGrid x y\fR
.fi
.RE
.PP
Icons are placed in an icon box by stepping through the icon box
using the
\fIx\fR and \fIy\fR
values for the icon grid, looking for a free space\.  The default
grid is 3 by 3 pixels which gives a tightly packed appearance\.  To
get a more regular appearance use a grid larger than your largest
icon\.  Use the
\fIIconSize\fR
definition to clip an icon to a maximum size\.  An
\fIIconGrid\fR
definition must follow the
\fBIconBox\fR
definition that it applies to:
.sp
.RS 4
.nf
Style * IconBox \-80x240\-1\-1, IconGrid 90 90
.fi
.RE
.PP
\fIIconFill\fR
takes 2 arguments\.
.sp
.RS 4
.nf
IconFill \fIBottom Right\fR
.fi
.RE
.PP
Icons are placed in an icon box by stepping through the icon box
using these arguments to control the direction the box is filled
in\.  By default the direction is left to right, then top to bottom\.
This would be expressed as:
.sp
.RS 4
.nf
IconFill left top
.fi
.RE
.PP
To fill an icon box in columns instead of rows, specify the
vertical direction (top or bottom) first\.  The directions can be
abbreviated or spelled out as follows: "t", "top", "b", "bot",
"bottom", "l", "lft", "left", "r", "rgt", "right"\.  An
\fBIconFill\fR
definition must follow the
\fBIconBox\fR
definition that it applies to:
.sp
.RS 4
.nf
Style * IconBox \-80x240\-1\-1, IconFill b r
.fi
.RE
.PP
\fIIconSize\fR
sets limits on the size of an icon image\.  Both user\-provided
and application\-provided icon images are affected\.
.sp
.RS 4
.nf
IconSize\fI [ \fRwidth\fI \fRheight\fI [ \fRmaxwidth\fI \fRmaxheight\fI ] ]\fR
.fi
.RE
.PP
All arguments are measured in pixels\.  When all four arguments are
passed to
\fIIconSize,\fR
\fIwidth\fR
and
\fIheight\fR
represent the minimum size of an icon, and
\fImaxwidth\fR
and
\fImaxheight\fR
represent the maximum size of an icon\.  Icon images that are smaller
than the minimum size are padded\.  Icon images that are bigger than
the maximum size are clipped\.
.PP
If only two arguments are passed to
\fIIconSize,\fR
\fIwidth\fR
and
\fIheight\fR
represent the absolute size of an icon\.  Icons covered by this style
are padded or clipped to achieve the given size\.
.PP
If no arguments are specified, the default values are used for each
dimension\.  This effectively places no limits on the size of an icon\.
.PP
The value of "\-1" can be used in place of any of the arguments to
specify the default value for that dimension\.
.PP
Note that application\-provided icon windows are not affected\.
.PP
\fIMiniIcon\fR
specifies a pixmap to use as the miniature icon for the
window\.  This miniature icon can be drawn in a title\-bar button
(see
\fBButtonStyle\fR),
and can be used by various fvwm modules
(\fBFvwmWinList\fR, \fBFvwmIconMan\fR and \fBFvwmTaskBar\fR)\.
It takes the name of a pixmap as an argument\.
.PP
\fIWindowShadeShrinks\fR and \fIWindowShadeScrolls\fR
control if the contents of a window that is being shaded with the
\fBWindowShade\fR
command are scrolled (default) or if they stay in place\.  The
shrinking mode is a bit faster
.PP
The
\fIWindowShadeSteps\fR
option selects the number of steps for animation when shading a
window with
\fBWindowShade\fR\.
It takes one number as its argument\.  If the number has a trailing '\fIp\fR'
it sets the number of pixels to use as the step size instead of
a fixed number of steps\.  0 disables the animation\.  This happens
too if the argument is omitted or invalid\.
.PP
The
\fBWindowShade\fR
command has two modes of operation: busy and lazy shading\.  Busy
shading can be 50% slower than lazy shading, but the latter can
look strange under some conditions, for example, if the window
borders, buttons or the title are filled with a tiled pixmap\.
Also, the window handles are not drawn in lazy mode and the border
relief may only be drawn partially right before the window reaches
the shaded state or tight after leaves the unshaded state\.  By
default, fvwm uses lazy mode if there are no bad visual effects
(not counting the window handles) and busy mode otherwise\.  Use
the
\fIWindowShadeAlwaysLazy or WindowShadeBusy\fR
to force using the lazy or busy mode\.  The default setting is
restored with
\fIWindowShadeLazy\fR\.
.PP
\fIResizeOpaque\fR
instructs fvwm to resize the corresponding windows with their
contents visible instead of using an outline\.  Since this causes
the application to redraw frequently it can be quite slow and make
the window flicker excessively, depending on the amount of
graphics the application redraws\.  The
\fIResizeOutline\fR
style (default) negates the
\fIResizeOpaque\fR
style\.  Many applications do not like their windows being resized
opaque, e\.g\. XEmacs, Netscape or terminals with a pixmap
background\.  If you do not like the result, do not use the
\fIResizeOpaque\fR
style for these windows\.  To exempt certain windows from opaque
resizing you could use these lines in your configuration file:
.sp
.RS 4
.nf
Style * ResizeOpaque
Style rxvt ResizeOutline
Style emacs ResizeOutline
.fi
.RE
.PP
\fISticky\fR
makes the window sticky, i\.e\. it is always visible on each page
and each desk\.  The opposite style,
\fISlippery\fR
reverts back to the default\.
.PP
\fIStickyIcon\fR
makes the window sticky when it's iconified\.  It de\-iconifies on
top the active desktop\.
\fISlipperyIcon\fR
reverts back to the default\.
.PP
\fIStickyAcrossPages\fR and \fIStickyAcrossPagesIcon\fR
work like
\fISticky\fR and \fIStickyIcon\fR,
but stick the window only across pages, not desks while
\fIStickyAcrossDesks and StickyAcrossDesksIcon\fR
works the other way round\.
.PP
Windows that have been marked as
\fISticky\fR or
\fIStickyAcrossDesks\fR or
\fIStickyAcrossPages\fR will have stipples drawn
on the titlebar\.  This can be negated with the
!\fIStickyStippledTitle\fR
style\.  The style
\fIStickyStippledTitle\fR
puts back the stipples where that window has also been marked as
\fISticky\fR\.  Note that this is the default style for
\fISticky\fR windows\.  Sticky icons will have stipples drawn
on the icon title\.  This can be disabled in the same way with the
!\fIStickyStippledIconTitle\fR
style\.
.PP
Windows with the
\fIStartIconic\fR
style are shown as icons initially\.  Note that some applications
counteract that by deiconifying themselves\.  The default is to not
iconify windows and can be set with the
\fIStartNormal\fR
style\.
.PP
\fIStickyIcon\fR
makes the window sticky when it's iconified\.  It de\-iconifies on
top the active desktop\.
\fISlipperyIcon\fR
reverts back to the default\.
.PP
\fIStickyIconPage\fR
works like
\fIStickyIcon\fR,
but sticks the icon only across pages, not desks while
\fIStickyIconDesk\fR
works the other way round\.
.PP
\fIStippledIconTitle\fR
works like
\fIStippledTitle\fR
in that it draws stipples on the titles of icons but doesn't
make the icon sticky\.
.PP
\fIIgnoreRestack\fR
makes fvwm ignore attempts of clients to raise or lower their own
windows\.  By default, the opposite style,
\fIAllowRestack\fR
is active\.
.PP
\fIFixedPosition\fR and \fIFixedUSPosition\fR
make fvwm ignore attempts of the user to move the window\.  It is
still possible to move the window by resizing it\.  To allow the
user to move windows, use the
\fIVariablePosition\fR or \fIVariableUSPosition\fR
style\.
.PP
\fIFixedSize\fR and \fIFixedUSSize\fR
make fvwm ignore attempts of the user to resize the window\.  To
allow the user to resize windows, use the
\fIVariableSize\fR or \fIVariableUSSize\fR
style\.
.PP
\fIFixedPPosition\fR and \fIFixedPSize\fR
make fvwm ignore attempts of the program to move or resize its
windows\.  To allow this kind of actions, use the
\fIVariablePPosition\fR or \fIVariablePSize\fR
style\.  These styles may sometimes affect the initial placement
and dimensions of new windows (depending on the application)\.  If
windows are created at strange places, try either the
\fIVariablePPosition\fR or \fINoPPosition\fR
styles\.  The
\fIFixedPSize\fR
style may screw up window dimensions for some applications\.  Do Not
use this style in this case\.
.PP
\fIMoveByProgramMethod\fR
affects how fvwm reacts to requests by the application to move its
windows\.  By default, fvwm tries to detect which method to use,
but it sometimes detects the wrong method\.  You may come across a
window that travels across the screen by a few pixels when the
application resizes it, moves to a screen border with the frame
decorations off screen, that remembers its position for the next
time it starts but appears in a slighly shifted position, or that
attepmts to become full screen but has the\.  Try out both options,
\fIUseGravity\fR and \fIIgnoreGravity\fR
on the window (and that window only) and see if that helps\.  By
default, fvwm uses the
\fIAutoDetect\fR
method\.  Once the method was detected, it is never changed again\.
As long as fvwm can not detect the proper method, it uses
\fIIgnoreGravity\fR\.
To force fvwm to retry the detection, use one of the other two
options first and then use
\fIAutoDetect\fR
again\.
.PP
Note: This option was introduced to alleviate a problem with the
ICCCM specification\.  The ICCCM clearly states that the
\fIUseGravity\fR
option should be used, but traditionally applications ignored this
rule\.
.PP
\fIClosable\fR
enables the functions
\fBClose\fR,
\fBDelete\fR
and
\fBDestroy\fR
to be performed on the windows\.  This is on by default\.
The opposite,
\fI!Closable\fR,
inhibits the window to be closed\.
.PP
\fIIconifiable\fR
enables the function
\fBIconify\fR
to be performed on the windows\.
This is on by default\.
The opposite,
\fI!Iconifiable\fR,
inhibits the window from being iconified\.
.PP
\fIMaximizable\fR
enables the function
\fBMaximize\fR
to be performed on the windows\.
This is on by default\.
The opposite,
\fI!Maximizable\fR,
inhibits the window from being maximized\.
.PP
\fIAllowMaximizeFixedSize\fR
enables the function
\fBMaximize\fR
to be performed on windows that are not resizable, unless
maximization has been disabled either using the style
\fI!Maximizable\fR
or through WM hints\.  This is on by default\.  The opposite,
\fI!AllowMaximizeFixedSize\fR,
inhibits all windows that are not resizable from being maximized\.
.PP
\fIResizeHintOverride\fR
instructs fvwm to ignore the program supplied minimum and maximum
size as well as the resize step size (the character size in many
applications)\.
This can be handy for broken applications that refuse to be
resized\.  Do not use it if you do not need it\.  The default
(opposite) style is
\fINoResizeOverride\fR\.
.PP
\fIMinWindowSize [ width [ p ] height [ p ] ]\fR
Tells fvwm the minimum width and height of a window\.  The values
are the percentage of the total screen area\.  If the letter '\fIp\fR'
is appended to either of the values, the numbers are interpreted
as pixels\.  This command is useful for certain versions of xemacs
which freak out if their windows become too small\.  If you omit
he parameters or their values are invalid, both limits are set to
0 pixels (which is the default value)\.
.PP
\fIMaxWindowSize [ width [ p ] height [ p ] ]\fR
Tells fvwm the maximum width and height of a window\.  The values
are the percentage of the total screen area\.  If the letter '\fIp\fR'
is appended to either of the values, the numbers are interpreted
as pixels\.  This command is useful to force large application
windows to be fully visible\.  Neither
\fIheight\fR nor \fIwidth\fR
may be less than 100 pixels\.  If you omit the parameters or their
values are invalid, both limits are set to 32767 pixels (which is
the default)\.
.PP
With
\fIIconifyWindowGroups\fR
all windows in the same window group are iconified and deiconified
at once when any window in the group is (de)iconified\.
The default is
\fIIconifyWindowGroupsOff\fR,
which disables this behavior\.  Although a number of applications
use the window group hint, it is rarely used in a proper way, so
it is probably best to use
\fIIconifyWindowGroups\fR
only for selected applications\.
.PP
The option \fISnapAttraction\fR
affects interactive window movement: If during an interactive
move the window or icon comes within
\fIproximity\fR pixels of another the window
or icon, it is moved to make the borders adjoin\.  The default of 0
means that no snapping happens\.  Calling this command without
arguments turns off snap attraction and restores the default
behavior\.  Please refer also to the \fBSnapGrid\fR
command\.
.PP
The second argument determined is optional and may be set to one of the
five following values: With \fIAll\fR both icons and
windows snap to other windows and other icons\.
\fISameType\fR lets windows snap only to windows, and
icons snap only to icons\.  With \fIWindows\fR windows snap
only to other windows\.  Similarly with \fIIcons\fR icons
snap only to other icons\.  With \fINone\fR no snapping
takes place\.  This option can be useful in conjunction with the following
argument if you only want to snap against the screen edges\.  The default
behavior is \fIAll\fR\.
.PP
The third and last optional argument may be set to one of the
four following values: 
.sp
.RS 4
\h'-04'\(bu\h'+03'With
\fIScreen\fR
the already snapping icons or windows, which is controlled by the second argument, will snap now also to the screen edges\.
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fIScreenWindows\fR
snaps only windows to the screen edges\.
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fIScreenIcons\fR
snaps only icons to the screen edges\.
.RE
.sp
.RS 4
\h'-04'\(bu\h'+03'\fIScreenAll\fR
snaps windows and icons to the screen edges\.
.RE
.PP
The option \fISnapGrid\fR defines an
invisible grid on the screen\.  During an interactive move a window
or icon is positioned such that its location (top left corner) is
coincident with the nearest grid point\.  The default
\fIx\-grid\-size\fR and
\fIy\-grid\-size\fR setting are both 1, which
is effectively no grid all\.
.PP
An interactive move with both \fBSnapGrid\fR and
\fISnapAttraction\fR results in the window
being moved to be adjacent to the nearest window border (if within
snap proximity) or grid position\.  The window moves the shortest
distance possible to satisfy both \fBSnapGrid\fR and
\fISnapAttraction\fR\.  Note that the x and y
coordinates are not coupled\.  For example, a window may snap to
another window on the x axis while snapping to a grid point on the
y axis\.  Using this style without arguments reinstates the default
settings\.
.PP
The styles \fIEdgeMoveDelay\fR and
\fIEdgeResizeDelay\fR tells how hard it
should be to change the desktop viewport by moving or resizing a
window over the edge of the screen\.  The parameter tells how many
milliseconds the pointer must spend on the screen edge before fvwm
moves the viewport\.  The command \fBEdgeScroll\fR
determines how far the viewport is scrolled\.  If \-1 is given as
the delay, page flipping is disabled completely\.  The defaults are
no delay for moving (0) and no flipping for resizing (\-1)\.  Using
these styles without any argument restores the default
settings\.  Note that, with
.sp
.RS 4
.nf
\fBEdgeScroll\fR 0 0
.fi
.RE
.PP
it is still possible to move or resize windows across the
edge of the current screen\.  See also \fBEdgeThickness\fR\.
.PP
The option \fIEdgeMoveResistance\fR
makes it easier to place a window directly adjacent to the
screen's or xinerama screen's border\.  It takes one or two
parameters\.  The first parameter tells how many pixels over the
edge of the screen a window's edge must move before it actually
moves partially off the screen\.  The optional second parameter
does the same as the first, but for individual Xinerama screens\.
If omitted, the value of the first parameter is assumed for this
type of movement\.  Set the second parameter to 0 to zero to ignore
individual xinerama screen edges\.  Note that the center of the
window being moved determines the xinerama screen on which the
window should be kept\.  Both values are 0 by default\.  To restore
the defaults, the option \fIEdgeMoveResistance\fR can be used without any
parameters\.
.PP
The option \fIInitialMapCommand\fR allows
for any valid fvwm command or function to run when the window is 
initially mapped by fvwm\.  Example:
.sp
.RS 4
.nf
\fBStyle\fR MyWindow StartsOnPage 0 0, InitialMapCommand Iconify
.fi
.RE
.PP
This would hence place the window called \fIMyWindow\fR
on page 0 0 for the current desk, and immediately run the \fBIconify\fR
command on that window\.
.PP
Note that should \fIInitialMapCommand\fR be
used as a global option for all windows, but there is a need that some
windows should not have this command applied, then an action of 
\fBNop\fR can be used on those windows, as in the following
example:
.sp
.RS 4
.nf
\fBStyle\fR * InitialMapCommand Iconify
\fBStyle\fR XTeddy InitialMapCommand Nop
.fi
.RE
.RE
.TP
.B Window Manager placement
.RS
.\".PP
Applications can place windows at a particular spot on the screen
either by window manager hints or a geometry specification\.  When
they do neither, then the window manager steps in to find a place
for the window\.  Fvwm knows several ways to deal with this
situation\.  The default is
\fITileCascadePlacement\fR\.
.PP
\fIPositionPlacement\fR
[\fICenter\fR|\fIUnderMouse\fR|\fImove\-arguments\fR]
When used without an argument, new windows are placed in the
top left corner of the display\.  With the argument
\fICenter\fR,
all new window appear at the center of the screen, and with
\fIUnderMouse\fR,
windows are centered under the mouse pointer where possible\.  If the window
is unable to fit on the screen because the pointer is at the edge of the
screen, then the window is forced on\-screen using this option\.  If any other
\fImove\-arguments\fR
are given, they are interpreted exactly as the
\fBMove\fR
command does (with the exception that references to the current
window position do not work as the window has not been placed
yet)\.
.PP
\fICascadePlacement\fR
automatically place new windows in a cascading fashion\.
.PP
\fITileCascadePlacement\fR
automatically places new windows in a smart location \- a location
in which they do not overlap any other windows on the screen\.  If
no such position can be found
\fICascadePlacement\fR
is used as a fall\-back method\.
.PP
\fITileManualPlacement\fR
This is the same as
\fITileCascadePlacement\fR,
but uses
\fIManualPlacement\fR
as the fall\-back method\.
.PP
\fIMinOverlapPlacement\fR
automatically places new windows in a location in which the
overlapping area in pixels of other windows is minimized\.
By default this placement policy tries to avoid
overlapping icons and windows on higher layers\.
This can be configured with the
\fIMinOverlapPlacementPenalties\fR
style\.
.PP
\fIMinOverlapPercentPlacement\fR
is similar to
\fIMinOverlapPlacement\fR
but tries to minimize the overlapped percentages of other windows
instead of the overlapped area in pixels\.  This placement policy
tries to avoid covering other windows completely and tries even
harder not to cover small windows\.
This can be configured with the
\fIMinOverlapPlacementPenalties\fR
and
\fIMinOverlapPercentPlacementPenalties\fR
styles\.
.PP
\fIMinOverlapPlacementPenalties\fR
takes at most 6 positive or null decimal arguments:
.sp
.RS 4
.nf
\fInormal ontop icon sticky below strut\fR
.fi
.RE
.PP
if trailing arguments are missing the default is used which is:
.sp
.RS 4
.nf
1 5 10 1 0\.05 50
.fi
.RE
.PP
To reset this style to the default values, prefix it with a '!'\.  This style configures the
\fIMinOverlapPlacement\fR and \fIMinOverlapPercentPlacement\fR
placement policy\.
The
\fInormal\fR
factor affects normal windows, the
\fIontop\fR
factor affects windows with a greater layer than the window being
placed, the
\fIicon\fR
factor affects icons, the
\fIsticky\fR
factor affects sticky windows, the
\fIbelow\fR
factor affects windows with a smaller layer than the window being
placed, the
\fIstrut\fR
factor affects the complement of the EWMH working area if the
window being placed has the
\fIEWMHPlacementUseWorkingArea\fR
style and windows with an EWMH strut hint (i\.e\., a "please do not
cover me" hint) if the window being placed has the
\fIEWMHPlacementUseDynamicWorkingArea\fR
style\.  These factors represent the amount of area that these
types of windows (or area) are counted as, when a new window is
placed\.  For example, by default the area of ontop windows is
counted 5 times as much as normal windows\.  So
\fIMinOverlapPlacement\fR and \fIMinOverlapPercentPlacement\fR
covers 5 times as much area of another window before it will
cover an ontop window\.  To treat ontop windows the same as other
windows, set this to 1\.  To really, really avoid putting windows
under ontop windows, set this to a high value, say 1000\.  This
style affects the window already mapped and not the window which
is currently placed\.  There is one exception to this rule: in the
case of the window being placed has the
\fIEWMHPlacementUseWorkingArea\fR
style the
\fIstrut\fR
factor affects the placed window\.
.PP
\fIMinOverlapPercentPlacementPenalties\fR
takes at most 4 positive or null integer arguments:
.sp
.RS 4
.nf
\fIcover_100 cover_95 cover_85 cover_75\fR
.fi
.RE
.PP
if trailing arguments are missing the defaults are used
which are:
.sp
.RS 4
.nf
12 6 4 1
.fi
.RE
.PP
To reset this style to the default values, prefix it with a '!'\.
This style affects the
\fIMinOverlapPercentPlacement\fR
placement policy and is similar to the
\fIMinOverlapPlacementPenalties\fR
style\.  The
\fIcover_xx\fR
factor is used when the window being placed covers at least
\fIxx\fR
percent of the window\.  This factor is added to the factor
determined by the
\fIMinOverlapPlacementPenalties\fR
style\.
.PP
\fIManualPlacement\fR
(aka active placement)\.  The user is required to place every new
window manually\.  The window only shows as a rubber band until a
place is selected manually\.  The window is placed when a mouse
button or any key except
\fIEscape\fR
is pressed\.  Escape aborts manual placement which places the
window in the top left corner of the screen\.  If mouse button 2 is
pressed during the initial placement of a window (respectively
\fIShift\fR
and mouse button 1 in case Mwm emulation has been enabled with the
\fBEmulate\fR
command), the user is asked to resize the window too\.
.PP
It is possible to define buttons usable to place windows with the
\fBMove\fR
command and the special context 'P' for placement (see
\fBMove\fR
command)\.  However, you can't redefine the way to also resize the
window other than the way it is affected by the
\fBEmulate\fR
command\.  The button used for placing the window can be checked with
the
\fIPlacedByButton\fR
condition (see
\fBCurrent\fR
command)\.
.PP
Example:
.sp
.RS 4
.nf
Style * ManualPlacement

*FvwmEvent: PassID
*FvwmEvent: add_window GrowDownFunc
\fBAddToFunc\fR StartFunction
+ I FvwmEvent

\fBAddToFunc\fR GrowDownFunc
+ I windowid $0 (PlacedByButton 3) \e
  \fBResize\fR bottomright keep \-0p
.fi
.RE
.PP
Now, whenever a window is created and the user presses button 3 to
finish initial placement, the window is automatically enlarged
until it hits the bottom screen border\.
.PP
\fIOld placement styles\fR
DumbPlacement / SmartPlacement / SmartPlacementOff,
CleverPlacement / CleverPlacementOff,
ActivePlacement / RandomPlacement,
ActivePlacementsHonorsStartsOnPage /
ActivePlacementsHonorsStartsOnPageOff, GlobalOpts
SmartPlacementIsReallySmart / GlobalOpts SmartPlacementIsNormal
are still supported but will be removed in the future\.  The old and
new styles can be translated according to the following table:
.sp
.RS 4
.nf
\fBGlobalOpts\fR SmartPlacementIsReallySmart
Style * SmartPlacement
\-\->
Style * SmartPlacement, CleverPlacement

\fBGlobalOpts\fR SmartPlacementIsNormal
Style * SmartPlacement
  \-\->
Style * SmartPlacement, CleverPlacementOff

Style * DumbPlacement, RandomPlacement
  \-\->
Style * CascadePlacement

Style * DumbPlacement, ActivePlacement
  \-\->
Style * ManualPlacement

Style * SmartPlacement, \e
RandomPlacement, CleverPlacementOff
  \-\->
Style * TileCascadePlacement

Style * SmartPlacement, \e
ActivePlacement, CleverPlacementOff
  \-\->
Style * TileManualPlacement

Style * SmartPlacement, CleverPlacement
  \-\->
Style * MinOverlapPlacement

Style * SmartPlacement, \e
ActivePlacement, CleverPlacement
  \-\->
Style * MinOverlapPercentPlacement

Style * ActivePlacementsHonorsStartsOnPage
  \-\->
Style * ManualPlacementsHonorsStartsOnPage

Style * ActivePlacementsHonorsStartsOnPageOff
  \-\->
Style * ManualPlacementsHonorsStartsOnPageOff
.fi
.RE
.RE
.TP
.B Placement policy options and window stacking
.RS
.\".PP
\fINoUsePPosition\fR
instructs fvwm to ignore the program specified position (PPosition
hint) when adding new windows\.  Using PPosition is required for
some applications, but if you do not have one of those it's a real
headache\.  Many programs set PPosition to something obnoxious like
0,0 (upper left corner)\.
Note: \fI!UsePPosition\fR
is equivalent to the deprecated option
\fINoPPosition\fR
.PP
\fINoUseUSPosition\fR
works like
\fI!UsePPosition\fR
but applies suppresses using the user specified position indicated
by the program (USPosition hint)\.  It is generally a bad thing to
override the user's choice, but some applications misuse the
USPosition hint to force their windows to a certain spot on the
screen without the user's consent\.
Note: \fI!UseUSPosition\fR
is equivalent to the deprecated option
\fI!USPosition\fR
.PP
\fINoUseTransientPPosition\fR and
\fIUseTransientPPosition\fR
work like
\fI!UsePPosition\fR and
\fIUsePPosition\fR
but apply only to transient windows\.
Note: \fI!UseTransientPPosition\fR
is equivalent to the deprecated option
\fI!TransientPPosition\fR
.PP
\fINoUseIconPosition\fR
instructs fvwm to ignore the program specified icon position
(IconPosition hint) when iconifying the window\.
Note: \fI!UseIconPosition\fR
is equivalent to the deprecated option
\fI!IconPosition\fR
.PP
\fIStartsOnDesk\fR
takes a numeric argument which is the desktop number on which the
window should be initially placed\.  Note that standard Xt programs
can also specify this via a resource (e\.g\. "\-xrm '*Desk: 1'")\.
.PP
\fIStartsOnPage\fR
takes 1, 2, or 3 numeric arguments\.  If one or three arguments are
given, the first (or only) argument is the desktop number\.  If
three arguments are given, the 2nd and 3rd arguments identify the
x,y page position on the virtual window\.  If two arguments are
given, they specify the page position, and indicate no desk
preference\.  If only one argument is given,
\fIStartsOnPage\fR
functions exactly like
\fIStartsOnDesk\fR\.
For those standard Xt programs which understand this usage, the
starting desk/page can also be specified via a resource (e\.g\.,
"\-xrm '*page: 1 0 2'")\.
\fIStartsOnPage\fR
in conjunction with
\fISkipMapping\fR
is a useful technique when you want to start an app on some other
page and continue with what you were doing, rather than waiting
for it to appear\.
.PP
\fIStartsOnScreen\fR
takes one argument\.  It can be 'p' for the primary screen, 'c' for
the current screen (containing the mouse pointer), 'g' for the
global screen or the screen number itself (counting from zero)\.  A
new window is placed on the specified Xinerama screen\.  The
default is to place windows on the screen that contains the mouse
pointer at the time the window is created\.  However, those windows
which are not placed by fvwm (i\.e\., those with a USPosition hint
from a user specified geometry) are normally placed in a position
relative to the global screen\.  The
\fIStartsOnScreen\fR
style is also useful to cause these windows to be placed relative
to a specific Xinerama screen\.  For example:
.sp
.RS 4
.nf
Style * StartsOnScreen c
.fi
.RE
.PP
Would cause all windows, including those with their own geometry
to be placed relative to the current Xinerama screen rather than
the global screen\.  For those standard Xt programs which
understand this usage, the starting desk/page can also be
specified via a resource (e\.g\., "\-xrm '*fvwmscreen: c'")\.
('fvwmscreen' was chosen because some applications already use
\(aa\.screen' for other purposes\.)
.PP
\fIStartsOnPageIncludesTransients\fR
causes the
\fIStartsOnPage\fR
style to be applied even for transient windows\.  This is not
usually useful, since transients are usually pop ups that you want
to appear in your visible viewport; but occasionally an
application uses a transient for something like a startup window
that needs to be coerced into place\.
.PP
\fIManualPlacementIgnoresStartsOnPage\fR
suppresses
\fIStartsOnPage\fR or \fIStartsOnDesk\fR
placement in the event that both
\fIManualPlacement\fR and \fISkipMapping\fR
are in effect when a window is created\.  This prevents you from
interactively placing a window and then wondering where it
disappeared to, because it got placed on a different desk or page\.
\fIManualPlacementHonorsStartsOnPage\fR
allows this to happen anyway\.  The option has no effect if
\fISkipMapping\fR
is not in effect, because fvwm switches to the proper desk/page to
perform interactive placement\.  The default is
\fIManualPlacementIgnoresStartsOnPage\fR;
\fIManualPlacementHonorsStartsOnPage\fR
matches the way the old
\fIStartsOnDesk\fR
style used to handle the situation\.
.PP
\fICaptureHonorsStartsOnPage\fR
causes the initial capture (of an already existing window) at
startup to place the window according to the
\fIStartsOnPage\fR and \fIStartsOnScreen\fR
desk, page and Xinerama screen specification\.
\fICaptureIgnoresStartsOnPage\fR
causes fvwm to ignore these settings (including
\fIStartsOnDesk\fR)
on initial capture\.  The default is
\fICaptureIgnoresStartsOnPage\fR\.
.PP
\fIRecaptureHonorsStartsOnPage\fR
causes a window to be placed according to, or revert to, the
\fIStartsOnPage\fR and \fIStartsOnScreen\fR
desk, page and Xinerama screen specification on
\fBRestart\fR or \fIRecapture\fR\.
\fIRecaptureIgnoresStartsOnPage\fR
causes fvwm to respect the current window position on
\fBRestart\fR or \fBRecapture\fR\.
The default is
\fIRecaptureIgnoresStartsOnPage\fR\.
.PP
\fILayer\fR
accepts one optional argument: a non\-negative integer\.  This is
the layer the window is put in\.  If no argument is given, any
previously set value is deleted and the default layer is implied\.
.PP
\fIStaysOnTop\fR
puts the window in the top layer\.  This layer can be changed by
the command
\fBDefaultLayers\fR;
the default is 6\.
.PP
\fIStaysPut\fR
puts the window in the put layer\.  This layer can be changed by
the command
\fBDefaultLayers\fR;
the default is 4\.
.PP
\fIStaysOnBottom\fR
puts the window in the bottom layer\.  This layer can be changed by
the command
\fBDefaultLayers\fR;
the default is 2\.
.PP
\fIStartsLowered\fR
instructs fvwm to put the window initially at the bottom of its
layer rather than the default
\fIStartsRaised\fR\.
.PP
\fIStartShaded\fR
tells fvwm to shade the window\.  An optional direction argument may be
given, which can be one of
"\fINorth\fR",
"\fISouth\fR",
"\fIWest\fR",
"\fIEast\fR",
"\fINorthWest\fR",
"\fINorthEast\fR",
"\fISouthWest\fR",
"\fISouthEast\fR" or
if no direction is given, the default is to shade north\.
.PP
\fISkipMapping\fR
tells fvwm not to switch to the desk the window is on when it gets
mapped initially (useful with
\fIStartsOnDesk\fR or \fIStartsOnPage\fR)\.
.PP
\fIKeepWindowGroupsOnDesk\fR
makes new windows that have the window group hint set appear on
the same desk as the other windows of the same group\.  Since this
behavior may be confusing, the default setting is
\fIScatterWindowGroups\fR\.
The window group hint is ignored when placing windows in this
case\.
.RE
.TP
.B Transient windows
.RS
.\".PP
\fIDecorateTransient\fR
causes transient windows, which are normally left undecorated, to
be given the usual fvwm decorations (title bar, buttons,
etc\.)\.  Note that some pop\-up windows, such as the xterm menus, are
not managed by the window manager and still do not receive
decorations\.
\fINakedTransient\fR
(the default) causes transient windows not to be given the
standard decorations\.  You can only bind keys or mouse buttons to
the sides and the client part of an undecorated window ('S' and
\(aaW' contexts in bindings, see
\fBMouse\fR and \fIKey\fR
commands)\.
.PP
A window with the
\fIRaiseTransient\fR
style that has transient windows raises all its transients when it
is raised\.  The
\fIDontRaiseTransient\fR
style disables this behavior\.  All windows are then treated as if
they had no transients\.
.PP
A window with the
\fILowerTransient\fR
style that has transient windows lowers all its transients when it
is lowered\.  The
\fIDontLowerTransient\fR
style disables this behavior\.  All windows are then treated as if
they had no transients\.
.PP
The
\fIStackTransientParent\fR
style augments
\fIRaiseTransient\fR and \fILowerTransient\fR
styles\.  Raising a window with
\fIStackTransientParent\fR
style transfers the raise action to the main window if the window
being raised is a transient and its main window has
\fIRaiseTransient\fR
style; this effect makes raise on a transient act just like raise
on its main \- the whole group is raised\.  Similar behavior holds
for lowering a whole group of transients when the main has
\fILowerTransient\fR
style\.
\fIDontStackTransientParent\fR
turns this behavior off\.
\fI(Dont)StackTransientParent\fR
has no effect if
\fIRaiseTransient\fR and \fILowerTransient\fR
are not used\.
.PP
A reasonable emulation of Motif raise/lower on transients is
possible like this
.sp
.RS 4
.nf
Style * RaiseTransient
Style * LowerTransient
Style * StackTransientParent
.fi
.RE
.RE
.TP
.B Extended Window Manager Hints styles
.RS
.\".PP
To understand the used terminology in this sub section, please
read the
\fBExtended Window Manager Hints\fR
section\.
.PP
\fIEWMHDonateIcon\fR
instructs fvwm to set the application ewmh icon hint with the icon
that is used by fvwm if the application does not provide such hint
(and if the icon used by fvwm is not an icon window)\.
\fIEWMHDonateMiniIcon\fR
does the same thing for mini icons\.  This allows compliant pager,
taskbar, iconbox \.\.\.etc to display the same (mini) icons as
fvwm\.  Note that on some hardware (e\.g\., 8\-bit displays) these
styles can slow down window mapping and that in general only one
of these styles is needed by a compliant application\.
\fIEWMHDontDonateIcon\fR
and
\fIEWMHDontDonateMiniIcon\fR
restore the defaults which are to not set any ewmh (mini) icons
hints\.
.PP
By default, if an application provides an ewmh icon hint of small
size (i\.e\., height and width less than or equal to 22), then fvwm
uses this icon as its mini icon\.
\fIEWMHMiniIconOverride\fR
instructs fvwm to ignore ewmh icons and to use the mini icon
provided by the
\fIMiniIcon\fR
style\.
\fIEWMHNoMiniIconOverride\fR
restores the default\.
.PP
\fIEWMHUseStackingOrderHints\fR
causes fvwm to use EWMH hints and respect EWMH hints which change
the window layer\.
\fIEWMHIgnoreStackingOrderHints\fR
causes fvwm to ignore EWMH layer hints\.
.PP
An application can ask for some reserved space on the desktop by a
hint\.  In the EWMH terminology such a hint is called a strut and
it is used to compute the working area and may be used for window
placement and in the maximize command\.
\fIEWMHIgnoreStrutHints\fR
causes fvwm to ignore such hints, as
\fIEWMHUseStrutHints\fR,
causes fvwm to use it which is the default\.
.PP
\fIEWMHIgnoreStateHints\fR
causes fvwm to ignore initial EWMH state hints when a new window
is mapped\.  The default
\fIEWMHUseStateHints\fR
causes fvwm to accept such hints\.
.PP
\fIEWMHIgnoreWindowType\fR
causes fvwm to ignore EWMH window type specification\.  The default
\fI!EWMHIgnoreWindowType\fR
causes fvwm to style windows of specified types as such\.
.PP
\fIEWMHMaximizeIgnoreWorkingArea\fR
causes fvwm to ignore the EWMH working area when it executes a
\fBMaximize\fR
command\.  With
\fIEWMHMaximizeUseWorkingArea\fR
the EWMH working area is used as with
\fIEWMHMaximizeUseDynamicWorkingArea\fR
the EWMH dynamic working area is used (the default)\.
.PP
\fIEWMHPlacementIgnoreWorkingArea\fR
causes fvwm to ignore the EWMH working area when it places (or
places again) a window\.  With
\fIEWMHPlacementUseWorkingArea\fR
the EWMH working area is taken in account as with
\fIEWMHPlacementUseDynamicWorkingArea\fR
the EWMH dynamic working area is taken in account (the default)\.
Note that with the
\fIMinOverlapPlacement\fR and \fIMinOverlapPercentPlacement\fR
placement policy, the way the EWMH (dynamic) working area is taken
in account is configurable with the
\fIMinOverlapPlacementPenalties\fR
style\.
.RE
.TP
.B Miscellaneous
.RS
.\".PP
The
\fIBackingStore\fR, \fIBackingStoreOff\fR and \fIBackingStoreWindowDefault\fR
determine if the X server uses backing store for the window or
not\.
\fIBackingStore\fR
means that the X server tries to keep the obscured parts of a
window in memory\.  This is usually slower if the client runs on
the same machine as the X server, but can be much faster if the
connection is slow (see also
\fISaveUnder\fR
below)\.
\fIBackingStoreOff\fR
disables backing store for the window\.  By default, fvwm
does not enable or disable backing store itself but leaves is as
the window requested it\.  To revert back to the application's
choice, use the
\fIBackingStoreWindowDefault\fR
style\.
.PP
Note: This style is useless if the X server does not allow backing
store\.
.PP
\fISaveUnder\fR
enables the corresponding window attribute in the X server\.  For a
window using this style, the X server tries to store the graphics
below it in memory which is usually slower if the client runs on
the same machine as the X server\.
\fISaveUnder\fR
may speed up fvwm if the connection to the X server is slow
(e\.g\. over a modem link)\.  To disable save under, use the
\fISaveUnderOff\fR
style\.  This is the default\.  See also
\fIBackingStore\fR
above\.
.PP
Note: This style is useless if the X server does not allow save
under\.
.PP
\fIParentalRelativity\fR
enables clients that use a background pixmap of type
\fIParentRelative\fR
to achieve transparency\.  Fvwm modules that support transparent
colorsets require this setting\.
\fIOpacity\fR
is the default and should be used for all non\-transparent clients
for better performance\.
.PP
\fIMwmDecor\fR
makes fvwm attempt to recognize and respect the mwm decoration
hints that applications occasionally use\.  To switch this style
off, use the
\fINoDecorHint\fR
style\.
.PP
\fIMwmFunctions\fR
makes fvwm attempt to recognize and respect the mwm prohibited
operations hints that applications occasionally use\.
\fIHintOverride\fR
makes fvwm shade out operations that mwm would prohibit, but it
lets you perform the operation anyway\.
\fINoFuncHint\fR
allows turns off the mwm hints completely\.
.PP
\fIOLDecor\fR
makes fvwm attempt to recognize and respect the olwm and olvwm
hints that many older XView and OLIT applications use\.  Switch
this option off with
\fINoOLDecor\fR\.
.PP
With
\fIGNOMEIgnoreHints\fR
fvwm ignores all GNOME hints for the window, even if GNOME
compliance is compiled in\.  This is useful for those pesky
applications that try to be more clever than the user and use
GNOME hints to force the window manager to ignore the user's
preferences\.  The
\fIGNOMEUseHints\fR
style switches back to the default behavior\.
.PP
\fIUseDecor\fR
This style is deprecated and will be removed in the future\.  There
are plans to replace it with a more flexible solution in fvwm\-3\.0\.
.PP
\fIUseDecor\fR
accepts one argument: the name of a decor created with
\fBAddToDecor\fR\.
If no decor name is specified, the "Default" decor is
used\.  Windows do not actually contain decors, but are always
assigned to one\.  If the decor is later modified with
\fBAddToDecor\fR,
the changes are visible for all windows which are assigned to it\.
The decor for a window can be reassigned with
\fBChangeDecor\fR\.
.PP
\fIUseStyle\fR
This style is deprecated and will be removed in the future\.  There
are plans to replace it with a more flexible solution in fvwm\-3\.0\.
.PP
\fIUseStyle\fR
takes one arg, which is the name of another style\.  That way you
can have unrelated window names easily inherit similar traits
without retyping\.  For example:
.sp
.RS 4
.nf
  Style rxvt UseStyle XTerm
.fi
.RE
.PP
Warning: If a style is built from one or more parent styles and
the parent styles are changed, the derived style is not
modified\.  To achieve this you have to issue the
\fIUseStyle\fR
line again\.
.PP
\fIUnmanaged\fR
Windows with the
\fIUnmanaged\fR
style option are ignored by fvwm\.  They are not decorated, can not
be moved or resized, etc\.  You probably want to use
\fBBugopts RaiseOverUnmanaged\fR
too\.  This option can be turned off with the
\fI!Unmanaged\fR
style\.
However, windows that are already ignored at the time when the
option is set must be recaptured with the
\fBRecapture\fR
command in order to become managed\.
.PP
\fIState\fR
sets the initial value of one of the 32 user defined states
which are associated with each window\.  The state number ranges
from 0 to 31 and must be given as an argument\.  The states have no
meaning in fvwm, but they can be checked in conditional commands
like
\fBNext\fR
with the
\fIState\fR
condition and manipulated with the
\fBState\fR
command\.
.sp
.RS 4
.nf
# turn on state 11 for xterms \.\.\.
Style xterm \fBState\fR 11
# \.\.\. but not for rxvts\.
Style rxvt !State 11
.fi
.RE
.sp
.PP
Windows with the
\fIWindowListSkip\fR
styles do not appear in the menu that is created with the
\fBWindowList\fR
command or the lists shown in several modules like
\fBFvwmIconMan\fR or \fBFvwmWinList\fR\.
In the modules, the style can usually be ignored with an option\.
Please refer to the man page of the module in question for
further information\.  To disable this feature, use the default
style
\fIWindowListHit\fR\.
.PP
The styles
\fICirculateSkip\fR and \fICirculateHit\fR
control whether the window is considered by conditional commands,
for example
\fBNext\fR, \fIPrev\fR or \fIAll\fR\.
Windows with
\fICirculateSkip\fR,
are never selected by conditional commands\.  However, the styles
can be overridden explicitly in the condition with the
\fICirculateHit\fR, \fICirculateHitIcon\fR or \fICirculateHitShaded\fR
conditions, and some conditional commands, e\.g\.
\fBCurrent\fR and \fIAll\fR,
do this by default\.
The styles
\fICirculateSkipIcon\fR, \fICirculateHitIcon\fR,
\fICirculateSkipShaded\fR and \fICirculateHitShaded\fR
work like
\fICirculateSkip\fR and \fICirculateHit\fR
but apply only to iconic or shaded windows\.
Note: if multiple \.\.\.Skip\.\.\. options are combined, windows are
only selected if they match none of the given conditions\.  So,
with
.sp
.RS 4
.nf
Style * CirculateSkipIcon, CirculateSkipShaded
.fi
.RE
.PP
only windows that are neither iconic nor shaded are selected\.
Note: For historical reasons, the conditional commands understand
the names of these styles as condition names\.  Take care not to
confuse them\.
.RE
.TP
.B Examples
.RS
.\"
.sp
.RS 4
.nf
# Change default fvwm behavior to no title\-
# bars on windows! Also define a default icon\.
Style *             !Title,                \e
                    Icon unknown1\.xpm,     \e
                    BorderWidth 4,         \e
                    HandleWidth 5

# now, window specific changes:
Style Fvwm*       !Handles, Sticky,        \e
                  WindowListSkip,          \e
                  BorderWidth 0
Style FvwmPager   StaysOnTop, BorderWidth 0
Style *lock       !Handles, Sticky,        \e
                  StaysOnTop, WindowListSkip
Style xbiff       Sticky, WindowListSkip
Style FvwmButtons !Handles, Sticky,        \e
                  WindowListSkip
Style sxpm        !Handles

# Put title\-bars back on xterms only!
Style xterm     Title, Color black/grey

Style rxvt        Icon term\.xpm
Style xterm       Icon rterm\.xpm
Style xcalc       Icon xcalc\.xpm
Style xbiff       Icon mail1\.xpm
Style xmh         Icon mail1\.xpm,         \e
                    StartsOnDesk 2
Style xman        Icon xman\.xpm
Style matlab      Icon math4\.xpm,         \e
                    StartsOnDesk 3
Style xmag        Icon magnifying_glass2\.xpm
Style xgraph      Icon graphs\.xpm
Style FvwmButtons Icon toolbox\.xpm
Style Maker       StartsOnDesk 1
Style signal      StartsOnDesk 3

# Fire up Netscape on the second desk, in the
# middle of my 3x3 virtual desktop, and do not
# bother me with it\.\.\.
Style Netscape* SkipMapping,              \e
                StartsOnPage 1 1 1
.fi
.RE
.PP
Note that all properties for a window are or'ed together\.  In the
above example "FvwmPager" gets the property
\fIStaysOnTop\fR
via an exact window name match but also gets
\fI!Handles\fR, \fISticky\fR and \fIWindowListSkip\fR
by a match to "Fvwm*"\.  It gets
\fI!Title\fR
by virtue of a match to "*"\.  If conflicting styles are specified
for a window, then the last style specified is used\.
.RE
.RE
.TP
\fBWindowStyle\fR \fIoptions\fR
.RS
.\".PP
sets attributes (styles) on the selected window\.  The
\fIoptions\fR
are exactly the same as for the
\fBStyle\fR
command\.
.RE
.SS Window Styles
.TP
\fBAddButtonStyle\fR button [\fIstate\fR] [\fIstyle\fR] [\-\-\ [!]\fIflag\fR\ ...]
.RS
.\".PP
Adds a button style to
\fIbutton\fR\.
\fIbutton\fR
can be a button number, or one of
"\fIAll\fR",
"\fILeft\fR" or
"\fIRight\fR"\.
\fIstate\fR
can be
"\fIActiveUp\fR",
"\fIActiveDown\fR",
"\fIInactiveUp\fR" or
"\fIInactiveDown\fR", or
"\fIActive\fR" (the same as both "ActiveUp" and "ActiveDown") or
"\fIInactive\fR" (the same as both "InactiveUp" and "InactiveDown")
or any of these 6 with
"\fIToggled\fR" prepended\.
The "Active" states apply to the focused window, the "Inactive"
ones apply to all other windows\.  The "Up" states apply to the
non pressed buttons, the "Down" ones apply to pressed buttons\.
The "Toggled" prefix refers to maximized, shaded or sticky windows
that have the corresponding
\fIMwmDecor\.\.\.\fR
button style set\.
Additionally, the following shortcuts may be used:
"\fIAllNormal\fR",
"\fIAllToggled\fR",
"\fIAllActive\fR",
"\fIAllInactive\fR",
"\fIAllUp\fR",
"\fIAllDown\fR"\.
They are actually different masks for 4 individual states from
8 total\.  These are supported too:
"\fIAllActiveUp\fR",
"\fIAllActiveDown\fR",
"\fIAllInactiveUp\fR",
"\fIAllInactiveDown\fR"\.
.PP
If
\fIstate\fR
is omitted, then the style is added to every state\.  If the
\fIstyle\fR and \fIflags\fR
are enclosed in parentheses, then multiple
\fIstate\fR
definitions can be placed on a single line\.
\fIFlags\fR
for additional button styles cannot be changed after definition\.
.PP
Buttons are drawn in the order of definition, beginning with the
most recent button style, followed by those added with
\fBAddButtonStyle\fR\.
To clear the button style stack, change style flags, or for
descriptions of available styles and flags, see the
\fBButtonStyle\fR
command\.  Examples:
.sp
.RS 4
.nf
\fBButtonStyle\fR 1 Pixmap led\.xpm \-\- Top Left
\fBButtonStyle\fR 1 ActiveDown HGradient 8 grey black
\fBButtonStyle\fR \fBAll\fR \-\-  UseTitleStyle
AddButtonStyle 1 \e
	ActiveUp (Pixmap a\.xpm) \e
	ActiveDown (Pixmap b\.xpm \-\- Top)
AddButtonStyle 1 Vector 4 50x30@1 70x70@0 30x70@0 50x30@1
.fi
.RE
.PP
Initially for this example all button states are set to a pixmap\.
The second line replaces the "ActiveDown" state with a gradient
(it overrides the pixmap assigned to it in the line before, which
assigned the same style to every state)\.  Then, the
\fIUseTitleStyle\fR
flag is set for all buttons, which causes fvwm to draw any styles
set with
\fBTitleStyle\fR
before drawing the buttons\.  Finally,
\fBAddButtonStyle\fR
is used to place additional pixmaps for both "ActiveUp" and
"ActiveDown" states and a vector button style is drawn on top of
all states\.
.RE
.TP
\fBAddTitleStyle\fR [\fIstate\fR] [\fIstyle\fR] [\-\-\ [!]\fIflag\fR\ ...]
.RS
.\".PP
Adds a title style to the title\-bar\.
\fIstate\fR can be
"\fIActiveUp\fR",
"\fIActiveDown\fR",
"\fIInactiveUp\fR" or
"\fIInactiveDown\fR", or
"\fIActive\fR" (the same as both "ActiveUp" and "ActiveDown") or
"\fIInactive\fR" (the same as both "InactiveUp" and "InactiveDown")
or any of these 6 with "Toggled" prepended\.  If
\fIstate\fR
is omitted, then the style is added to every state\.  If the
\fIstyle\fR and \fIflags\fR
are enclosed in parentheses, then multiple
\fIstate\fR
definitions can be placed on a single line\.  This command is quite
similar to the
\fBAddButtonStyle\fR
command\.
.PP
Title\-bars are drawn in the order of definition, beginning with
the most recent
\fBTitleStyle\fR,
followed by those added with
\fBAddTitleStyle\fR\.
To clear the title style stack, change style flags, or for the
descriptions of available styles and flags, see the
\fBTitleStyle\fR and
\fBButtonStyle\fR
commands\.
.RE
.TP
\fBAddToDecor\fR \fIdecor\fR
.RS
.\".PP
This command is deprecated and will be removed in the future\.  There
are plans to replace it with a more flexible solution in fvwm\-3\.0\.
.PP
Add or divert commands to the decor named
\fIdecor\fR\.
A decor is a name given to the set of commands which affect button
styles, title\-bar styles and border styles\.  If
\fIdecor\fR
does not exist it is created; otherwise the existing
\fIdecor\fR
is modified\.  Note: Earlier versions allowed to use the
\fBHilightColor\fR, \fBHilightColorset\fR and \fBWindowFont\fR
commands in decors\.  This is no longer possible\.  Please use the
\fBStyle\fR
command with the
\fIHilight\.\.\.\fR and \fIFont\fR
options\.
.PP
New decors start out exactly like the "default" decor without any
style definitions\.  A given decor may be applied to a set of
windows with the
\fIUseDecor\fR
option of the
\fBStyle\fR
command\.  Modifying an existing decor affects all windows which
are currently assigned to it\.
.PP
\fBAddToDecor\fR
is similar in usage to the
\fBAddToMenu\fR and \fBAddToFunc\fR
commands, except that menus and functions are replaced by
\fBButtonStyle\fR, \fBAddButtonStyle\fR, \fBTitleStyle\fR,
\fBAddTitleStyle\fR and \fBBorderStyle\fR
commands\.  Decors created with
\fBAddToDecor\fR
can be manipulated with
\fBChangeDecor\fR, \fBDestroyDecor\fR, \fBUpdateDecor\fR
and the
\fBStyle\fR
option\.
.PP
The following example creates a decor "FlatDecor" and style
"FlatStyle"\.  They are distinct entities:
.sp
.RS 4
.nf
AddToDecor FlatDecor
+ \fBButtonStyle\fR All Active (\-\- flat) Inactive (\-\- flat)
+ \fBTitleStyle\fR  \-\- flat
+ \fBBorderStyle\fR \-\- HiddenHandles NoInset

\fBStyle\fR FlatStyle \e
	UseDecor FlatDecor, HandleWidth 4, ForeColor white, \e
	BackColor grey40, HilightFore black, HilightBack grey70

\fBStyle\fR xterm UseStyle FlatStyle
.fi
.RE
.PP
An existing window's decor may be reassigned with
\fBChangeDecor\fR\.
A decor can be destroyed with
\fBDestroyDecor\fR\.
.sp
.RS 4
.nf
\fBDestroyDecor\fR FlatDecor
AddToDecor FlatDecor \.\.\.

\fBStyle\fR FlatStyle UseDecor FlatDecor
.fi
.RE
.PP
and now apply the style again:
.sp
.RS 4
.nf
\fBStyle\fR xterm UseStyle FlatStyle
.fi
.RE
.RE
.TP
\fBBorderStyle\fR \fIstate\fR [\fIstyle\fR] [\-\-\ [!]\fIflag\fR\ ...]
.RS
.\".PP
Defines a border style for windows\.
\fIstate\fR
can be either "\fIActive\fR" or "\fIInactive\fR"\.  If
\fIstate\fR
is omitted, then the style is set for both states\.  If the
\fIstyle\fR and \fIflags\fR
are enclosed in parentheses, then multiple
\fIstate\fR
definitions can be specified per line\.
.PP
\fIstyle\fR
is a subset of the available button styles, and can only be
\fITiledPixmap\fR
(uniform pixmaps which match the bevel colors work best this
way) or \fIColorset\fR\.  If a '!' is prefixed to any
\fIflag\fR,
the behavior is negated\.  If
\fIstyle\fR
is not specified, then one can change flags without resetting the
style\.
.PP
The
\fIHiddenHandles\fR
flag hides the corner handle dividing lines on windows with
handles (this option has no effect for !\fIHandles\fR windows)\.  By
default,
\fIHiddenHandles\fR
is disabled\.
.PP
The
\fINoInset\fR
flag supplements
\fIHiddenHandles\fR\.
If given, the inner bevel around the window frame is not drawn\.
If
\fIHiddenHandles\fR
is not specified, the frame looks a little strange\.
.PP
\fIRaised\fR
causes a raised relief pattern to be drawn (default)\.
\fISunk\fR
causes a sunken relief pattern to be drawn\.
\fIFlat\fR
inhibits the relief pattern from being drawn\.
.PP
To decorate the active and inactive window borders with a textured
pixmap, one might specify:
.sp
.RS 4
.nf
BorderStyle Active TiledPixmap marble\.xpm
BorderStyle Inactive TiledPixmap granite\.xpm
BorderStyle Active \-\- HiddenHandles NoInset
.fi
.RE
.PP
To clear the style for both states:
.sp
.RS 4
.nf
BorderStyle \fISimple\fR
.fi
.RE
.PP
To clear for a single state:
.sp
.RS 4
.nf
BorderStyle Active Simple
.fi
.RE
.PP
To unset a flag for a given state:
.sp
.RS 4
.nf
BorderStyle Inactive \-\- !NoInset
.fi
.RE
.PP
title\-bar buttons can inherit the border style with the
\fIUseBorderStyle\fR
flag (see
\fBButtonStyle\fR)\.
.RE
.TP
\fBButtonState\fR [ActiveDown\ \fIbool\fR] [Inactive\ \fIbool\fR] [InactiveDown\ \fIbool\fR]
.RS
.\".PP
The
\fBButtonState\fR
command controls which states of the window titles and title
buttons are used\.  The default is to use all four states:
"ActiveUp>",
"ActiveDown>",
"InactiveUp>" and
"InactiveDown>" (see
\fBButtonStyle\fR and
\fBTitleStyle\fR
commands)\.  The
\fIbool\fR
argument after the key word controls if the designated state is
used ("True") or not ("False")\.  The "ActiveUp" state cannot be
deactivated\.  If no arguments are provided or the given arguments
are illegal, the default is restored\.
.PP
If
\fIActiveDown\fR
argument is "False", no different button style
for the pressed down buttons used, instead "ActiveUp" state is
used even when button is pressed\.
.PP
If
\fIInactive\fR
argument is "False", focused and unfocused windows
look similarly, the corresponding "Active" states are always used\.
.PP
If
\fIInactiveDown\fR
argument is "False" (only applied when
\fIInactive\fR
is "True"), the pressed titles and title buttons in non\-focused
windows are drawn using "InactiveUp" or "ActiveUp" states
depending on the values of the other key words\.
.RE
.TP
\fBButtonStyle\fR button [\fIstate\fR] [\fIstyle\fR] [\-\-\ [!]\fIflag\fR\ ...]
.RS
.\".PP
Sets the button style for a title\-bar button\.
\fIbutton\fR
is the title\-bar button number between 0 and 9, or one of
"\fIAll\fR",
"\fILeft\fR",
"\fIRight\fR", or
"\fIReset\fR"\.  Button numbering is described in the
\fBMouse\fR
command section\.  If the
\fIstyle\fR and \fIflags\fR
are enclosed in parentheses, then multiple
\fIstate\fR
definitions can be specified per line\.
.PP
\fIstate\fR
refers to which button state should be set\.  Button states are
defined as follows:
"\fIActiveUp\fR" and
"\fIActiveDown\fR" refer to the
un\-pressed and pressed states for buttons on active windows; while
the "\fIInactiveUp\fR" and
"\fIInactiveDown\fR" states denote buttons on
inactive windows\.  The shortcut
"\fIActive\fR" denotes both "ActiveUp" and
"ActiveDown" states\.  Shortcut
"\fIInactive\fR" denotes both "InactiveUp"
and "InactiveDown" states\.
The similar state names like just described, but with the "Toggled"
prefix are used instead for title buttons which have one of the
\fIMwmDecorMax\fR, \fIMwmDecorShade\fR, \fIMwmDecorStick\fR or \fIMwmDecorLayer\fR
hints, if the window is maximized, shaded, sticky or placed on specific
layer, respectively\.
.sp
.RS 4
.nf
\fBAddToDecor\fR Default
 + ButtonStyle 6                   \e
   Vector 4 50x25@1 85x75@0 15x75@0 50x25@1
 + ButtonStyle 6 ToggledActiveUp   \e
   Vector 4 50x75@0 85x25@1 15x25@0 50x75@0
 + ButtonStyle 6 ToggledActiveDown \e
   Vector 4 50x75@0 85x25@1 15x25@0 50x75@0
 + ButtonStyle 6 ToggledInactive   \e
   Vector 4 50x75@0 85x25@1 15x25@0 50x75@0
 + ButtonStyle 6 \- MwmDecorShade
\fBMouse\fR 0 6 N \fBWindowShade\fR
.fi
.RE
.PP
Additionally, the following shortcuts may be used:
"\fIAllNormal\fR",
"\fIAllToggled\fR",
"\fIAllActive\fR",
"\fIAllInactive\fR",
"\fIAllUp\fR",
"\fIAllDown\fR"\.
They are actually different masks for 4 individual states from
8 total\.  These are supported too:
"\fIAllActiveUp\fR",
"\fIAllActiveDown\fR",
"\fIAllInactiveUp\fR",
"\fIAllInactiveDown\fR"\.
.PP
If
\fIstate\fR
is specified,
that particular button state is set\.  If
\fIstate\fR
is omitted, every state is set\.  Specifying a style destroys the
current style (use
\fBAddButtonStyle\fR
to avoid this)\.
.PP
If
\fIstyle\fR
is omitted, then state\-dependent flags can be set for the primary
button style without destroying the current style\.  Examples (each
line should be considered independent):
.sp
.RS 4
.nf
ButtonStyle Left \-\- flat
ButtonStyle All ActiveUp (\-\- flat) Inactive (\-\- flat)
.fi
.RE
.PP
The first line sets every state of the left buttons to flat, while
the second sets only the "ActiveUp" and "Inactive" states of every
button to flat (only flags are changed; the buttons' individual
styles are not changed)\.
.PP
If you want to reset all buttons to their defaults:
.sp
.RS 4
.nf
ButtonStyle \fIReset\fR
.fi
.RE
.PP
To reset the "ActiveUp" button state of button 1 to the default:
.sp
.RS 4
.nf
ButtonStyle 1 ActiveUp Default
.fi
.RE
.PP
To reset all button states of button 1 to the default of
button number 2:
.sp
.RS 4
.nf
ButtonStyle 1 Default 2
.fi
.RE
.PP
For any button, multiple
\fIstate\fR
definitions can be given on one line by enclosing the
\fIstyle\fR and \fIflags\fR
in parentheses\.  If only one definition per line is given the
parentheses can be omitted\.
.PP
\fIflags\fR
affect the specified
\fIstate\fR\.
If a '!'
is prefixed to any
\fIflag\fR,
its behavior is negated\.  The available state\-dependent flags for
all styles are described here (the
\fBButtonStyle\fR
entry deals with state\-independent flags)\.
.PP
\fIRaised\fR
causes a raised relief pattern to be drawn\.
.PP
\fISunk\fR
causes a sunken relief pattern to be drawn\.
.PP
\fIFlat\fR
inhibits the relief pattern from being drawn\.
.PP
\fIUseTitleStyle\fR
causes the given button state to render the current title style
before rendering the buttons' own styles\.  The
\fIRaised\fR,
\fIFlat\fR and
\fISunk\fR
\fBTitleStyle\fR
flags are ignored since they are redundant in this context\.
.PP
\fIUseBorderStyle\fR
causes the button to inherit the decorated
\fBBorderStyle\fR
options\.
.PP
\fIRaised\fR, \fISunk\fR and \fIFlat\fR
are mutually exclusive, and can be specified for the initial
\fBButtonStyle\fR
only\.
\fIUseTitleStyle\fR and \fIUseBorderStyle\fR
are also mutually exclusive (both can be off however)\.  The
default is
\fIRaised\fR
with both
\fIUseBorderStyle and UseTitleStyle\fR
left unset\.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBImportant\fR

for the "ActiveDown" and "InactiveDown" states:  When a button is
pressed, the relief is inverted\.  Because of this, to obtain the
raised look in "ActiveDown" or "InactiveDown" states you must
specify the opposite of the desired relief (i\.e\.
\fISunk\fR
for "ActiveDown" or "InactiveDown")\.  This behavior is consistent,
but may seem confusing at first\.  The same applies to the
"Toggled" states\.
.PP
Button styles are classified as non\-destructive, partially
destructive, or fully destructive\.  Non\-destructive styles do not
affect the image\.  Partially destructive styles can obscure some or
all parts of the underlying image (i\.e\.
\fIPixmap\fR)\.
Fully destructive styles obscure the entire underlying image (i\.e\.
\fISolid\fR
or one of the
\fIgradient\fR
styles)\.  Thus, if stacking styles with
\fBAddButtonStyle\fR (or \fBAddTitleStyle\fR
for title\-bars), use care in sequencing styles to minimize redraw\.
.PP
The available styles are:
.PP
\fISimple\fR, \fIDefault\fR, \fISolid\fR, \fIColorset\fR, \fIVector\fR,
\fI?Gradient\fR, \fIPixmap\fR, \fIAdjustedPixmap\fR,
\fIShrunkPixmap\fR, \fIStretchedPixmap\fR, \fITiledPixmap\fR, \fIMiniIcon\fR
.PP
The description of these styles and their arguments follow:
.PP
The
\fISimple\fR
style does nothing\.  There are no arguments, and this style is an
example of a non\-destructive button style\.
.PP
The
\fIDefault\fR
style conditionally accepts one argument: a number which specifies
the default button number to load\.  If the style command given is
\fBButtonStyle\fR or \fBAddButtonStyle\fR,
the argument is optional (if given, it overrides the current button)\.
If a command other than
\fBButtonStyle\fR or \fBAddButtonStyle\fR
is used, the number must be specified\.
.PP
The
\fISolid\fR
style fills the button with a solid color\.  The relief border
color is not affected\.  The color is specified as a single
argument\.  This style is fully destructive\.
.PP
The
\fIColorset\fR
\fIcs\fR
[\fIalpha\fR]
style fills the button with the Colorset
\fIcs\fR\.
The optional
\fIalpha\fR
argument is a percentage between 0 and 100\.  It causes fvwm to
merge the colorset background onto the button using this
percentage\.  If the percentage is 0 the colorset background is
hidden and if it is 100 the colorset background is fully
applied\.  The default is 100\.  So, the destructiveness depends on the
\fIalpha\fR
argument\.
.PP
The
\fIVector\fR
\fInum\fR
\fIX\fR\fB[\fR\fIoffset\fR\fBp]x\fR\fIY\fR\fB[\fR\fIoffset\fR\fBp]@\fR\fIC\fR\fB \.\.\.\fR
style draws a line pattern\.  Since this is a standard button style,
the keyword
\fIVector\fR
is optional,
\fInum\fR
is a number of point specifications of the form
\fIX\fR\fB[\fR\fIoffset\fR\fBp]x\fR\fIY\fR\fB[\fR\fIoffset\fR\fBp]@\fR\fIC\fR\fB \.\.\.\fR
\fIX\fR and \fIY\fR
are point coordinates inside the button, given in percents
(from 0 to 100)\.  An optional absolute
\fIoffset\fR
in pixels, can be given as "+<offset>p" for a positive or
"\-<offset>p" for a negative offset\.
.PP
\fIC\fR
specifies a line color (0 \- the shadow color, 1 \- the highlight
color, 2 \- the background color, 3 \- the foreground color, 4 \-
only move the point, do not draw)\.  The first point color is not
used\.  You can use up to 10000 points in a line pattern\.  This
style is partially destructive\.
.PP
The specification is a little cumbersome:
.sp
.RS 4
.nf
ButtonStyle 2 Vector 4 50x30@1 70x70@0 30x70@0 50x30@1
.fi
.RE
.PP
then the button 2 decoration uses a 4\-point pattern consisting of
a line from (x=50,y=30) to (70,70) in the shadow color (@0), and
then to (30,70) in the shadow color, and finally to (50,30) in the
highlight color (@1)\.  Is that too confusing? See the fvwm web
pages for some examples with screenshots\.
.PP
A more complex example of
\fIVector\fR:
.sp
.RS 4
.nf
ButtonStyle 8 Vector 10 45x65@2 45x75@3 \e
  20x75@3 20x50@3 35x50@3 35x65@1 35x25@1 \e
  75x25@1 75x65@0 35x65@0
ButtonStyle 0 Vector 10 45x65@2 45x75@0 \e
  20x75@0 20x50@1 45x50@1 45x65@0 75x65@3 \e
  75x25@3 35x25@3 35x47@3
.fi
.RE
.PP
The
\fI?Gradient\fR
styles denote color gradients\.  Fill in the question mark with any
one of the defined gradient types\.  Please refer to the
\fBColor Gradients\fR
section for a description of the gradient syntax\.  The gradient
styles are fully destructive\.
.PP
The
\fIPixmap\fR
style displays a pixmap\.  A pixmap should be specified as an
argument\.  For example, the following would give button number 2
the same pixmap for all 4 states (2 active and 2 inactive), and
button number 4 all different pixmaps\.
.sp
.RS 4
.nf
ButtonStyle 2 Pixmap my_pixmap\.xpm
ButtonStyle 4 \e
	ActiveUp (Pixmap activeup\.xpm) \e
	ActiveDown (Pixmap activedown\.xpm) \e
	Inactive (Pixmap inactiveup\.xpm)
ButtonStyle 4 \e
	InactiveDown Pixmap inactivedown\.xpm
.fi
.RE
.PP
The pixmap specification can be given as an absolute or relative
pathname (see
\fBImagePath\fR)\.
If the pixmap cannot be found, the button style reverts to
\fISimple\fR\.
Flags specific to the
\fIPixmap\fR
style are
\fILeft\fR, \fIRight\fR, 
\fITop\fR, and \fIBottom\fR\.
These can be used to justify the pixmap (default is centered for
both directions)\.  Pixmap transparency is used for the color
"None\." This style is partially destructive\.
.PP
The
\fIAdjustedPixmap\fR
style is similar to the
\fIPixmap\fR
style\.  But the image is resized to exactly fit the button\.
.PP
The
\fIShrunkPixmap\fR
style is similar to the
\fIPixmap\fR
style\.  But if the image is bigger than the button the image is
resized to fit into the button\.
.PP
The
\fIStretchedPixmap\fR
style is similar to the
\fIPixmap\fR
style\.  But if the image is smaller than the button the image is
resized to cover the button\.
.PP
The
\fITiledPixmap\fR
style accepts a pixmap to be tiled as the button background\.  One
pixmap is specified as an argument\.  Pixmap transparency is not
used\.  This style is fully destructive\.
.PP
The
\fIMiniIcon\fR
style draws the window's miniature icon in the button, which is
specified with the
\fIMiniIcon\fR
option of the
\fBStyle\fR
command\.  This button style accepts no arguments\.  Example:
.sp
.RS 4
.nf
\fBStyle\fR *     MiniIcon mini\-bx2\.xpm
\fBStyle\fR xterm MiniIcon mini\-term\.xpm
\fBStyle\fR Emacs MiniIcon mini\-doc\.xpm

ButtonStyle 1 MiniIcon
.fi
.RE
.RE
.TP
\fBButtonStyle\fR \fIbutton\fR \- [!]\fIflag\fR ...
.RS
.\".PP
Sets state\-independent flags for the specified
\fIbutton\fR\.
State\-independent flags affect button behavior\.  Each
\fIflag\fR
is separated by a space\.  If a '!'
is prefixed to the flag then the behavior is negated\.  The special
flag
\fIClear\fR
clears any existing flags\.
.PP
The following flags are usually used to tell fvwm which buttons
should be affected by mwm function hints (see
\fIMwmFunctions\fR
option of the
\fBStyle\fR
command\.  This is not done automatically since you might have
buttons bound to complex functions, for instance\.
.PP
\fIMwmDecorMenu\fR
should be assigned to title\-bar buttons which display a menu\.  The
default assignment is the leftmost button\.  When a window with the
\fIMwmFunctions\fR
\fBStyle\fR
option requests not to show this button, it is hidden\.
.PP
\fIMwmDecorMin\fR
should be assigned to title\-bar buttons which minimize or iconify
the window\.  The default assignment is the second button over from
the rightmost button\.  When a window with the
\fIMwmFunctions\fR
\fBStyle\fR
option requests not to show this button, it is hidden\.
.PP
\fIMwmDecorMax\fR
should be assigned to title\-bar buttons which maximize the
window\.  The default assignment is the rightmost button\.  When a
window with the
\fIMwmFunctions\fR
\fBStyle\fR
option requests not to show this button, it is hidden\.  When the
window is maximized, the vector pattern on the button looks
pressed in\.
.PP
\fIMwmDecorShade\fR
should be assigned to title\-bar buttons which shade the window
(see
\fBWindowShade\fR
command)\.  When the window is shaded, the vector pattern on the
button looks pressed in\.
.PP
\fIMwmDecorStick\fR
should be assigned to title\-bar buttons which make the window
sticky\.  When the window is sticky, the vector pattern on the
button looks pressed in\.
.PP
The flag
\fIMwmDecorLayer\fR
\fIlayer\fR
should be assigned to title\-bar buttons which place the window in
the layer numbered
\fIlayer\fR\.
When the window is on that specific layer, the vector pattern on
the button looks pressed in\.
.RE
.TP
\fBChangeDecor\fR \fIdecor\fR
.RS
.\".PP
This command is deprecated and will be removed in the future\.  There
are plans to replace it with a more flexible solution in fvwm\-3\.0\.
.PP
Changes the decor of a window to
\fIdecor\fR\.
\fIdecor\fR
is "Default" or the name of a decor defined with
\fBAddToDecor\fR\.
If
\fIdecor\fR
is invalid, nothing occurs\.  If called from somewhere in a window
or its border, then that window is affected\.  If called from the
root window the user is allowed to select the target window\.
\fBChangeDecor\fR
only affects attributes which can be set using the
\fBAddToDecor\fR
command\.
.sp
.RS 4
.nf
ChangeDecor CustomDecor1
.fi
.RE
.RE
.TP
\fBDestroyDecor\fR [recreate] \fIdecor\fR
.RS
.\".PP
This command is deprecated and will be removed in the future\.  There
are plans to replace it with a more flexible solution in fvwm\-3\.0\.
.PP
Deletes the
\fIdecor\fR
defined with
\fBAddToDecor\fR,
so that subsequent references to it are no longer valid\.  Windows
using this
\fIdecor\fR
revert to the "Default" decor\.  The optional parameter
\fIrecreate\fR
tells fvwm not to throw away the decor completely but to throw
away only its contents\.  If the decor is created again later,
windows do not use it before the
\fIUseDecor\fR
style is applied again unless the decor was destroyed with the
\fIrecreate\fR
option\.  The decor named "Default" cannot be destroyed\.
.sp
.RS 4
.nf
DestroyDecor CustomDecor1
.fi
.RE
.RE
.TP
\fBTitleStyle\fR [\fIjustification\fR] [Height\ [\fInum\fR]] [MinHeight\ [\fInum\fR]]
.RS
.\".PP
Sets attributes for the title\-bar\.  Justifications can be
\fICentered\fR,
\fIRightJustified\fR or
\fILeftJustified\fR\.
\fIHeight\fR
sets the title bar's height to an amount in pixels\.
\fIMinHeight\fR
sets the minimal height in pixels of the title bar\.
Defaults are
\fICentered\fR,
the window's font height and no minimal height\.
To reset the font height to the
default value, omit the
\fInum\fR
argument after the
\fIHeight\fR
keyword\.  The
\fIMinHeight\fR
height is reseted by
\fIHeight\fR
or if given with no argument\.
Example:
.sp
.RS 4
.nf
TitleStyle LeftJustified Height 24
.fi
.RE
.RE
.TP
\fBTitleStyle\fR [\fIstate\fR] [\fIstyle\fR] [\-\-\ [!]\fIflag\fR\ ...]
.RS
.\".PP
Sets the style for the title\-bar\.
See also
\fBAddTitleStyle\fR and \fBButtonStyle\fR
\fIstate\fR
can be one of "\fIActiveUp\fR",
"\fIActiveDown\fR",
"\fIInactiveUp\fR",
or "\fIInactiveDown\fR"\.  Shortcuts like
"\fIActive\fR" and
"\fIInactive\fR" are
allowed\.  The states with the "Toggled" prefix are allowed too,
the title itself does not use "Toggled" states, but these states
are used for the buttons with
\fBButtonStyle\fR
\fIUseTitleStyle\fR\.
If
\fIstate\fR
is omitted, then the
\fIstyle\fR
is added to every state\.  If parentheses are placed around the
\fIstyle\fR and \fIflags\fR,
then multiple state definitions can be given per line\.
\fIstyle\fR
can be omitted so that flags can be set while not destroying the
current style\.
.PP
If a '!'
is prefixed to any
\fIflag\fR,
its behavior is negated\.  Valid flags for each state include
\fIRaised\fR,
\fIFlat\fR and 
\fISunk\fR
(these are mutually exclusive)\.  The default is
\fIRaised\fR\.
See the note in
\fBButtonStyle\fR
regarding the "\fIActiveDown\fR" state\.  Examples:
.sp
.RS 4
.nf
TitleStyle ActiveUp HGradient 16 navy black
TitleStyle \e
	ActiveDown (Solid red \-\- flat) \e
	Inactive (TiledPixmap wood\.xpm)
TitleStyle \e
	ActiveUp (\-\- Flat) \e
	ActiveDown (\-\- Raised) \e
	InactiveUp (\-\- Flat) \e
	InactiveDown (\-\- Sunk)
.fi
.RE
.PP
This sets the "ActiveUp" state to a horizontal gradient, the
"ActiveDown" state to solid red, and the "Inactive" states to a
tiled wood pixmap\.  Finally, "ActiveUp" and "InactiveUp" are set
to look flat, while "ActiveDown" set to be sunk (the
\fIRaised\fR
flag for the "ActiveDown" state causes it to appear sunk due to
relief inversion), and "InactiveDown" is set to look raised\.  An
example which sets flags for all states:
.sp
.RS 4
.nf
TitleStyle \-\- flat
.fi
.RE
.PP
For a flattened look:
.sp
.RS 4
.nf
TitleStyle \-\- flat
\fBButtonStyle\fR \fBAll\fR Active (\-\- flat) Inactive (\-\- flat)
.fi
.RE
.PP
\fBTitleStyle\fR
accepts all the
\fBButtonStyle\fR
styles and arguments:
.PP
\fISimple\fR,
\fIDefault\fR,
\fISolid\fR,
\fIColorset\fR,
\fIVector\fR,
\fI?Gradient\fR,
\fIPixmap\fR,
\fIAdjustedPixmap\fR,
\fIShrunkPixmap\fR,
\fIStretchedPixmap\fR,
\fITiledPixmap\fR,
\fIMiniIcon\fR\.
.PP
See the
\fBButtonStyle\fR
command for a description of all these styles and their arguments\.
.PP
In addition to these styles
\fBTitleStyle\fR
accepts a powerful
\fIMultiPixmap\fR
option\.  This allows you to specify different pixmaps, colorsets or
colors for different parts of the titlebar\.  Some of them are tiled or
stretched to fit a particular space; others are discrete "transition"
images\.  The definable
\fIsections\fR
are:
.PP
\fIMain\fR
.RS 4
The full titlebar
.RE
.PP
\fILeftMain\fR
.RS 4
Left of title text
.RE
.PP
\fIRightMain\fR
.RS 4
Right of title text
.RE
.PP
\fIUnderText\fR
.RS 4
Underneath title text
.RE
.PP
\fILeftOfText\fR
.RS 4
just to the left of the title text
.RE
.PP
\fIRightOfText\fR
.RS 4
just to the right of the title text
.RE
.PP
\fILeftEnd\fR
.RS 4
at the far left end of the titlebar (just after left buttons if any)
.RE
.PP
\fIRightEnd\fR
.RS 4
at the far right end of the titlebar (just before right buttons if any)
.RE
.PP
\fIButtons\fR
.RS 4
under buttons in case of
\fIUseTitleStyle\fR
.RE
.PP
\fILeftButtons\fR
.RS 4
under left buttons in case of
\fIUseTitleStyle\fR
.RE
.PP
\fIRightButtons\fR
.RS 4
under right buttons in case of
\fIUseTitleStyle\fR
.RE
.PP
None of these are mandatory except for
\fIMain\fR
(or, if you do not define
\fIMain\fR
you must define both
\fILeftMain\fR and \fIRightMain\fR)\.
If no
\fIButtons\fR
pixmaps are defined and
\fIUseTitleStyle\fR
is specified for one or more buttons,
\fIMain\fR,
\fILeftMain\fR or \fIRightMain\fR
are used as appropriate\.
.PP
The syntax for this style type is:
.sp
.RS 4
.nf
MultiPixmap section style arg, \.\.\.
.fi
.RE
.PP
continuing for whatever you want to define\.  The
\fIstyle\fR
can be either
\fITiledPixmap\fR, \fIAdjustedPixmap\fR, \fIColorset\fR or \fISolid\fR\.
See the
\fBButtonStyle\fR
command for the description of these styles\.
In the case of a transition section,
\fILeftEnd\fR, \fILeftOfText\fR,
\fIRightOfText\fR or \fIRightEnd\fR,
\fIAdjustedPixmap\fR
only resize the pixmap in the "y" direction\.  For the
\fIColorset\fR and \fISolid\fR
styles a width of the half of the title bar height is assumed
for the transition sections\.
.PP
An example:
.sp
.RS 4
.nf
MultiPixmap Main AdjustedPixmap foo\.xpm, \e
            UnderText TiledPixmap bar\.xpm, \e
            Buttons \fIColorset\fR 2
.fi
.RE
.PP
Note that the old syntax is still supported: if the style is omitted,
\fITiledPixmap\fR
is assumed and adding "(stretched)" between the section and the
file name implies
\fIAdjustedPixmap\fR\.
.RE
.TP
\fBUpdateDecor\fR [\fIdecor\fR]
.RS
.\".PP
This command is deprecated and will be removed in the future\.  There
are plans to replace it with a more flexible solution in fvwm\-3\.0\.
.PP
This command is kept mainly for backward compatibility\.  Since
all elements of a decor are updated immediately when they are
changed, this command is mostly useless\.
.PP
Updates window decorations\.
\fIdecor\fR
is an optional argument which specifies the
\fIdecor\fR
to update\.  If given, only windows which are assigned to that
particular
\fIdecor\fR
are updated\.  This command is useful, for instance, after a
\fBButtonStyle\fR, \fBTitleStyle\fR or \fBBorderStyle\fR
(possibly used in conjunction with
\fBAddToDecor\fR)\.
Specifying an invalid decor results in all windows being
updated\.  This command is less disturbing than
\fBRecapture\fR,
but does not affect window style options as
\fBRecapture\fR
does\.
.RE
.SS Controlling the Virtual Desktop
.TP
\fBDesk\fR \fIarg1\fR [\fIarg2\fR] [\fImin\fR\ \fImax\fR]
.RS
.\".PP
This command has been renamed\.  Please see
\fBGotoDesk\fR
command\.
.RE
.TP
\fBDesktopName\fR \fIdesk\fR \fIname\fR
.RS
.\".PP
Defines the name of the desktop number
\fIdesk\fR
to
\fIname\fR\.
This name is used in the
\fBWindowList\fR
command and in the
\fBFvwmPager\fR
where it override the
\fILabel\fR
configuration option\.  Moreover, if consecutive names starting from
desktop 0 are defined, then these names can be used by any EWMH
compliant application (as a pager)\.
.RE
.TP
\fBDesktopSize\fR \fIHorizontal\fRx\fIVertical\fR
.RS
.\".PP
Defines the virtual desktop size in units of the physical screen
size\.
.RE
.TP
\fBEdgeResistance\fR \fIdelay\fR\fBEdgeResistance\fR \fIscrolling\fR \fImoving\fR [\fIxinerama\-scrolling\fR]
.RS
.\".PP
Tells how hard it should be to change the desktop viewport by
moving the mouse over the edge of the screen\.  The parameter tells
how many milliseconds the pointer must spend on the screen edge
before fvwm moves the viewport\.  This is intended for people who
use
.sp
.RS 4
.nf
\fBEdgeScroll\fR 100 100
.fi
.RE
.PP
but find themselves accidentally flipping pages when they do
not want to\.  If \-1 is given as the delay, scrolling is disabled
completely\.
.PP
The second form of invocation with two or three arguments is
obsolete and should be replaced with the following three commands
as needed:
.sp
.RS 4
.nf
\fBEdgeResistance\fR \fIscrolling\fR
\fBStyle\fR * EdgeMoveDelay \fIscrolling\fR
\fBStyle\fR * EdgeMoveResistance \fImoving\fR
or
\fBStyle\fR * EdgeMoveResistance \fImoving\fR \fIxinerama\-scrolling\fR
.fi
.RE
.PP
Fvwm does this substitution automatically and prints a warning\.
.RE
.TP
\fBEdgeScroll\fR \fIhorizontal\fR[p] \fIvertical\fR[p] [wrap | wrapx | wrapy]
.RS
.\".PP
Specifies the percentage of a page to scroll when the cursor hits
the edge of a page\.  A trailing '\fIp\fR'
changes the interpretation to mean pixels\.  If you do not want any
paging or scrolling when you hit the edge of a page include
.sp
.RS 4
.nf
EdgeScroll 0 0
.fi
.RE
.PP
in your
\fIconfig\fR
file, or possibly better, set the
\fBEdgeThickness\fR
to zero\.  See the
\fBEdgeThickness\fR
command\.  If you want whole pages, use
.sp
.RS 4
.nf
EdgeScroll 100 100
.fi
.RE
.PP
Both
\fIhorizontal\fR and \fIvertical\fR
should be positive numbers\.
.PP
If the
\fIhorizontal\fR and \fIvertical\fR
percentages are multiplied by 1000 or one of the keywords
\fIwrap\fR, \fIwrapx\fR
and \fIwrapy\fR
is given then scrolling wraps around at the edge of the desktop\.
If
.sp
.RS 4
.nf
EdgeScroll 100000 100000
.fi
.RE
.PP
is used fvwm scrolls by whole pages, wrapping around at the edge
of the desktop\.
.RE
.TP
\fBEdgeThickness\fR 0 | 1 | 2
.RS
.\".PP
This is the width or height of the invisible window that fvwm
creates on the edges of the screen that are used for the edge
scrolling feature\.
.PP
In order to enable page scrolling via the mouse, four windows
called the "pan frames" are placed at the very edge of the
screen\.  This is how fvwm detects the mouse's presence at the
window edge\.  Because of the way this works, they need to be at the
top of the stack and eat mouse events, so if you have any kind of
error along the lines of: "mouse clicks at the edge of the screen
do the wrong thing" you're having trouble with the pan frames and
(assuming you do not use the mouse to flip between pages) should
set the EdgeThickness to 0\.
.PP
A value of
0
completely disables mouse edge scrolling, even while dragging a
window\.
1
gives the smallest pan frames, which seem to work best except on
some servers\.
.PP
2
is the default\.
.PP
Pan frames of
1 or 2
pixels can sometimes be confusing, for example, if you drag a
window over the edge of the screen, so that it straddles a pan
frame, clicks on the window, near the edge of the screen are
treated as clicks on the root window\.
.RE
.TP
\fBEwmhBaseStruts\fR \fIleft\fR \fIright\fR \fItop\fR \fIbottom\fR
.RS
.\".PP
Where left, right, top and bottom are positive or null integers
which define bands at the edge of the screen\.
\fIleft\fR
defines a band on the left of your screen of width
\fIleft\fR,
\fIright\fR
defines a band on the right of your screen of width
\fIright\fR,
\fItop\fR
defines a band on the top of your screen of height
\fItop\fR
and
\fIbottom\fR
defines a band on the bottom of your screen of height
\fIbottom\fR\.
The unit is the pixel and the default is 0 0 0 0\.  These areas
define additional reserved space to the reserved space defined by
some ewmh compliant applications\.  This is used to compute the
Working Area\.  See the
\fBExtended Window Manager Hints\fR
section for a definition of the Working Area\.
.RE
.TP
\fBEwmhNumberOfDesktops\fR \fInum\fR [\fImax\fR]
.RS
.\".PP
This command is useful only for an ewmh compliant pager or taskbar
(as kpager or kicker taskbar) and not for fvwm modules (
\fBFvwmPager\fR or \fBFvwmIconMan\fR)\.  It causes a
compliant application to consider at least
\fInum\fR
desktops (desktop 0 to desktop
\fInum\fR\-1)\.
The optional argument
\fImax\fR
causes a compliant application to never consider more than
\fImax\fR
desktops\.  If
\fImax\fR
is 0 (the default) there is no limitation\.  The actual number of
desktops is determined dynamically\.  It is at least
\fInum\fR,
but it can be d if there is a window on desktop d\-1 (or if the
current desktop is desktop d\-1) and d is less or equal to
\fImax\fR
or
\fImax\fR
is null\.
Moreover, a compliant pager can ask to change
\fInum\fR
itself\.
This is accepted by fvwm only if this number is
less than or equal to
\fImax\fR
or if
\fImax\fR
is null\.  Note that negative desktops are not supported by the
ewmh specification\.  The default is 4 0\.
.RE
.TP
\fBGotoDesk\fR [prev | \fIarg1\fR\ [\fIarg2\fR]\ [\fImin\fR\ \fImax\fR]]
.RS
.\".PP
Switches the current viewport to another desktop (workspace, room)\.
.PP
The command takes 1, 2, 3, or 4 arguments\.  A single argument is
interpreted as a relative desk number\.  Two arguments are
understood as a relative and an absolute desk number\.  Three
arguments specify a relative desk and the minimum and maximum of
the allowable range\.  Four arguments specify the relative,
absolute, minimum and maximum values\.  (Desktop numbers can be
negative)\.  If a literal
\fIprev\fR
is given as the single argument, the last visited desk number is
used\.
.PP
If
\fIarg1\fR
is non zero then the next desktop number is the current desktop
number plus
\fIarg1\fR\.
.PP
If
\fIarg1\fR
is zero then the new desktop number is
\fIarg2\fR\.
(If
\fIarg2\fR
is not present, then the command has no effect\.)
.PP
If
\fImin\fR and \fImax\fR
are given, the new desktop number is no smaller than
\fImin\fR
and no bigger than
\fImax\fR\.
Values out of this range are truncated (if you gave an absolute
desk number) or wrapped around (if you gave a relative desk
number)\.
.PP
The syntax is the same as for
\fBMoveToDesk\fR,
which moves a window to a different desktop\.
.PP
The number of active desktops is determined dynamically\.  Only
desktops which contain windows or are currently being displayed
are active\.  Desktop numbers must be between 2147483647 and
\-2147483648 (is that enough?)\.
.RE
.TP
\fBGotoDeskAndPage\fR prev | \fIdesk\fR\ \fIxpage\fR\ \fIypage\fR
.RS
.\".PP
Switches the current viewport to another desktop and page, similar
to the
\fBGotoDesk\fR and \fBGotoPage\fR
commands\.  The new desk is
\fIdesk\fR
and the new page is
(\fIxpage\fR,\fIypage\fR)\.
.RE
.TP
\fBGotoPage\fR prev | [\fIoptions\fR]\ \fIx\fR[p]\ \fIy\fR[p]
.RS
.\".PP
Moves the desktop viewport to page (x,y)\.  The upper left page is
(0,0), the upper right is (M,0), where M is one less than the
current number of horizontal pages specified in the
\fBDesktopSize\fR
command\.  The lower left page is (0,N), and the lower right page
is (M,N), where N is the desktop's vertical size as specified in the
\fBDesktopSize\fR
command\.  To switch to a page relative to the current one add a
trailing '\fIp\fR'
after any or both numerical arguments\.
.PP
Possible
\fIoptions\fR
are
\fIwrapx\fR and \fIwrapy\fR
to wrap around the x or y coordinate when the viewport is moved
beyond the border of the desktop\.
.PP
To go to the last visited page use
\fIprev\fR
as the first argument\.  The
\fBGotoPage\fR
function should not be used in a pop\-up menu\.
.PP
Examples:
.sp
.RS 4
.nf
# Go to page (2,3)
GotoPage 2 3

# Go to lowest and rightmost page
GotoPage \-1 \-1

# Go to last page visited
GotoPage prev

# Go two pages to the right and one page up
GotoPage +2p \-1p
.fi
.RE
.RE
.TP
\fBScroll\fR [\fIhorizonal\fR[p]\ \fIvertical\fR[p] | reverse]
.RS
.\".PP
Scrolls the virtual desktop's viewport by
\fIhorizontal\fR
pages in the x\-direction and
\fIvertical\fR
pages in the y\-direction or starts interactive scrolling of the viewport\.  Either or both entries may be negative\.
Both
\fIhorizontal\fR and \fIvertical\fR
values are expressed in percent of pages, so
.sp
.RS 4
.nf
Scroll 100 100
.fi
.RE
.PP
means to scroll down and right by one full page\.
.sp
.RS 4
.nf
Scroll 50 25
.fi
.RE
.PP
means to scroll right half a page and down a quarter of a page\.
The
\fBScroll\fR
function should not be called from pop\-up menus\.  Normally,
scrolling stops at the edge of the desktop\.
.PP
If the
\fIhorizontal\fR and \fIvertical\fR
percentages are 100 or more and are multiplied by 1000 then
scrolling wraps around at the edge of the desktop\.  If
.sp
.RS 4
.nf
Scroll 100000 0
.fi
.RE
.PP
is executed over and over fvwm moves to the next desktop page on
each execution and wraps around at the edge of the desktop, so
that every page is hit in turn\.
.PP
If the letter '\fIp\fR'
is appended to each coordinate
(\fIhorizontal\fR and/or \fIvertical\fR),
then the scroll amount is measured in pixels\.
.PP
Without arguments or if the option
\fIreverse\fR
is given interactive scrolling takes place\.  The viewport
scrolls as the mouse is moved\.  With the
\fIreverse\fR
option scrolling is done in opposite direction of the mouse
movement, and without it scrolling in the same direction as the
mouse\.
.PP
The binding
.sp
.RS 4
.nf
\fBMouse\fR 1 A CM Scroll reverse
.fi
.RE
.PP
gives an effect of grabbing and dragging the viewport with button 1
if
.SM Control
and
.SM Meta
is pressed\.
.RE
.TP
\fBXinerama\fR [bool]
.RS
.\".PP
Enables Xinerama support if the boolean argument is true and
disables it if the argument is false\.  Calling this command
without arguments turns on Xinerama support if it was disabled before
and turns it off if it was enabled\.  For example:
.sp
.RS 4
.nf
# Turn Xinerama support on, use primary screen 2
\fBXineramaPrimaryScreen\fR 2
Xinerama on
# Turn it off again
Xinerama off
.fi
.RE
.RE
.TP
\fBXineramaPrimaryScreen\fR [primary\-screen]
.RS
.\".PP
Takes an integer number or 'g' or 'c' as its argument\.  A number
is taken as the number of the Xinerama screen that is to be used
as the primary screen\.  The primary screen can be used as the
preferred screen to place windows with
.sp
.RS 4
.nf
XineramaPrimaryScreen <screen number>
\fBStyle\fR * StartsOnScreen p
.fi
.RE
.PP
The primary screen is used in some of the modules and for the
default icon box too\.  Any number that is zero or more is taken as
the primary screen's number\.  Instead, the letter 'c' indicates to
use the current screen (containing the pointer) whenever the
primary screen is used\.  This may be very confusing under some
circumstances\.  With 'g', the global screen is used as the primary
screen, effectively disabling the primary screen\.  Calling this
function with any other argument (including none) resets the
primary screen to 0\.
.RE
.TP
\fBXineramaSls\fR [bool]
.RS
.\".PP
For multi\-screen implementations other than Xinerama, such as
Single Logical Screen, it is possible to simulate a Xinerama
configuration if the total screen seen by fvwm is made up of
equal sized monitors in a rectangular grid\.  The
\fBXineramaSls\fR
command turns SLS support on or off or toggles it to the opposite
state, depending on if the boolean argument is "True", "False" or
"toggle"\.  If no argument is given, this is treated like "toggle"\.
The default layout uses one by one screens\.  To configure the
layout, use the
\fBXineramaSlsSize\fR or \fBXineramaSlsScreens\fR
command\.
.RE
.TP
\fBXineramaSlsSize\fR \fIHorizontal\fR \fIVertical\fR
.RS
.\".PP
This command configures the layout of the Single Logical screen
feature\.  It takes two arguments,
\fIHorizontal\fR and \fIVertical\fR
which must be an integer value dividing evenly into the total
desktop width, and height\.  For an example with two
monitors side by side which appear as one screen through the
X\-Server with the right screen as the primary screen, use:
.sp
.RS 4
.nf
XineramaSlsSize 2x1
\fBXineramaSls\fR On
\fBXineramaPrimaryScreen\fR 1
\fBXinerama\fR On
.fi
.RE
.RE
.TP
\fBXineramaSlsScreens\fR number\-of\-screens [\fIscreen\-spec\fR ...]
.RS
.\".PP
This command configures the layout of the Single Logical screen
feature\.  Its first argument is the number of screens to use\.  It
must be followed by exactly this number of
\fIscreen\-spec\fR
arguments\.  Each of these can be written either in standard X
geometry format: "<width>x<height>+<x>+<y>" or as a space separated
list of numbers: "x y width height"\.  Both ways of describing
screens can be mixed in a single command\.  All four numbers must
be supplied\.  The
\fIx\fR and \fIy\fR
values specify the origin of the screen in relation to the global
screen's origin while
\fIwidth\fR and \fIheight\fR
specify the size of the screen in pixels\.  No checks are done if
the geometries make sense, so it is possible to define overlapping
screens (with random results) or screens that are not visible at
all\.
.sp
.RS 4
.nf
XineramaSlsScreens 3 \e
  512x768+0+0 512x300+512+0 512 300 512 468
\fBXineramaSls\fR On
\fBXineramaPrimaryScreen\fR 1
\fBXinerama\fR On
.fi
.RE
.RE
.SS User Functions and Shell Commands
.TP
\fBAddToFunc\fR [\fIname\fR\ [I\ |\ M\ |\ C\ |\ H\ |\ D\ \fIaction\fR]]
.RS
.\".PP
Begins or adds to a function definition\.  Here is an example:
.sp
.RS 4
.nf
AddToFunc Move\-or\-Raise I \fBRaise\fR
 + M \fBMove\fR
 + D \fBLower\fR
.fi
.RE
.PP
The function name is "Move\-or\-Raise", and it could be invoked from a
menu or a mouse binding or key binding:
.sp
.RS 4
.nf
\fBMouse\fR 1 TS A Move\-or\-Raise
.fi
.RE
.PP
The
\fIname\fR
must not contain embedded whitespace\.  No guarantees are made
whether function names with embedded whitespace work or not\.  This
behavior may also change in the future without further notice\.
The letter before the
\fIaction\fR
tells what kind of action triggers the command which follows it\.  '\fII\fR'
stands for "Immediate", and is executed as soon as the function is
invoked\.  '\fIM\fR'
stands for "Motion", i\.e\. if the user starts moving the mouse\.  '\fIC\fR'
stands for "Click", i\.e\., if the user presses and releases the
mouse button\.  '\fIH\fR'
stands for "Hold", i\.e\. if the user presses a mouse button and
holds it down for more than
\fBClickTime\fR
milliseconds\.  '\fID\fR'
stands for "Double\-click"\.  The action '\fII\fR'
causes an action to be performed on the button\-press, if the
function is invoked with prior knowledge of which window to act
on\.
.PP
There is a number of predefined symbols that are replaced by
certain values if they appear on the command line\.  Please refer
to the
\fBCommand Expansion\fR
section for details\.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBWarning\fR
Please read the comments on executing complex functions
in the section
\fBScripting and Complex Functions\fR\.
.PP
Examples:
.PP
If you call
.sp
.RS 4
.nf
\fBKey\fR F10 R A \fBFunction\fR MailFunction xmh "\-font fixed"
.fi
.RE
.PP
and "MailFunction" is
.sp
.RS 4
.nf
AddToFunc MailFunction
 + I \fBNext\fR ($0) \fBIconify\fR off
 + I \fBNext\fR (AcceptsFocus, $0) \fBFocus\fR
 + I \fBNone\fR ($0) \fBExec\fR exec $0 $1
.fi
.RE
.PP
Then the last line of the function becomes
.sp
.RS 4
.nf
 + I \fBNone\fR (xmh) \fBExec\fR exec xmh \-font fixed
.fi
.RE
.PP
The expansion is performed as the function is executed, so you can
use the same function with all sorts of different arguments\.  You
could use
.sp
.RS 4
.nf
\fBKey\fR F11 R A \fBFunction\fR MailFunction zmail "\-bg pink"
.fi
.RE
.PP
in the same
\fIconfig\fR,
if you wanted\.  An example of using "$[w\.id]" is:
.sp
.RS 4
.nf
AddToFunc PrintFunction
 + I \fBRaise\fR
 + I \fBExec\fR xdpr \-id $[w\.id]
.fi
.RE
.PP
Note that "$$" is expanded to '$'\.
.PP
Another example: bind right mouse button within the window button
number 6 (this is a minimize button for the win95 theme) to
iconify all windows of the same resource:
.sp
.RS 4
.nf
AddToFunc FuncIconifySameResource "I" \fBAll\fR ($0) \fBIconify\fR on
\fBMouse\fR 3 6 A FuncIconifySameResource $[w\.resource]
.fi
.RE
.RE
.TP
\fBBeep\fR
.RS
.\".PP
As might be expected, this makes the terminal beep\.
.RE
.TP
\fBDestroyFunc\fR \fIfunction\fR
.RS
.\".PP
Deletes a function, so that subsequent references to it are no
longer valid\.  You can use this to change the contents of a
function during a fvwm session\.  The function can be rebuilt using
\fBAddToFunc\fR\.
.sp
.RS 4
.nf
DestroyFunc PrintFunction
.fi
.RE
.RE
.TP
\fBEcho\fR \fIstring\fR
.RS
.\".PP
Prints a message to
\fIstderr\fR\.
Potentially useful for debugging things in your
\fIconfig\fR\.
.sp
.RS 4
.nf
Echo Beginning style definitions\.\.\.
.fi
.RE
.RE
.TP
\fBEchoFuncDefinition\fR \fIfunction\fR
.RS
.\".PP
The
\fBEchoFuncDefinition\fR
is similar to the
\fBEcho\fR
command but prints the definition for the given
\fIfunction\fR
to
\fIstderr\fR\.
It is useful to find out how fvwm handles quoting and for
debugging functions
\.
.RE
.TP
\fBExec\fR \fIcommand\fR
.RS
.\".PP
Executes
\fIcommand\fR\.
You should not use an ampersand '&' at the end of the command\.  You
probably want to use an additional "exec" at the beginning of
\fIcommand\fR\.
Without that, the shell that fvwm invokes to run your command
stays until the command exits\.  In effect, you'll have twice as
many processes running as you need\.  Note that some shells are
smart enough to avoid this, but it never hurts to include the
"exec" anyway\.
.PP
The following example binds function key
.SM F1
in the root window, with no modifiers, to the exec function\.  The
program rxvt is started with an assortment of options\.
.sp
.RS 4
.nf
\fBKey\fR F1 R N Exec exec rxvt \-fg yellow \-bg blue \e
  \-e /bin/tcsh
.fi
.RE
.PP
Note that this function doesn't wait for
\fIcommand\fR
to complete, so things like:
.sp
.RS 4
.nf
Exec "echo \fBAddToMenu\fR \.\.\. > /tmp/file"
\fBRead\fR /tmp/file
.fi
.RE
.PP
do not work reliably
(see the
\fBPipeRead\fR
command)\.
.RE
.TP
\fBExecUseShell\fR [\fIshell\fR]
.RS
.\".PP
Makes the
\fBExec\fR
command use the specified shell, or the value of the
\fI$SHELL\fR
environment variable if no shell is specified, instead of the
default Bourne shell
(\fI/bin/sh\fR)\.
.sp
.RS 4
.nf
ExecUseShell
ExecUseShell /usr/local/bin/tcsh
.fi
.RE
.RE
.TP
\fBFunction\fR \fIFunctionName\fR
.RS
.\".PP
Used to bind a previously defined function to a key or mouse
button\.  The following example binds mouse button 1 to a function
called "Move\-or\-Raise", whose definition was provided as an
example earlier in this man page\.  After performing this binding
fvwm executes the "move\-or\-raise" function whenever button 1 is
pressed in a window's title\-bar\.
.sp
.RS 4
.nf
\fBMouse\fR 1 T A Function Move\-or\-Raise
.fi
.RE
.PP
The keyword
\fBFunction\fR
may be omitted if
\fIFunctionName\fR
does not coincide with an fvwm command\.
.PP
Warning: Please read the comments on executing complex functions
in the section \fBScripting and Complex Functions\fR\.
.RE
.TP
\fBNop\fR
.RS
.\".PP
Does nothing\.  This is used to insert a blank line or separator in
a menu\.  If the menu item specification is
.sp
.RS 4
.nf
\fBAddToMenu\fR MyMenu " " Nop
.fi
.RE
.PP
then a blank line is inserted\.  If it looks like
.sp
.RS 4
.nf
+ "" Nop
.fi
.RE
.PP
then a separator line is inserted\.  Can also be used as the
double\-click action for
\fBMenu\fR or \fBPopup\fR\.
.RE
.TP
\fBPipeRead\fR \fIcommand\fR [quiet]
.RS
.\".PP
Causes fvwm to read commands from the output of the
\fIcommand\fR\.
This
\fIcommand\fR
is executed by
\fI/bin/sh\fR
as if you typed it on the command line\.  If the command consists
of more than one word it must be quoted\.  Useful for building up
dynamic menu entries based on a directories contents, for
example\.  If the keyword
\fIQuiet\fR
follows the command no message is produced if the
\fIcommand\fR
is not found\.
.PP
Example:
.sp
.RS 4
.nf
\fBAddToMenu\fR HomeDirMenu
PipeRead 'for i in $HOME/*; \e
  do echo "+ $i \fBExec\fR xterm \-e vi $i"; done'
.fi
.RE
.PP
Note: The
\fBPipeRead\fR
changes the pointer to a watch cursor by default during
execution\.  However, some commands, for example xwd, need to take
control of the pointer themselves and do not work\.  To disable the
watch cursor, use the command prior to
\fBPipeRead\fR
.sp
.RS 4
.nf
\fBBusyCursor\fR \fIRead\fR off
.fi
.RE
.PP
The
\fBPipeRead\fR
command executes synchronously\.  If you want to
\fBExec\fR
something, but need the command to run synchronously,
you might do something like:
.sp
.RS 4
.nf
PipeRead 'command 1>&2'
.fi
.RE
.PP
The redirection causes any output from the program to go to stderr
instead of being read as a sequence of commands by fvwm\.
\fBPipeRead\fR
returns 1 if the given command could be executed or \-1 if not
(see the section
\fBConditional Commands\fR
for the meaning of return codes)\.
.RE
.TP
\fBRead\fR \fIfilename\fR [quiet]
.RS
.\".PP
Causes fvwm to read commands from the file named
\fIfilename\fR\.
If the keyword
\fIQuiet\fR
follows the command no message is produced if the file is not
found\.  If the file name does not begin with a slash ('/'), fvwm
looks in the user's data directory, then the system data
directory\.  The user's data directory is by default
\fI\fI$HOME\fR\fR\fI/\.fvwm\fR\.
It can be overridden by exporting
\fIFVWM_USERDIR\fR
set to any other directory\.  The
\fBRead\fR
command returns 1 if the given file could be read or \-1 if not
(see the section
\fBConditional Commands\fR
for the meaning of return codes)\.
.RE
.TP
\fBSetEnv\fR \fIvariable\fR \fIvalue\fR
.RS
.\".PP
Set an environment variable to a new value, similar to the shell's
export or setenv command\.  The
\fIvariable\fR
and its
\fIvalue\fR
are inherited by processes started directly by fvwm\.  This can be
especially useful in conjunction with the
\fBFvwmM4\fR
module\.  For example:
.sp
.RS 4
.nf
SetEnv height HEIGHT
.fi
.RE
.PP
makes the \fBFvwmM4\fR set variable
\fIHEIGHT\fR
usable by processes started by fvwm as the environment variable
\fI$height\fR\.
If
\fIvalue\fR
includes whitespace, you should enclose it in quotes\.  If no
\fIvalue\fR
is given, the variable is deleted\.
.RE
.TP
\fBSilent\fR \fIcommand\fR
.RS
.\".PP
A number of commands require a window to operate on\.  If
no window was selected when such a function is invoked the user is
asked to select a window\.  Sometimes this behavior is unwanted,
for example if the function was called by a module and the window
that was selected at first does not exist anymore\.  You can
prevent this by putting
\fBSilent\fR
in front of the fvwm
\fIcommand\fR\.
If a function that needs a window is called with
\fBSilent\fR
without a window selected, it simply returns without doing
anything\.  If
\fBSilent\fR
is used on a user defined function it affects all function and sub
function calls until the original function exits\.
.PP
Another usage of
\fBSilent\fR
is with binding commands
\fBKey\fR, \fBPointerKey\fR and \fBMouse\fR,
this disables error messages\.
.PP
\fBSilent\fR
also disables the error message for non\-existent commands\.  Note:
This command is treated as a prefix to its
\fIcommand\fR\.
Expansion of the command line is done as if
\fBSilent\fR
was not there\.
.PP
Examples:
.sp
.RS 4
.nf
Silent \fBMove\fR 0 0
Silent User_defined_function
# do not complain on keyboards without "Help" key
Silent \fBKey\fR Help R A \fBPopup\fR HelpMenu
.fi
.RE
.RE
.TP
\fBUnsetEnv\fR [\fIvariable\fR]
.RS
.\".PP
Unset an environment variable, similar to shell's export or
unsetenv command\.  The
\fIvariable\fR
then is removed from the environment array inherited by processes
started directly by fvwm\.
.RE
.TP
\fBWait\fR \fIwindow\fR
.RS
.\".PP
This command is intended to be used in fvwm functions only\.  It
causes execution of a function to pause until a new window matching
\fIwindow\fR
appears\.  This can be a window's name, class, or resource string\.
It may contain the wildcards '*' and '?', which are matched in the
usual Unix filename manner\.  This is particularly useful in the
"InitFunction" if you are trying to start windows on specific desktops:
.sp
.RS 4
.nf
\fBAddToFunc\fR InitFunction
 + I \fBExec\fR exec xterm \-geometry 80x64+0+0
 + I Wait xterm
 + I \fBGotoDesk\fR 0 2
 + I \fBExec\fR exec xmh \-font fixed \-geometry \e
       507x750+0+0
 + I Wait xmh
 + I \fBGotoDesk\fR 0 0
.fi
.RE
.PP
The above function starts an xterm on the current desk, waits for
it to map itself, then switches to desk 2 and starts an xmh\.
After the xmh window appears control moves to desk 0\.
.PP
Fvwm remains partially functional during a wait, but any input
from the modules is queued up and processed only after the window
appears or the command is aborted\.  For example, windows can not
be focused with \fBFvwmTaskBar\fR or 
\fBFvwmWinList\fR during a wait\.
.PP
You can escape from a
\fBWait\fR
pause by pressing
.SM Ctrl-Alt-Escape
(where
.SM Alt
is the first modifier)\.  To redefine this key sequence see the
\fBEscapeFunc\fR
command\.
.RE
.SS Conditional Commands
.PP
Conditional commands are commands that are only executed if certain
conditions are met\.  Most conditional commands work on windows,
like
\fBNext\fR, \fBThisWindow\fR or \fBAll\fR\.
There is one conditional command,
\fBTest\fR,
that works on global conditions unrelated to windows\.  The syntax
of the conditions is described below\.  For readability, the list
of conditions is located at the end of this section\.
.TP
.B Return Codes
.RS
.\".PP
All commands in this section (unless specifically stated for the
command) also have a return code that can be 1 (if the condition
was met) or 0 (if the condition was not met)\.  Some commands may
return \-1 which means that an error occurred and the return code
is useless\.  The
\fBBreak\fR
command returns \-2\.  Additionally, the return codes of commands
run in a complex functions are passed to the invoking complex
function\.  The return code is used by the
\fBTestRc\fR
command\.  Please refer to the commands' description for examples\.
The return code can also be accessed through the variable
\fI$[cond\.rc]\fR\.
Non conditional commands do not modify the return code of the last
conditional command\.  Important note: return codes are only
defined inside functions created with the
\fBAddToFunc\fR
command and are not inherited by sub functions\.  To run a command
without altering the return code, the
\fBKeepRc\fR
command can be used\.
.RE
.TP
.B The Ring of Windows
.RS
.\".PP
Fvwm stores windows in a ring internally\.  Think of the focused
window as a cursor on the current position in the ring\.  The
\fBNext\fR
command and many other commands search forwards through the ring
for a matching window, and
\fBPrev\fR
searches backwards\.  The windows in the ring are either ordered by
creation time (if the
\fI!FPSortWindowlistByFocus\fR,
\fINeverFocus\fR or \fIMouseFocus\fR
styles are used) or by the last time they had the focus\.
.RE
.TP
.B List of Conditional Commands
.RS
.\".TP
\fBAll\fR [\fIoptions\fR] [(\fIconditions\fR)] \fIcommand\fR
.RS
.\".PP
Execute
\fIcommand\fR
on all windows meeting the conditions\.  It returns 1 if any window
matches the condition and 0 otherwise\.  The execution starts at the top of the
window ring and continues towards the bottom\.  The
\fIoptions\fR
can be any combination of
\fIReverse\fR and \fIUseStack\fR\.
If the option
\fIReverse\fR
is given the execution order is reversed\.  The option
\fIUseStack\fR
makes All use the stacking order instead of the window ring when walking
through windows\.
See the \fBConditions\fR section for a list of conditions\.
.PP
This command implies the conditions
\fICirculateHit\fR, \fICirculateHitIcon\fR and \fICirculateHitShaded\fR\.
They can be turned off by specifying
\fI!CirculateHit\fR
etc\.  explicitly\.
.RE
.TP
\fBAny\fR [(\fIconditions\fR)] \fIcommand\fR
.RS
.\".PP
Performs
\fIcommand\fR
if any window which satisfies all
\fIconditions\fR
exists\.  The command is run in the context of the root window\.
See the \fBConditions\fR section for a list of conditions\.
.RE
.TP
\fBBreak\fR [\fIlevels\fR]
.RS
.\".PP
If the break command is used in a function, function execution is
terminated immediately\.  Further commands of the function are not
processed\.  Normally, all nested invocations of complex functions
are left\.  An optional integer number
\fIlevels\fR
may be given to break out of the given number of nested functions
and continue execution of a higher level function\.
The
\fBBreak\fR
command always has the return code \-2\.  Example:
.sp
.RS 4
.nf
\fBAddToFunc\fR PickWindowRaiseAndDeiconify
+ I \fBPick\fR
+ I \fBTestRc\fR (Error) Break
+ I \fBRaise\fR
+ I \fBIconify\fR off
.fi
.RE
.RE
.TP
\fBCurrent\fR [(\fIconditions\fR)] \fIcommand\fR
.RS
.\".PP
Performs
\fIcommand\fR
on the currently focused window if it satisfies all
\fIconditions\fR\.
See the \fBConditions\fR section for a list of conditions\.
.PP
This command implies the conditions
\fICirculateHit\fR, \fICirculateHitIcon\fR and \fICirculateHitShaded\fR\.
They can be turned off by specifying
\fI!CirculateHit\fR
etc\.  explicitly\.
.RE
.TP
\fBDirection\fR [FromPointer] \fIdirection\fR [(\fIconditions\fR)] \fIcommand\fR
.RS
.\".PP
Performs
\fIcommand\fR
(typically
\fBFocus\fR)
on a window in the given direction which satisfies all
\fIconditions\fR\.
Normally, the center of the currently focused window or the
context window in which the command was invoked is taken as the
starting point\.  Lacking such a window, or when the
\fIFromPointer\fR
option is given, the current position of the pointer is taken as
the starting point\.  The
\fIdirection\fR
may be one of "North", "Northeast", "East", "Southeast", "South",
"Southwest", "West", "Northwest" and "Center"\.  Which window
\fBDirection\fR
selects depends on angle and distance between the center points of
the windows\.  Closer windows are considered a better match than
those farther away\.  The
\fICenter\fR
direction simply selects the window closest to the starting point\.
Returns \-1 if an invalid direction was given\.
See the \fBConditions\fR section for a list of conditions\.
.RE
.TP
\fBKeepRc\fR \fIcommand\fR
.RS
.\".PP
Runs the
\fIcommand\fR
but does not alter the return code of the previous command\.  Note:
\fBKeepRc\fR
is treated as a prefix to its
\fIcommand\fR\.
Expansion of the command line is done as if
\fBKeepRc\fR
was not there\.
.RE
.TP
\fBNext\fR [(\fIconditions\fR)] \fIcommand\fR
.RS
.\".PP
Performs
\fIcommand\fR
(typically
\fBFocus\fR)
on the next window which satisfies all
\fIconditions\fR\.
If the command is running in a window context, it starts looking
for a matching window from there\.  Otherwise it starts at the
focused window\.
See \fBConditions\fR section for a list of conditions\.
.RE
.TP
\fBNone\fR [(\fIconditions\fR)] \fIcommand\fR
.RS
.\".PP
Performs
\fIcommand\fR
if no window which satisfies all
\fIconditions\fR
exists\.  The command is run in the context of the root window\.
Returns 1 if no window matches the conditions and 0 otherwise\.
See \fBConditions\fR section for a list of conditions\.
.PP
This command implies the conditions
\fICirculateHit\fR, \fICirculateHitIcon\fR and \fICirculateHitShaded\fR\.
They can be turned off by specifying
\fI!CirculateHit\fR
etc\.  explicitly\.
.RE
.TP
\fBNoWindow\fR \fIcommand\fR
.RS
.\".PP
Performs
\fIcommand\fR,
but removes the window context if any\.  This is not really a
conditional command, but a prefix that may be useful in menu items
that should operate without a window even if such menu is bound to
window decorations\.
.RE
.TP
\fBPick\fR [(\fIconditions\fR)] \fIcommand\fR
.RS
.\".PP
\fBPick\fR
works like
\fBFunction\fR
if invoked in the context of a window\.  If invoked in the root
window, it first asks the user to pick a window and then executes
the
\fIcommand\fR
in the context of that window\.  This avoids annoying multiple
selections with complex functions\.  The command is executed only
if the given
\fIconditions\fR
are met\.  Returns \-1 if no window was selected\.
See \fBConditions\fR section for a list of conditions\.
.PP
This command implies the conditions
\fICirculateHit\fR, \fICirculateHitIcon\fR and \fICirculateHitShaded\fR\.
They can be turned off by specifying
\fI!CirculateHit\fR
etc\.  explicitly\.
.RE
.TP
\fBPointerWindow\fR [(\fIconditions\fR)] \fIcommand\fR
.RS
.\".PP
Performs
\fIcommand\fR
if the window under the pointer satisfies all
\fIconditions\fR\.
Returns \-1 if there is no window under the pointer\.
See \fBConditions\fR section for a list of conditions\.
.PP
This command implies the conditions
\fICirculateHit\fR, \fICirculateHitIcon\fR and \fICirculateHitShaded\fR\.
They can be turned off by specifying
\fI!CirculateHit\fR
etc\.  explicitly\.
.RE
.TP
\fBPrev\fR [(\fIconditions\fR)] \fIcommand\fR
.RS
.\".PP
Performs
\fIcommand\fR
(typically
\fBFocus\fR)
on the previous window which satisfies all
\fIconditions\fR\.
If the command is running in a window context, it starts looking
for a matching window from there\.  Otherwise it starts at the
focused window\.
See \fBConditions\fR section for a list of conditions\.
.RE
.TP
\fBScanForWindow\fR [FromPointer] \fIdir1\fR \fIdir2\fR [(\fIconditions\fR)] \fIcommand\fR
.RS
.\".PP
Performs \fIcommand\fR
(typically \fBFocus\fR)
on a window in the given direction which satisfies all
\fIconditions\fR\.
Normally, the center of the currently focused window or the
context window in which the command was invoked is taken as the
starting point\.  Lacking such a window, or when the
\fIFromPointer\fR
option is given, the current position of the pointer is taken as
the starting point\.  The direction
\fIdir1\fR
may be one of "North", "NorthEast", "East", "SouthEast", "South",
"SouthWest", "West", and "NorthWest"\.  Which window
\fBScanForWindow\fR
selects depends first on the position along the primary axis given
by
\fIdir1\fR\.
If any windows have the exact same coordinate along the primary
axis, the secondary direction is used to order the windows\.  The
direction \fIdir2\fR
may be one of the same set of values as
\fIdir1\fR\.
If \fIdir2\fR
is not perfectly perpendicular to
\fIdir1\fR,
ScanForWindow returns a failure\.  When using ScanForWindow
repeatedly with the same arguments, it is guaranteed that all
windows matching the conditions will eventually be found\.  If the
focus reaches a limit along the primary axis, it will wrap around
to the opposite side\.  Returns \-1 if an invalid direction was
given\.
See \fBConditions\fR section for a list of conditions\.
.RE
.TP
\fBTest\fR [(\fItest\-conditions\fR)] \fIcommand\fR
.RS
.\".PP
Performs \fIcommand\fR if all
\fItest\-conditions\fR are satisfied\.  The
\fItest\-conditions\fR
are keywords with possible arguments from the list below
and are separated by commas or whitespace\.  They include:
\fIVersion operator x\.y\.z\fR,
\fIEnvIsSet varname\fR,
\fIEnvMatch varname pattern\fR,
\fIEdgeHasPointer direction\fR,
\fIEdgeIsActive direction\fR,
\fIStart\fR,
\fIInit\fR,
\fIRestart\fR,
\fIExit\fR,
\fIQuit\fR,
\fIToRestart\fR,
\fITrue\fR,
\fIFalse\fR,
\fIF\fR,
\fIR\fR,
\fIW\fR,
\fIX\fR and
\fII\fR\.
A test\-condition prefixed with "!" is negated\.
.PP
The
\fIVersion\fR \fIoperator x\.y\.z\fR
test\-condition is fulfilled if the logical condition of the expression is
true\.  Valid \fIoperator\fR values are:
\fI>=\fR,
\fI>\fR,
\fI<=\fR,
\fI<\fR,
\fI==\fR
and
\fI!=\fR\.
.PP
Example:
.sp
.RS 4
.nf
Test (Version >= 2\.5\.11) \fBEcho\fR 2\.5\.11 or later\.
.fi
.RE
.PP
The
\fIEnvIsSet\fR \fIvarname\fR
test\-condition is true if the given environment variable is set\.
The
\fIEnvMatch\fR \fIvarname pattern\fR
test\-condition is true if
\fIpattern\fR
matches the given environment variable value\.
The pattern may contain special "*" and "?" chars\.
.PP
The
\fIEdgeHasPointer\fR
[\fIdirection\fR]
test\-condition is true if the edge in the given direction currently
contains the pointer\.
The
\fIEdgeIsActive\fR
[\fIdirection\fR]
test\-condition is true if the edge in the given direction currently is
active\.  An edge is active, and can contain a pointer if either a
command is bound to it or edge scroll is available in that
direction\.  The direction may be one of
\fI Any\fR,\fI North\fR,\fI Top\fR,\fI Up\fR,\fI West\fR,\fI Left\fR,\fI South\fR,\fI Bottom\fR,
\fI Down\fR,\fI Right\fR and \fI East\fR\.
If no direction is specified \fIAny\fR is assumed\.
.PP
The
\fIStart\fR
test\-condition is the same as either
\fIInit\fR or \fIRestart\fR\.
It is only true on startup or restart prior and during
\fBStartFunction\fR
execution\.
The
\fIExit\fR
test\-condition is the same as either
\fIQuit\fR or \fIToRestart\fR\.
It is only valid on shutdown during
\fBExitFunction\fR
function execution\.
.PP
The \fITrue\fR and \fIFalse\fR
test\-conditions are unconditionally true and false\.
.PP
Additionally, if a test\-condition name is not recognized, the Error
return code is set and the command is not executed\.
.PP
The
\fIF\fR \fIfile\fR,
\fIR\fR \fIfile\fR,
\fIW\fR \fIfile\fR,
\fIX\fR \fIfile\fR and
\fII\fR \fIfile\fR
test\-conditions test for existence of the given [F]ile (possibly
with [R]ead/[W]rite permissions), e[X]ecutable (in \fI$PATH\fR),
or the [I]mage (in ImagePath)\.
.PP
Example:
.sp
.RS 4
.nf
\fBAddToFunc\fR StartFunction I Test (Init) \fBExec\fR exec xterm

\fBAddToFunc\fR VerifyVersion
+ I Test (Version 2\.5\.*) \fBEcho\fR 2\.5\.x detected
+ I \fBTestRc\fR (NoMatch) \e
	Test (!Version 2\.6\.*) \fBEcho\fR Future version
+ I \fBTestRc\fR (NoMatch) \e
	\fBEcho\fR 2\.6\.x is detected

Test (F $[FVWM_USERDIR]/local\-config) \fBRead\fR local\-config
Test (X xterm\-utf16) \fBExec\fR exec xterm\-utf16
.fi
.RE
.RE
.TP
\fBTestRc\fR [([!]\fIreturncode\fR)] \fIcommand\fR
.RS
.\".PP
Performs
\fIcommand\fR
if the last conditional command returned the value
\fIreturncode\fR\.
Instead of the numeric values 0 (no match), 1 (match), \-1 (error),
and \-2 (break) the symbolic names "\fINoMatch\fR",
"\fIMatch\fR", "\fIError\fR" and
"\fIBreak\fR" can be used\.  If no
\fIreturncode\fR
is given, the default 0 is assumed\.  If the return code is
prefixed with '!', the command is executed if
\fIreturncode\fR
does not match the value returned by the conditional command\.
The \fBTestRc\fR
command can only be used inside functions\.  If the
\fIcommand\fR
is another conditional command, the previous return code is
replaced by the new one\.  Example:
.sp
.RS 4
.nf
\fBAddToFunc\fR ToggleXterm
+ I \fBAll\fR (my_xtermwindow) \fBClose\fR
+ I TestRc (NoMatch) \fBExec\fR xterm \-T my_xtermwindow
.fi
.RE
.RE
.TP
\fBThisWindow\fR [(\fIconditions\fR)] command
.RS
.\".PP
\fBThisWindow\fR
executes the specified
\fIcommand\fR
in the context of the current operand window\.  If there is no
operand window (it is invoked in the root window), the command is
ignored\.
\fBThisWindow\fR
is never interactive\.  The command is executed only if the given
\fIconditions\fR
are met\.  It returns \-1 if used outside a window context\.
See \fBConditions\fR section for a list of conditions\.
.PP
This command implies the conditions
\fICirculateHit\fR, \fICirculateHitIcon\fR and \fICirculateHitShaded\fR\.
They can be turned off by specifying "!CirculateHit"
etc\.  explicitly\.
.RE
.TP
\fBWindowId\fR [\fIid\fR]\ [(\fIconditions\fR)] | [root\ [\fIscreen\fR]] \fIcommand\fR
.RS
.\".PP
The
\fBWindowId\fR
command looks for a specific window
\fIid\fR
and runs the specified
\fIcommand\fR
on it\.  The second form of syntax retrieves the window id of the
root window of the given
\fIscreen\fR\.
If no
\fIscreen\fR
is given, the current screen is assumed\.  The window indicated by
\fIid\fR
may belong to a window not managed by fvwm or even a window on a
different screen\.  Although most commands can not operate on such
windows, there are some exceptions, for example the
\fBWarpToWindow\fR
command\.
Returns \-1 if no window with the given id exists\.
See \fBConditions\fR section for a list of conditions\.
.PP
This command implies the conditions
\fICirculateHit\fR, \fICirculateHitIcon\fR and \fICirculateHitShaded\fR\.
They can be turned off by specifying
\fI!CirculateHit\fR
etc\.  explicitly\.
.PP
Examples:
.sp
.RS 4
.nf
WindowId 0x34567890 \fBRaise\fR
WindowId root 1 \fBWarpToWindow\fR 50 50
WindowId $0 (Silly_Popup) \fBDelete\fR
.fi
.RE
.PP
In the past this command was mostly useful for functions used with
the
\fBWindowList\fR
command, or for selective processing of
\fBFvwmEvent\fR
calls (as in the last example), but currently these handler functions
are called within a window context, so this command is not really
needed in these cases\.  Still it may be useful if, for example, the
window id should be stored in the environment variable for a further
proceeding\.
.sp
.RS 4
.nf
\fBPick\fR \fBSetEnv\fR BOOKMARKED_WINDOW $[w\.id]
WindowId $[BOOKMARKED_WINDOW] \fBWarpToWindow\fR
.fi
.RE
.RE
.RE
.TP
.B Conditions
.RS
.\".PP
The
\fIconditions\fR
that may be given as an argument to any conditional command are a
list of keywords separated by commas, enclosed in
parentheses\.  Unless stated otherwise, conditional commands accept
all the conditions listed below\.  Note that earlier versions of
fvwm required the conditions to be separated by whitespace instead
of commas and enclosed in brackets instead of parentheses
(this is still supported for backward compatibility)\.
.PP
In addition, the
\fIconditions\fR
may include one or more window names to match to\.  If more than
one window name is given, all of them must match\.  The window
name, icon name, class, and resource are considered when
attempting to find a match\.  Each name may include the wildcards '*' and '?', and may consist of two or more alternatives,
separated by the character '|', which acts as an OR operator\.  (If
OR operators are used, they must not be separated by spaces from
the names\.) Each window name can begin with '!', which prevents
\fIcommand\fR
if any of the window name, icon name, class or resource match\.
However, '!' must not be applied to individual names in a group
separated by OR operators; it may only be applied to the beginning
of the group, and then it operates on the whole group\.
.PP
Examples:
.sp
.RS 4
.nf
\fBNext\fR ("Netscape|konqueror|Mozilla*") \fBWarpToWindow\fR 99 90
.fi
.RE
.PP
This goes to the next web browser window, no matter which of the
three named web browsers is being used\.
.sp
.RS 4
.nf
\fBNext\fR ("Mozilla*", "Bookmark*") \fBWarpToWindow\fR 99 90
.fi
.RE
.PP
This goes to Mozilla's bookmark manager window, ignoring other
Mozilla windows and other browsers' bookmark windows\.
.sp
.RS 4
.nf
\fBAll\fR ("XTerm|rxvt", !console) \fBIconify\fR
.fi
.RE
.PP
This iconifies all the xterm and rxvt windows on the current page,
except that the one named "console" (with the \-name option to xterm)
is excluded\.
.sp
.RS 4
.nf
\fBNext\fR (!"\fBFvwmPager\fR|\fBFvwmForm\fR*|\fBFvwmButtons\fR") \fBRaise\fR
\fBNext\fR (!\fBFvwmPager\fR, !\fBFvwmForm\fR*, !\fBFvwmButtons\fR) \fBRaise\fR
.fi
.RE
.PP
These two commands are equivalent; either one raises the next window
which is not one of the named fvwm modules\.
.PP
Any condition can be negated by using a an exclamation mark ('!')
directly in front of its name\.
.PP
\fIAcceptsFocus\fR,
\fIAnyScreen\fR,
\fICirculateHit\fR,
\fICirculateHitIcon\fR,
\fICirculateHitShaded\fR,
\fIClosable\fR,
\fICurrentDesk\fR,
\fICurrentGlobalPage\fR,
\fICurrentGlobalPageAnyDesk\fR,
\fICurrentPage\fR,
\fICurrentPageAnyDesk\fR,
\fICurrentScreen\fR,
\fIFixedPosition\fR,
\fIFixedSize\fR,
\fIFocused\fR,
\fIHasHandles\fR,
\fIHasPointer\fR,
\fIIconic\fR,
\fIIconifiable\fR,
\fILayer [n]\fR,
\fIMaximizable\fR,
\fIMaximized\fR,
\fIOverlapped\fR,
\fIPlacedByButton n\fR,
\fIPlacedByButton3\fR,
\fIPlacedByFvwm\fR,
\fIRaised\fR,
\fIShaded\fR,
\fIState n\fR,
\fISticky\fR,
\fIStickyAcrossDesks\fR,
\fIStickyAcrossPages\fR,
\fIStickyIcon\fR,
\fIStickyAcrossDesksIcon\fR,
\fIStickyAcrossPagesIcon\fR,
\fITransient\fR,
\fIVisible\fR\.
.PP
The
\fIAcceptsFocus\fR
condition excludes all windows that do not want the input focus
(the application has set the "Input hints" for the window to
False) and do not use the
\fILenience\fR
option of the
\fBStyle\fR
command\.  Also, all windows using the
\fINeverFocus\fR
style are ignored\.
Note:
\fI!Lenience\fR
is equivalent to the deprecated option
\fINoLenience\fR\.
.PP
With the
\fIAnyScreen\fR
condition used together with any of the
\fICurrent\.\.\.\fR
conditions, windows that do not intersect the Xinerama screen
containing the mouse pointer are considered for a match too\.  For
example:
.sp
.RS 4
.nf
# Focus next window on current page,
# regardless of Xinerama screen
\fBNext\fR (CurrentPage, AnyScreen) \fBFocus\fR
.fi
.RE
.PP
The
\fICirculateHit\fR and \fICirculateHitIcon\fR
options override the
\fICirculateSkip\fR and \fICirculateSkipIcon\fR
\fBStyle\fR
attributes for normal or iconic windows\.  The
\fICirculateHitShaded\fR
option overrides the
\fICirculateSkipShaded\fR
\fBStyle\.\fR
All three options are turned on
by default for the
\fBCurrent\fR
command\.  They can be turned off by specifying
\fI!CirculateHit\fR
etc\.  explicitly\.
Note: Do not confuse these conditions with the style options of
the same name\.  Specifically,
.sp
.RS 4
.nf
\fBStyle\fR foo CirculateSkip
\fBNext\fR (foo, CirculateHit) \.\.\.
.fi
.RE
.PP
is not the same as
.sp
.RS 4
.nf
\fBStyle\fR foo CirculateHit \.\.\.
\fBNext\fR (foo)
.fi
.RE
.PP
The prior selects windows with the name foo only in the Next
command\.  In the second example, these windows are always matched
in all conditional commands\.
.PP
The
\fIClosable\fR
condition matches only windows that are allowed to be closed\.
.PP
The
\fICurrentDesk\fR
condition matches only windows that are on the current desk\.
.PP
The
\fICurrentGlobalPage\fR
condition matches only windows that are on the current page of the
current desk, regardless of whether Xinerama support is enabled or
not\.  This condition implicitly activates the
\fICurrentDesk\fR
condition\.
.PP
The
\fICurrentGlobalPageAnyDesk\fR
condition matches only windows that are on the current page of any
desk, regardless of whether Xinerama support is enabled or not\.
.PP
The
\fICurrentPage\fR
condition matches only windows that are on the current page of the
current desk\.  If Xinerama support is enabled, it only matches
windows that are at least partially on the Xinerama screen
containing the mouse pointer\.  This condition implicitly
activates the
\fICurrentDesk\fR
condition\.
.PP
The
\fICurrentPageAnyDesk\fR and \fICurrentScreen\fR
conditions matches only windows that are on the current page of any
desk\.  If Xinerama support is enabled, they only match windows
that are at least partially on the Xinerama screen containing the
mouse pointer\.
.PP
The
\fIFixedPosition\fR
condition excludes all windows that do not have a fixed position,
either set through WM hints or the
\fBStyle\fR
option
\fIFixedPosition\fR\.
Example:
.sp
.RS 4
.nf
\fBDestroyFunc\fR ToggleFixedGeometry
\fBAddToFunc\fR   ToggleFixedGeometry
+ I \fBPick\fR (FixedPosition) \e
	\fBWindowStyle\fR VariablePosition, VariableSize
+ I \fBTestRc\fR (NoMatch) \fBWindowStyle\fR FixedPosition, FixedSize
.fi
.RE
.PP
The
\fIFixedSize\fR
condition excludes all windows that do not have a fixed size,
either set through WM hints or the
\fBStyle\fR
option
\fIFixedSize\fR\.
.PP
The
\fIFocused\fR
matches on the window that currently has the keyboard focus\.
This is not useful for the
\fBCurrent\fR
command but can be used with the other conditional commands\.
.PP
The
\fIHasHandles\fR
condition excludes all windows that do not have resize handles\.
.PP
The
\fIHasPointer\fR
condition excludes all windows that do not contain the pointer\.
.PP
The
\fIIconic\fR
condition matches only iconic windows\.
.PP
The
\fIIconifiable\fR
condition matches only windows that are allowed to be iconified\.
.PP
The
\fILayer [n]\fR
condition matches only windows on the specified layer\.  The
optional argument of the
\fILayer\fR
condition defaults to the layer of the focused window\.  The
negation
\fI!Layer\fR
switches off the
\fILayer\fR
condition\.
.PP
The
\fIMaximizable\fR
condition matches only windows that are allowed to be maximized\.
.PP
The
\fIMaximized\fR
condition matches only maximized windows\.
.PP
The
\fIOverlapped\fR
condition matches only windows that are overlapped by other windows
on the same layer (or unmanaged windows if the option
\fIRaiseOverUnmanaged\fR
of the
\fBBugOpts\fR
command is used)\.  Note that this condition can be slow if you
have many windows or if RaiseOverUnmanaged is used and the
connection to the X server is slow\.
.PP
The
\fIPlacedByButton n\fR
condition is fulfilled if the last interactive motion of the
window (with the
\fBMove\fR
command or as
\fIManualPlacement\fR)
was ended by pressing mouse button
\fIn\fR\.
Example:
.sp
.RS 4
.nf
\fBMouse\fR   1 T     A       \fBFunction\fR MoveWindow

\fBDestroyFunc\fR MoveWindow
\fBAddToFunc\fR MoveWindow
+ C \fBMove\fR
+ C \fBThisWindow\fR (PlacedByButton 5) \fBWindowShade\fR off
+ C \fBTestRc\fR (Match) \fBMaximize\fR on 0 100
+ C \fBThisWindow\fR (PlacedByButton 4) \fBWindowShade\fR on
.fi
.RE
.PP
The
\fIPlacedByButton3\fR
condition has the same meaning as
\fIPlacedByButton\fR
3\.  It remains only for backward compatibility\.
.PP
The
\fIPlacedByFvwm\fR
condition excludes all windows that have been placed manually or
by using the user or program position hint\.
.PP
The
\fIRaised\fR
conditions matches only windows that are fully visible on the
current viewport and not overlapped by any other window\.
.PP
The
\fIShaded\fR
conditions matches only shaded windows (see
\fBWindowShade\fR
command)\.
.PP
The
\fIState n\fR or \fI!State n\fR
conditions match only windows with the specified integer state set
(or unset)\.  See the
\fBState\fR
command for details\.  The argument may range from 0 to 31\.
.PP
The
\fISticky\fR, \fIStickyAcrossDesks\fR and \fIStickyAcrossPages\fR
match only windows that are currently sticky, sticky across all
desks or sticky across all pages\.  Please refer to the
\fBStyle\fR
options with the same name and the commands
\fBStick\fR, \fBStickAcrossDesks\fR and \fBStickAcrossPages\fR
for details\.
.PP
The
\fIStickyIcon\fR, \fIStickyAcrossDesksIcon\fR and \fIStickyAcrossPagesIcon\fR
match only windows that become sticky, sticky across all desks or sticky
across all pages when they are in iconified state\.
.PP
The
\fITransient\fR
condition matches only windows that have the "transient"
property set by the application\.  This it usually the case for
application popup menus and dialogs\.  The
\fBFvwmIdent\fR
module can be used to find out whether a specific window is
transient\.
.PP
The
\fIVisible\fR
condition matches only windows that are at least partially
visible on the current viewport and not completely overlapped by
other windows\.
.RE
.SS Module Commands
.PP
Fvwm maintains a database of module configuration lines in a form
.sp
.RS 4
.nf
\fB*\fR\fI<ModuleName>\fR\fB: \fR\fI<Config\-Resource>\fR
.fi
.RE
.PP
where
\fI<ModuleName>\fR
is either a real module name or an alias\.
.PP
This database is initially filled from config file (or from
output of
\fB\-cmd\fR
config command), and can be later modified either by user (via
\fBFvwmCommand\fR)
or by modules\.
.PP
When modules are run, they read appropriate portion of database\.
(The concept of this database is similar to one used in X resource
database)\.
.PP
Commands for manipulating module configuration database are
described below\.
.TP
\fB*\fR \fImodule_config_line\fR
.RS
.\".PP
Defines a module configuration\.
\fImodule_config_line\fR
consists of a module name (or a module alias) and a module
resource line\.  The new syntax allows a delimiter, a colon and
optional spaces, between the module name and the rest of the line,
this is recommended to avoid conflicts\.
.sp
.RS 4
.nf
*FvwmIconBox: MaxIconSize 48x48
*FvwmPager: WindowBorderWidth 1
*FvwmButtons\-TopRight: Geometry 100x100\-0+0
*FvwmButtons\-Bottom: Geometry +0\-0
.fi
.RE
.RE
.TP
\fBDestroyModuleConfig\fR \fImodule_config\fR
.RS
.\".PP
Deletes module configuration entries, so that new configuration
lines may be entered instead\.  This also sometimes the only way to
turn back some module settings, previously defined\.  This changes
the way a module runs during a fvwm session without restarting\.
Wildcards can be used for portions of the name as well\.
.PP
The new non\-conflicting syntax allows a delimiter, a colon and
optional spaces between the module name and the rest of the line\.
In this case a module name (or alias) can't have wildcards\.
.sp
.RS 4
.nf
DestroyModuleConfig FvwmButtons*
DestroyModuleConfig FvwmForm: Fore
DestroyModuleConfig FvwmIconBox: Max*
.fi
.RE
.RE
.TP
\fBKillModule\fR \fImodulename\fR [\fImodulealias\fR]
.RS
.\".PP
Causes the module which was invoked with name
\fImodulename\fR
to be killed\.  The name may include wildcards\.  If
\fImodulealias\fR
is given, only modules started with the given alias are killed\.
.sp
.RS 4
.nf
# kill all pagers
KillModule FvwmPager

\fBModule\fR FvwmEvent SoundEvent
KillModule FvwmEvent SoundEvent
.fi
.RE
.RE
.TP
\fBModule\fR \fImodulename\fR [\fImoduleparams\fR]
.RS
.\".PP
Specifies a module with its optional parameters which should be
spawned\.  Currently several modules, including
\fBFvwmButtons\fR,
\fBFvwmEvent\fR,
\fBFvwmForm\fR,
\fBFvwmGtk\fR,
\fBFvwmPager\fR,
\fBFvwmScript\fR
support aliases\.  Aliases are useful if more than one instance of
the module should be spawned\.  Aliases may be configured
separately using
\fB*\fR
syntax\.  To start a module
\fBFvwmForm\fR
using an alias
\fIMyForm\fR,
the following syntax may be used:
.sp
.RS 4
.nf
Module FvwmForm MyForm
.fi
.RE
.PP
At the current time the available modules (included with fvwm) are
\fBFvwmAnimate\fR (produces animation effects when a window is iconified or de\-iconified),
\fBFvwmAuto\fR (an auto raise module),
\fBFvwmBacker\fR (to change the background when you change desktops),
\fBFvwmBanner\fR (to display a spiffy XBM, XPM, PNG or SVG),
\fBFvwmButtons\fR (brings up a customizable tool bar),
\fBFvwmCommandS\fR (a command server to use with shell's FvwmCommand client),
\fBFvwmConsole\fR (to execute fvwm commands directly),
\fBFvwmCpp\fR (to preprocess your \fIconfig\fR with cpp),
\fBFvwmDebug\fR (to help debug fvwm),
\fBFvwmDragWell\fR (the place to drag&drop to),
\fBFvwmEvent\fR (trigger various actions by events),
\fBFvwmForm\fR (to bring up dialogs),
\fBFvwmGtk\fR (to bring up GTK menus and dialogs),
\fBFvwmIconBox\fR (like the mwm IconBox),
\fBFvwmIconMan\fR (a flexible icon manager),
\fBFvwmIdent\fR (to get window info),
\fBFvwmM4\fR (to preprocess your \fIconfig\fR with m4),
\fBFvwmPager\fR (a mini version of the desktop),
\fBFvwmPerl\fR (a Perl manipulator and preprocessor),
\fBFvwmProxy\fR (to locate and control obscured windows by using small proxy windows),
\fBFvwmRearrange\fR (to rearrange windows),
\fBFvwmSave\fR (saves the desktop state in \.xinitrc style),
\fBFvwmSaveDesk\fR (saves the desktop state in fvwm commands),
\fBFvwmScript\fR (another powerful dialog toolkit),
\fBFvwmScroll\fR (puts scrollbars on any window),
\fBFvwmTabs\fR (a generic tabbing module),
\fBFvwmTaskBar\fR (a Windows like task bar),
\fBFvwmTheme\fR (managed colorsets, obsolete),
\fBFvwmWharf\fR (an AfterStep like button bar),
\fBFvwmWindowMenu\fR (a configurable fvwm menu listing current windows),
\fBFvwmWinList\fR (a window list)\.
These modules have their own man
pages\.  There may be other modules out on there as well\.
.PP
Modules can be short lived transient programs or, like
\fBFvwmButtons\fR
,
can remain for the duration of the X session\.  Modules are
terminated by the window manager prior to restarts and quits, if
possible\.  See the introductory section on modules\.  The keyword
\fBModule\fR
may be omitted if
\fImodulename\fR
is distinct from all fvwm commands\.
.RE
.TP
\fBModuleListenOnly\fR \fImodulename\fR [\fImoduleparams\fR]
.RS
.\".PP
This command works like the
\fBModule\fR
command, but fvwm never sends any messages to the module\.  This may
be handy to write a module as a shell script that is triggered by
external events without the burden to answer packets sent by
fvwm\.  For example, a module written as a shell script may change
labels of the
\fBFvwmButtons\fR
module to implement a simple clock\.
.RE
.TP
\fBModulePath\fR \fIpath\fR
.RS
.\".PP
Specifies a colon separated list of directories in which to search
for modules\.  To find a module, fvwm searches each directory in
turn and uses the first file found\.  Directory names on the list
do not need trailing slashes\.
.PP
The
\fBModulePath\fR
may contain environment variables such as
\fI$HOME\fR (or \fI${HOME}\fR)\.
Further, a '+' in the
\fIpath\fR
is expanded to the previous value of the
\fIpath\fR,
allowing easy appending or prepending to the
\fIpath\fR\.
.PP
For example:
.sp
.RS 4
.nf
ModulePath ${HOME}/lib/fvwm/modules:+
.fi
.RE
.PP
The directory containing the standard modules is available via the
environment variable
\fI$FVWM_MODULEDIR\fR\.
.RE
.TP
\fBModuleSynchronous\fR [Expect\ \fIstring\fR] [Timeout\ \fIsecs\fR] \fImodulename\fR
.RS
.\".PP
The
\fBModuleSynchronous\fR
command is very similar to
\fBModule\fR\.
Fvwm stops processing any commands and user input until the module
sends a string beginning with "NOP FINISHED STARTUP" back to fvwm\.
If the optional
\fITimeout\fR
is given fvwm gives up if the module sent no input back to fvwm
for
\fIsecs\fR
seconds\.  If the
\fIExpect\fR
option is given, fvwm waits for the given
\fIstring\fR
instead\.
\fBModuleSynchronous\fR
should only be used during fvwm startup to enforce the order in
which modules are started\.  This command is intended for use with
the (currently hypothetical) module that should be in place before
other modules are started\.
.PP
Warning: It is quite easy to hang fvwm with this command, even if
a timeout is given\.  Be extra careful choosing the string to wait
for\.  Although all modules in the fvwm distribution send back the
"NOP FINISHED STARTUP" string once they have properly started up,
this may not be the case for third party modules\.  Moreover, you
can try to escape from a locked
\fBModuleSynchronous\fR
command by using the key sequence
.SM Ctrl-Alt-Escape
(see the
\fBEscapeFunc\fR)\.
.RE
.TP
\fBModuleTimeout\fR \fItimeout\fR
.RS
.\".PP
Specifies how many seconds fvwm waits for a module to respond\.  If
the module does not respond within the time limit then fvwm kills
it\.
\fItimeout\fR
must be greater than zero, or it is reset to the default value of
30 seconds\.
.RE
.TP
\fBSendToModule\fR \fImodulename\fR \fIstring\fR
.RS
.\".PP
Sends an arbitrary string (no quotes required) to all modules,
whose alias or name matching
\fImodulename\fR,
which may contain wildcards\.  This only makes sense if the module
is set up to understand and deal with these strings though\.  Can be
used for module to module communication, or implementation of more
complex commands in modules\.
.RE
.SS Session Management Commands
.TP
\fBQuit\fR
.RS
.\".PP
Exits fvwm, generally causing X to exit too\.
.RE
.TP
\fBQuitScreen\fR
.RS
.\".PP
Causes fvwm to stop managing the screen on which the command was
issued\.
.RE
.TP
\fBRestart\fR [\fIwindow_manager\fR\ [\fIparams\fR]]
.RS
.\".PP
Causes fvwm to restart itself if
\fIwindow_manager\fR
is left blank, or to switch to an alternate window manager (or
other fvwm version) if
\fIwindow_manager\fR
is specified\.  If the window manager is not in your default search
path, then you should use the full path name for
\fIwindow_manager\fR\.
.PP
This command should not have a trailing ampersand\.  The command
can have optional parameters with simple shell\-like syntax\.  You
can use
\fI~\fR
(is expanded to the user's home directory) and environmental
variables
\fI$VAR\fR or \fI${VAR}\fR\.
Here are several examples:
.sp
.RS 4
.nf
\fBKey\fR F1 R N Restart
\fBKey\fR F1 R N Restart fvwm \-s
\fBKey\fR F1 R N Restart ~/bin/fvwm \-f $HOME/\.fvwm/main
\fBKey\fR F1 R N Restart fvwm1 \-s \-f \.fvwmrc
\fBKey\fR F1 R N Restart xterm \-n '"X console"' \e
  \-T \e"X\e\ console\e" \-e fvwm1 \-s
.fi
.RE
.PP
If you need a native restart, we suggest only to use
\fBRestart\fR
command without parameters unless there is a reason not to\.  If you
still use an old command 'Restart fvwm2' that was correct in 2\.2\.x,
all current command line arguments are lost\.  On a restart without
parameters or with \-\-pass\-args, they are preserved\.  Here are some
cases when 'Restart fvwm2' or 'Restart fvwm' cause troubles:
.sp
.RS 4
.nf
* running fvwm under a session manager
* running fvwm with multi headed displays
* having command line arguments, like
  \-f themes\-rc or \-cmd
* if the first fvwm2 in the $PATH is a
  different one
.fi
.RE
.PP
This is why we are issuing a warning on an old usage\.  If you
really want to restart to fvwm with no additional arguments, you
may get rid of this warning by using "Restart fvwm \-s" or
"Restart /full/path/fvwm"\.
.PP
Note, currently with multi headed displays, restart of fvwms on
different screens works independently\.
.RE
.TP
\fBRestart\fR \fB\-\-pass\-args\fR \fIwindow_manager\fR
.RS
.\".PP
The same as
\fBRestart\fR
without parameters but the name for the current window manager is
replaced with the specified
\fIwindow_manager\fR
and original arguments are preserved\.
.PP
This command is useful if you use initial arguments like
.sp
.RS 4
.nf
\-cmd FvwmCpp
.fi
.RE
.PP
and want to switch to another fvwm version without losing the
initial arguments\.
.RE
.TP
\fBRestart\fR \fB\-\-dont\-preserve\-state\fR [\fIother\-params\fR]
.RS
.\".PP
The same as
.sp
.RS 4
.nf
\fBRestart\fR [\fIother\-params\fR]
.fi
.RE
.PP
but it does not save any window states over the restart\.
.PP
Without this option,
\fBRestart\fR
preserves most per\-window state by writing it to a file named
\fI\.fs\-restart\-\fR\fI\fI$HOSTDISPLAY\fR\fR
in the user's home directory\.
.RE
.TP
\fBSaveSession\fR
.RS
.\".PP
Causes a session manager (if any) to save the session\.  This
command does not work for xsm, it seems that xsm does not
implement this functionality\.  Use Unix signals to manage xsm
remotely\.
.RE
.TP
\fBSaveQuitSession\fR
.RS
.\".PP
Causes a session manager (if any) to save and then shutdown the
session\.  This command does not work for xsm, it seems that xsm
does not implement this functionality\.  Use Unix signals to manage
xsm remotely\.
.RE
.SS Colorsets
.PP
Colorsets are a powerful method to control colors\.  Colorsets
create appearance resources that are shared by fvwm and its
modules\.  When a colorset is modified all parts of fvwm react to
that change\.  A colorset includes a foreground color, background
color, shadow and highlight color (often based on the background
color), background face (this includes images and all kinds of
gradients)\.  There is a way to render background face and specify
other color operations\.
.PP
In the 2\.4\.x versions a special module
\fBFvwmTheme\fR
was introduced to manage colorsets\.  Starting with the 2\.5\.x beta
version, the \fBFvwmTheme\fR functionality was moved to the core fvwm,
so this module became obsolete\.
.PP
The old syntax:
.sp
.RS 4
.nf
\fBDestroyModuleConfig\fR \fBFvwmTheme\fR: *
*\fBFvwmTheme\fR: \fBColorset\fR 0 fg black, bg rgb:b4/aa/94
*\fBFvwmTheme\fR: \fBColorset\fR 1 fg black, bg rgb:a1/b2/c8
.fi
.RE
.PP
corresponds to the new syntax:
.sp
.RS 4
.nf
\fBCleanupColorsets\fR
\fBColorset\fR 0 fg black, bg rgb:b4/aa/94
\fBColorset\fR 1 fg black, bg rgb:a1/b2/c8
.fi
.RE
.sp
.TP
\fBColorset\fR \fInum\fR [\fIoptions\fR]
.RS
.\".PP
Creates or modifies colorset
\fInum\fR\.
Colorsets are identified by this number\.  The number can start at
zero and can be a very large number\.
.PP
Warning: The highest colorset number used determines memory
consumption\.  Thus, if you define 'Colorset 100000', the memory for
100001 colorsets is used\.  Keep your colorset numbers as small as
possible\.
.PP
By convention, colorsets are numbered like this:
.sp
.RS 4
.nf
# 0 = Default colors
# 1 = Inactive windows
# 2 = Active windows
# 3 = Inactive menu entry and menu background
# 4 = Active menu entry
# 5 = greyed out menu entry (only bg used)
# 6 = module foreground and background
# 7 = hilight colors
.fi
.RE
.PP
If you need to have more colors and do not want to reinvent the
wheel, you may use the convention used in fvwm\-themes, it defines
the meaning of the first 40 colorsets for nearly all purposes:
.PP
\fIhttp://fvwm\-themes\.sourceforge\.net/doc/colorsets\fR
.PP
Each colorset has four colors, an optional pixmap and an optional
shape mask\.  The four colors are used by modules as the
foreground, background, highlight and shadow colors\.  When a
colorset is created it defaults to a foreground of black and
background of gray\.  The background and foreground are marked as
"average" and "contrast" (see later) so that just specifying a
pixmap or gradient gives sensible results\.
.PP
\fIoptions\fR
is a comma separated list containing some of the keywords:
fg, Fore, Foreground,
bg, Back, Background,
hi, Hilite, Hilight,
sh, Shade, Shadow,
fgsh,
Pixmap, TiledPixmap, AspectPixmap,
Transparent, RootTransparent,
Shape, TiledShape, AspectShape, NoShape,
?Gradient,
Tint, fgTint, bgTint,
Alpha, fgAlpha,
Dither, NoDither,
IconTint,
IconAlpha,
Plain\.
.PP
\fIfg\fR,
\fIFore\fR and
\fIForeground\fR
take a color name as an argument and set the foreground color\.
The special name
\fIContrast\fR
may be used to select a color that contrasts well with the
background color\.  To reset the foreground color to the default
value you can simply omit the color name\.
.PP
\fIbg\fR,
\fIBack\fR and
\fIBackground\fR
take a color name as an argument and set the background color\.  It
also sets the highlight and shadow colors to values that give a 3d
effect unless these have been explicitly set with the options
below\.  The special name
\fIAverage\fR
may be used to select a color that is the average color of the
pixmap\.  If the pixmap is tinted with the
\fITint\fR
option, the tint is not taken in account in the computation of the
average color\.  You should use the
\fIbgTint\fR
option to get the "real" average color\.  The background color is
reset to the default value if the color name is omitted\.
.PP
\fIhi\fR,
\fIHilite\fR and
\fIHilight\fR
take a color name as an argument and set the highlight color\.  If
the highlight color is not explicitly set, the default is to
calculate it from the background color\.  To switch back to the
default behavior the color name can be omitted\.
.PP
\fIsh\fR,
\fIShade\fR and
\fIShadow\fR
take a color name as an argument and set the shadow color\.  If the
shadow color is not explicitly set, the default is to calculate it
from the background color\.  To switch back to the default behavior
the color name can be omitted\.
.PP
\fIfgsh\fR
takes a color name as an argument and sets the color used by the
shadowing font effect\.  See the
\fBFont Shadow Effects\fR
section of the fvwm man page\.  By default this color is computed
from the foreground and background colors\.  To switch back to the
default the color name can be omitted\.
.PP
\fIPixmap\fR,
\fITiledPixmap\fR and
\fIAspectPixmap\fR
take a file name as an argument, search the
\fBImagePath\fR
and use it as the background pixmap\.  Any transparent parts are
filled with the background color\.  Not specifying a file name
removes any existing image from the colorset\.
\fITiledPixmap\fR
produces repeated copies of the image with no scaling,
\fIPixmap\fR
causes the image to be stretched to fit whatever object the
colorset is applied to and
\fIAspectPixmap\fR
stretches to fit but retains the image aspect ratio\.
.PP
\fITransparent\fR
creates a transparent background pixmap\.  The pixmap is used as a
window background to achieve root transparency\.  For this you
should use the
\fIParentalRelativity\fR
option to the
\fBStyle\fR
command\.
A subsequent root background change may be detected or not, this
depends on the program used to set the background\.  If you use
\fBfvwm\-root\fR, \fBxsetbg\fR (xli),
\fBFvwmBacker\fR with solid or colorset colors
or a recent version of \fBEsetroot\fR (>= 9\.2) a background change is
detected\.  If background changes are not detected (e\.g\., if you use
\fBxv\fR or \fBxsetroot\fR) you can force detection by using the \fB\-d\fR option of
fvwm\-root:
.sp
.RS 4
.nf
xv \-root \-quit mybg\.png; fvwm\-root \-d
.fi
.RE
.PP
Due to the way X implements transparency no guarantees can be made
that the desired effect can be achieved\.  The application may even
crash\.  If you experience any problems with this option, do not
use it\.
.PP
Using outline move and resize (see the
\fBOpaqueMoveSize\fR
command and the
\fIResizeOpaque\fR
\fBStyle\fR
option) as well as setting the
\fIWindowShadeShrinks\fR
style may help\.  The transparency achieved with
\fITransparent\fR
depends on whether the colorset is applied to the foreground or
the background of a window\.  In the second case the transparency is
relative to the parent window of the window on which the colorset
is defined\.  For example:
.sp
.RS 4
.nf
Colorset 12 VGradient 200 grey30 grey60
Colorset 17 Transparent
*\fBFvwmIconMan\fR: Colorset 12
*\fBFvwmIconMan\fR: PlainColorset 17
.fi
.RE
.PP
gives an IconMan with a vertical grey gradient background and the
buttons use the background (by transparency)\.  To obtain a (root)
transparent IconMan:
.sp
.RS 4
.nf
Colorset 12 Transparent
Colorset 17 Transparent
Colorset 18 Transparent
Colorset 19 Transparent

*\fBFvwmIconMan\fR: Colorset 12
*\fBFvwmIconMan\fR: PlainColorset 17
*\fBFvwmIconMan\fR: FocusColorset 18
*\fBFvwmIconMan\fR: IconColorset  19
.fi
.RE
.PP
The Colorset IconMan option defines the IconMan window background,
but the PlainColorset and the FocusColorset are drawn on the
foreground\.  So, the transparency of the IconMan buttons is
achieved by drawing nothing\.  Now if this IconMan is swallowed in
an FvwmButtons as:
.sp
.RS 4
.nf
\fBFvwmButtons\fR:(Colorset 10, Swallow "FvwmIconMan" 'FvwmIconMan')
.fi
.RE
.PP
then,
\fBFvwmIconMan\fR
becomes a child of
\fBFvwmButtons\fR
and it is transparent relative to
\fBFvwmButtons\fR\.
So, in this case
\fBFvwmIconMan\fR
uses Colorset 10 as background\.  If you want root transparency use
the
\fIRootTransparent\fR
option\.
\fBFvwmButtons\fR,
\fBFvwmIconMan\fR,
\fBFvwmIdent\fR,
\fBFvwmScroll\fR
and
\fBFvwmTaskBar\fR
are relatively simple\.  There is one main colorset option which
defines the background of the window and the other colorsets (if
any) are drawn on the foreground\.  The case of
\fBFvwmWinList\fR and
\fBFvwmProxy\fR
are simpler\.  With
\fBFvwmWinList\fR
all the colorsets are drawn on the foreground and with
\fBFvwmProxy\fR
the two colorsets refer to the window backgrounds\.
\fBFvwmPager\fR
is more complicated as almost everything in the pager are windows
with some parental relations (the mini windows are the child and
the desktops are the parents and all this is complicated by the
hilighted page)\.  So, the colorsets apply to the background of
these windows\.  You should experiment\.  For
\fBFvwmForm\fR and
\fBFvwmScript\fR
the situation is similar\.  There is a main window (a child of the
root window) which corresponds to the main colorset and most of
the widgets are windows which are children of the main window\.
\fITint\fR
may work or not with the
\fITransparent\fR
option\.  When the colorset is drawn on the foreground
\fITint\fR
should work\.  In some cases, tinting may be very slow\.  Tinting may
work with fvwm menu (without animation)\.  Tinting may work better
if your X server has backing store enabled (try xdpyinfo to see if
this the case)\.  There is a chance that the backing store support
of your X server does not work well with the terrible hack used to
Tint the ParentRelative Pixmap\.  So, to get tinted root
transparency it is more safe to use the
\fIRootTransparent\fR
option\.
.PP
\fIRootTransparent\fR [ \fIbuffer\fR ]
creates a root transparent background\.  To make this option work,
you must use an \fBEsetroot\fR compatible program, fvwm\-root with the
\-\-retain\-pixmap option or \fBFvwmBacker\fR with the RetainPixmap option
(and colorset or solid backgrounds)\.  The
\fIbuffer\fR
keyword is useful only when the
\fITint\fR
option is used too\.  This speeds up creation of windows which use
the colorset (useful for fvwm menus) at the cost of memory
usage\.  It also speeds up opaque move and resize which can be
unacceptably slow without
\fIbuffer\fR\.
However, this option may add a lot of memory to your X server
(depending on the size of the image used to set the
background)\.  In summary, using outline move and resize for modules
which use such a colorset may be a good idea\.
.PP
\fIShape\fR,
\fITiledShape\fR and
\fIAspectShape\fR
take a file name as an argument, search the
\fBImagePath\fR
and use it as the shape bitmap\.
\fITiledShape\fR
produces repeated copies of the bitmap with no scaling,
\fIShape\fR
causes the bitmap to be stretched to fit whatever object the
colorset is applied to and
\fIAspectShape\fR
stretches to fit but retains the bitmap aspect ratio\.  If the file
is a pixmap in xpm format the shape mask (all opaque pixels) of the
pixmap is used\.  For png and svg images, the shape mask is equivalent
to all not completely transparent pixels (alpha > 0)\.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBWarning\fR
Due to the way X11 implements shapes you cannot take back
making windows shaped\. You may have to restart fvwm or the shaped
application\.
.PP
\fI?Gradient \.\.\.\fR
creates a pixmap and stretches it to fit the window\.
\fI?Gradient\fR
may be one of \fIHGradient\fR, \fIVGradient\fR,
\fIDGradient\fR, \fIBGradient\fR,
\fISGradient\fR, \fICGradient\fR,
\fIRGradient\fR or \fIYGradient\fR\.
The gradient types
are as follows: H is horizontal; V is vertical; D is diagonal
from top left to bottom right; B is a backwards diagonal from
bottom left to top right; S is concentric squares; C is concentric
circles; R is a radar like pattern and Y is a Yin Yang style (but
without the dots)\.
Please refer to the
\fBColor Gradients\fR
section for the syntax of gradients\.
.PP
\fITint\fR
takes 2 arguments, a color and a percentage between 0 and 100\.  It
causes the image defined using
\fI?Pixmap\fR
or
\fI?Gradient\fR
to be tinted with the specified color using the percentage\.  If the
image is transparent
\fITint\fR
tints only the image part\.  Unfortunately, a colorset background
specified using the
\fITransparent\fR
option can give strange results\.  See the
\fITransparent\fR
option for details\.  With no arguments this option removes the
tint\.
.PP
\fIfgTint\fR
takes 2 arguments, a color and a percentage between 0 and 100\.  It
causes the color defined using
\fIfg\fR
to be tinted with the specified color using the percentage\.  With
no arguments this option removes the tint\.
.PP
\fIbgTint\fR
takes 2 arguments, a color and a percentage between 0 and 100\.  It
causes the color defined using
\fIbg\fR
to be tinted with the specified color using the percentage\.  If the
\fIsh\fR
and
\fIhi\fR
colors are not specified, they are recomputed from the tinted bg
color\.  With no arguments this option removes the tint\.
.PP
\fIAlpha\fR
takes a percentage between 0 and 100 as an argument\.  It causes
fvwm to merge the image defined using
\fI?Pixmap\fR
or
\fI?Gradient\fR
with the
\fIbg\fR
color using the percentage\.  If the percentage is 0 the image is
hidden and if it is 100 the image is displayed as usual (no
merge)\.  The default is 100 and it is restored if no argument is
given\.
.PP
\fIfgAlpha\fR
takes a percentage between 0 and 100 as an argument\.  It causes
fvwm to merge the text and the colorset background using the
percentage\.  If the percentage is 0 the text is hidden and if it is
100 the text is displayed as usual (no merge)\.  This option has an
effect only with fonts loaded by Xft, see the
\fBFont Names and Font Loading\fR
section\.  The default is 100 and it is restored if no argument is
given\.
.PP
\fIDither\fR
causes fvwm to dither the image defined using
\fI?Pixmap\fR
or
\fI?Gradient\.\fR
This is useful only with displays with depth less than or equal to
16 (i\.e\., on displays which can only display less than 65537
colors at once)\.  The dithering effect lets you simulate having
more colors available that you actually have\.
\fINoDither\fR
causes fvwm to do not dither the images\.
\fIDither\fR
is the default if the depth is less than or equal to 8 (a screen
with 256 colors or less)\.  In depth 15 (32768 colors) and 16 (65536
colors), the default is
\fINoDither\fR,
however this effect can be useful with images which contain a lot
of close colors\.  For example a fine gradient looks more
smooth\.
.PP
\fIIconTint\fR
takes 2 arguments, a color and a percentage between 0 and 100\.  It
causes fvwm or a module to tint the "icons" which are rendered
into the colorset background with the specified color using a
percentage\.  Here "icons" means, fvwm Icons, fvwm menu icons,
MiniIcons which represent applications in various modules, images
loaded by modules (e\.g\., images specified by the
\fIIcon\fR
\fBFvwmButtons\fR
button option) \.\.\.etc\.  With no arguments this option removes the
icon tint\.
.PP
\fIIconAlpha\fR
takes a percentage between 0 and 100 as an argument\.  It causes
fvwm to merge the "icons" which are rendered into the colorset
background using this percentage\.  The default is 100 and it is
restored if no argument is given\.
.PP
\fINote\fR:
It is equivalent to use "Tint a_color rate" and "Alpha a" if a =
100 and the bg color is a_color\.  This equivalence does not hold
for IconAlpha and IconTint as the background can be an image or a
gradient (and not a uniform color background)\.
However, in some cases you can achieve (almost) the same effect by
using IconTint in the place of IconAlpha\.  This is preferable as,
in general, IconAlpha generates more redrawing than IconTint\.
.PP
\fINoShape\fR
removes the shape mask from the colorset while
\fIPlain\fR
removes the background pixmap or gradient\.
.PP
Examples
.sp
.RS 4
.nf
Colorset 3 fg tan, bg navy
.fi
.RE
.PP
If necessary this creates colorsets 0, 1, 2 and 3 and then changes
colorset 3 to have a foreground of tan, a background of navy\.
.sp
.RS 4
.nf
Colorset 3 bg "navy blue"
.fi
.RE
.PP
changes the background color of colorset 3 to navy blue\.  The
foreground and pixmap are unchanged\.
.sp
.RS 4
.nf
Colorset 3 AspectPixmap large_murky_dungeon\.xpm
.fi
.RE
.PP
causes depression\.
.sp
.RS 4
.nf
Colorset 3 bg Average
.fi
.RE
.PP
Sets the background color and the relief colors to match the
background pixmap\.  This is the default setting but it must be used
if a background color was specified and is now not required\.
.sp
.RS 4
.nf
Colorset 3 YGradient 200 3 blue 1000 navy 1 blue 1000 navy
.fi
.RE
.PP
Adds a Yin Yang gradient background pixmap to colorset 3\.  If the
background is set to average it is recomputed along with the
foreground if that is set to contrast\.
.sp
.RS 4
.nf
#!/bin/sh
\fBFvwmCommand\fR "Colorset 7 fg navy, bg gray"
while true
do
  \fBFvwmCommand\fR "Colorset 7 fg gray"
  sleep 1
  \fBFvwmCommand\fR "Colorset 7 fg navy"
  sleep 1
done
.fi
.RE
.PP
Makes colorset 7 blink\.
.PP
The color names used in colorsets are saved as fvwm variables which
can be substituted in any fvwm command\.  For example:
.sp
.RS 4
.nf
\fBAddToFunc\fR InitFunction
+ I \fBExec\fR exec xterm \-fg $[fg\.cs0] \-bg $[bg\.cs0]
.fi
.RE
.PP
Where $[fg\.cs0] is the foreground color of colorset zero\.  Please
refer to the
\fBCommand Expansion\fR
section for more information\.
.RE
.TP
\fBCleanupColorsets\fR
.RS
.\".PP
Resets a definition of all colorsets\.
.RE
.TP
.B Color Gradients
.RS
.\".PP
A color gradient is a background that changes its color gradually
from one hue to a different one\.  Color gradients can be used by
various commands and modules of fvwm\.  There are eight types of
gradients:
\fBHGradient\fR
is a horizontal gradient,
\fBVGradient\fR
is vertical,
\fBDGradient\fR
is diagonal from top left to bottom right,
\fBBGradient\fR
is backwards diagonal from bottom left to top right,
\fBSGradient\fR
is concentric squares,
\fBCGradient\fR
is concentric circles,
\fBRGradient\fR
is a radar like pattern and
\fBYGradient\fR
is a Yin Yang style (but without the dots)\.
.PP
The color gradient syntax has two forms:
.HP 1
\fB?Gradient\fR \fIcolors\fR \fIstart\-color\fR \fIend\-color\fR
.PP
This form specifies a linear gradient\.  The arguments denote the
total number of \fIcolors\fR
to allocate (between 2 and 1000), the initial color and the final
color\.
.PP
Example:
.sp
.RS 4
.nf
\fBTitleStyle\fR VGradient 20 rgb:b8/ce/bc rgb:5b/85/d0
.fi
.RE
.HP 1
\fB?Gradient\fR \fIcolors\fR \fIsegments\fR \fIcolor\fR \fIlength\fR \fIcolor\fR [\fIlength\fR\ \fIcolor\fR] ...
.PP
The second form specifies a nonlinear gradient\.  The arguments are:
the total number of \fIcolors\fR
to allocate (between 2 and 1000), then the number of
\fIsegments\fR\.
For each segment, specify the starting \fIcolor\fR,
a relative \fIlength\fR,
then the ending color\.  Each subsequent segment begins with the
second color of the last segment\.  The lengths may be any
non\-negative integers\.  The length of one segment divided by the
sum of all segments lengths is the fraction of the colors that
are used for the segment\.
.PP
Examples:
.sp
.RS 4
.nf
\fBMenuStyle\fR * \e
	MenuFace DGradient 128 2 lightgrey 50 blue 50 white

# 20% gradient from red to blue,
# 30% from blue to black,
# 50% from black to grey
\fBMenuStyle\fR * \e
	MenuFace DGradient 100 3 Red 20 Blue 30 Black 50 Grey

# 50% from blue to green, then
# 50% from yellow to red
\fBColorset\fR 0 HGradient 128 3 Blue 1000 Green 1 Yellow 1000 Red
.fi
.RE
.RE
.SH ENVIRONMENT

The environment variables that have an effect on how fvwm operates
are the following:
.PP
\fIDISPLAY\fR
.RS 4
Fvwm starts on this display unless the
\fB\-display\fR
option is given\.
.RE
.PP
\fIFVWM_MODULEDIR\fR
.RS 4
Set by fvwm to the directory containing the standard fvwm modules\.
.RE
.PP
\fIFVWM_USERDIR\fR
.RS 4
Used to determine the user's data directory for reading and sometimes writing personal files\.  If this variable is not already set, it is set by fvwm to
\fI$HOME/\.fvwm\fR, which is the default user's data directory\.
.RE
.PP
\fISESSION_MANAGER\fR
.RS 4
Fvwm tries to contact this session manager\.
.RE
.PP
\fISESSION_MANAGER_NAME\fR
.RS 4
This is used mainly to determine xsm running to work around its bug\.  If this variable is set to "xsm", DiscardCommand is set as xsm expects it and not as XSMP requires\.  If you run fvwm under xsm, you should set this variable to "xsm", otherwise old state files are not removed\.
.RE
.PP
\fISM_SAVE_DIR\fR
.RS 4
If this is set, fvwm saves its session data in this directory\.  Otherwise it uses
\fI$HOME\fR\.  Note, the state files are named
\fI\.fs\-??????\fR
and normally are removed automatically when not used anymore\.
.RE
.SH AUTHORS
.PP
Robert Nation with help from many people, based on twm code, which was written by Tom LaStrange\.  After Robert Nation came Charles Hines, followed by Brady Montz\.  Currently fvwm is developed by a number of people on the fvwm\-workers mailing list\.
.SH COPYRIGHT
.PP
Fvwm and all the modules, scripts and other files coming with the distribution are subject to the GNU General Public License (GPL)\.  Please refer to the COPYING file that came with fvwm for details\.
.SH BUGS
.PP
Bug reports can be sent to the fvwm\-workers mailing list at
<fvwm\-workers@fvwm\.org>
.PP
The official fvwm homepage is
\fIhttp://fvwm\.org/\fR\.
